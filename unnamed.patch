Index: SlidingMeunlibrary/build/intermediates/manifests/tmp/manifestMerger4015710602816911439.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/manifests/tmp/manifestMerger4015710602816911439.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/manifests/tmp/manifestMerger4015710602816911439.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jeremyfeinstein.slidingmenu.lib.test">
+
+    <uses-sdk android:minSdkVersion="15" android:targetSdkVersion="25" />
+
+    <application>
+        <uses-library android:name="android.test.runner" />
+    </application>
+
+    <instrumentation android:name="android.test.InstrumentationTestRunner"
+                     android:targetPackage="com.jeremyfeinstein.slidingmenu.lib.test"
+                     android:handleProfiling="false"
+                     android:functionalTest="false"
+                     android:label="Tests for com.jeremyfeinstein.slidingmenu.lib.test"/>
+</manifest>
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_out_to_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_out_to_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_out_to_bottom.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="100%p" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_out_to_bottom.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_bottom.xml -->
\ No newline at end of file
Index: app/src/test/java/zhu/com/sortingdata/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/zhu/com/sortingdata/ExampleUnitTest.java	(revision )
+++ app/src/test/java/zhu/com/sortingdata/ExampleUnitTest.java	(revision )
@@ -0,0 +1,17 @@
+package zhu.com.sortingdata;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingListActivity.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingListActivity.java	(revision )
@@ -0,0 +1,157 @@
+package com.jeremyfeinstein.slidingmenu.lib.app;
+
+import android.app.ListActivity;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+import android.widget.ListView;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
+
+public class SlidingListActivity extends ListActivity implements SlidingActivityBase {
+
+	private SlidingActivityHelper mHelper;
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		mHelper = new SlidingActivityHelper(this);
+		mHelper.onCreate(savedInstanceState);
+		ListView listView = new ListView(this);
+		listView.setId(android.R.id.list);
+		setContentView(listView);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onPostCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onPostCreate(Bundle savedInstanceState) {
+		super.onPostCreate(savedInstanceState);
+		mHelper.onPostCreate(savedInstanceState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#findViewById(int)
+	 */
+	@Override
+	public View findViewById(int id) {
+		View v = super.findViewById(id);
+		if (v != null)
+			return v;
+		return mHelper.findViewById(id);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)
+	 */
+	@Override
+	protected void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		mHelper.onSaveInstanceState(outState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(int)
+	 */
+	@Override
+	public void setContentView(int id) {
+		setContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View)
+	 */
+	@Override
+	public void setContentView(View v) {
+		setContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	@Override
+	public void setContentView(View v, LayoutParams params) {
+		super.setContentView(v, params);
+		mHelper.registerAboveContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(int)
+	 */
+	public void setBehindContentView(int id) {
+		setBehindContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View)
+	 */
+	public void setBehindContentView(View v) {
+		setBehindContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	public void setBehindContentView(View v, LayoutParams params) {
+		mHelper.setBehindContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#getSlidingMenu()
+	 */
+	public SlidingMenu getSlidingMenu() {
+		return mHelper.getSlidingMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#toggle()
+	 */
+	public void toggle() {
+		mHelper.toggle();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showAbove()
+	 */
+	public void showContent() {
+		mHelper.showContent();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showBehind()
+	 */
+	public void showMenu() {
+		mHelper.showMenu();
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showSecondaryMenu()
+	 */
+	public void showSecondaryMenu() {
+		mHelper.showSecondaryMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setSlidingActionBarEnabled(boolean)
+	 */
+	public void setSlidingActionBarEnabled(boolean b) {
+		mHelper.setSlidingActionBarEnabled(b);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onKeyUp(int, android.view.KeyEvent)
+	 */
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		boolean b = mHelper.onKeyUp(keyCode, event);
+		if (b) return b;
+		return super.onKeyUp(keyCode, event);
+	}
+
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-nl/values-nl.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-nl/values-nl.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-nl/values-nl.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-nl/values-nl.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Sleep om te vernieuwen…</string>
+    <string name="pull_to_refresh_refreshing_label">Laden…</string>
+    <string name="pull_to_refresh_release_label">Loslaten om te vernieuwen…</string>
+</resources>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/MaterialProgressDrawable.java	(revision )
@@ -0,0 +1,758 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package in.srain.cube.views.ptr.header;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.*;
+import android.graphics.Paint.Style;
+import android.graphics.drawable.Animatable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.ShapeDrawable;
+import android.graphics.drawable.shapes.OvalShape;
+import android.os.Build;
+import android.util.DisplayMetrics;
+import android.view.View;
+import android.view.animation.*;
+import android.view.animation.Interpolator;
+import in.srain.cube.views.ptr.util.PtrLocalDisplay;
+
+import java.util.ArrayList;
+
+/**
+ * Fancy progress indicator for Material theme.
+ * It's taken from {@link android.support.v4.widget}.
+ * I've done some slight changes.
+ *
+ * @hide
+ */
+public class MaterialProgressDrawable extends Drawable implements Animatable {
+
+    // Maps to ProgressBar.Large style
+    public static final int LARGE = 0;
+    // Maps to ProgressBar default style
+    public static final int DEFAULT = 1;
+    private static final Interpolator LINEAR_INTERPOLATOR = new LinearInterpolator();
+    private static final Interpolator END_CURVE_INTERPOLATOR = new EndCurveInterpolator();
+    private static final Interpolator START_CURVE_INTERPOLATOR = new StartCurveInterpolator();
+    private static final Interpolator EASE_INTERPOLATOR = new AccelerateDecelerateInterpolator();
+    // Maps to ProgressBar default style
+    private static final int CIRCLE_DIAMETER = 40;
+    private static final float CENTER_RADIUS = 8.75f; //should add up to 10 when + stroke_width
+    private static final float STROKE_WIDTH = 2.5f;
+    // Maps to ProgressBar.Large style
+    private static final int CIRCLE_DIAMETER_LARGE = 56;
+    private static final float CENTER_RADIUS_LARGE = 12.5f;
+    private static final float STROKE_WIDTH_LARGE = 3f;
+    /**
+     * The duration of a single progress spin in milliseconds.
+     */
+    private static final int ANIMATION_DURATION = 1000 * 80 / 60;
+    /**
+     * The number of points in the progress "star".
+     */
+    private static final float NUM_POINTS = 5f;
+    /**
+     * Layout info for the arrowhead in dp
+     */
+    private static final int ARROW_WIDTH = 10;
+    private static final int ARROW_HEIGHT = 5;
+    private static final float ARROW_OFFSET_ANGLE = 5;
+    /**
+     * Layout info for the arrowhead for the large spinner in dp
+     */
+    private static final int ARROW_WIDTH_LARGE = 12;
+    private static final int ARROW_HEIGHT_LARGE = 6;
+    private static final float MAX_PROGRESS_ARC = .8f;
+    private static final int KEY_SHADOW_COLOR = 0x1E000000;
+    private static final int FILL_SHADOW_COLOR = 0x3D000000;
+    private static final float SHADOW_RADIUS = 3.5f;
+    private static final float X_OFFSET = 0f;
+    private static final float Y_OFFSET = 1.75f;
+    private final int[] COLORS = new int[]{
+            0xFFC93437,
+            0xFF375BF1,
+            0xFFF7D23E,
+            0xFF34A350
+    };
+    /**
+     * The list of animators operating on this drawable.
+     */
+    private final ArrayList<Animation> mAnimators = new ArrayList<Animation>();
+    /**
+     * The indicator ring, used to manage animation state.
+     */
+    private final Ring mRing;
+    private final Callback mCallback = new Callback() {
+        @Override
+        public void invalidateDrawable(Drawable d) {
+            invalidateSelf();
+        }
+
+        @Override
+        public void scheduleDrawable(Drawable d, Runnable what, long when) {
+            scheduleSelf(what, when);
+        }
+
+        @Override
+        public void unscheduleDrawable(Drawable d, Runnable what) {
+            unscheduleSelf(what);
+        }
+    };
+    /**
+     * Canvas rotation in degrees.
+     */
+    private float mRotation;
+    private Resources mResources;
+    private View mParent;
+    private Animation mAnimation;
+    private float mRotationCount;
+    private double mWidth;
+    private double mHeight;
+    private Animation mFinishAnimation;
+    private int mBackgroundColor;
+    private ShapeDrawable mShadow;
+
+    public MaterialProgressDrawable(Context context, View parent) {
+        mParent = parent;
+        mResources = context.getResources();
+        mRing = new Ring(mCallback);
+        mRing.setColors(COLORS);
+        updateSizes(DEFAULT);
+        setupAnimators();
+    }
+
+    private void setSizeParameters(double progressCircleWidth, double progressCircleHeight,
+                                   double centerRadius, double strokeWidth, float arrowWidth, float arrowHeight) {
+        final Ring ring = mRing;
+        final DisplayMetrics metrics = mResources.getDisplayMetrics();
+        final float screenDensity = metrics.density;
+        mWidth = progressCircleWidth * screenDensity;
+        mHeight = progressCircleHeight * screenDensity;
+        ring.setStrokeWidth((float) strokeWidth * screenDensity);
+        ring.setCenterRadius(centerRadius * screenDensity);
+        ring.setColorIndex(0);
+        ring.setArrowDimensions(arrowWidth * screenDensity, arrowHeight * screenDensity);
+        ring.setInsets((int) mWidth, (int) mHeight);
+        setUp(mWidth);
+    }
+
+    private void setUp(final double diameter) {
+        PtrLocalDisplay.init(mParent.getContext());
+        final int shadowYOffset = PtrLocalDisplay.dp2px(Y_OFFSET);
+        final int shadowXOffset = PtrLocalDisplay.dp2px(X_OFFSET);
+        int mShadowRadius = PtrLocalDisplay.dp2px(SHADOW_RADIUS);
+        OvalShape oval = new OvalShadow(mShadowRadius, (int) diameter);
+        mShadow = new ShapeDrawable(oval);
+        if (Build.VERSION.SDK_INT >= 11) {
+            mParent.setLayerType(View.LAYER_TYPE_SOFTWARE, mShadow.getPaint());
+        }
+        mShadow.getPaint().setShadowLayer(mShadowRadius, shadowXOffset, shadowYOffset, KEY_SHADOW_COLOR);
+    }
+
+    /**
+     * Set the overall size for the progress spinner. This updates the radius
+     * and stroke width of the ring.
+     *
+     * @param size One of {@link MaterialProgressDrawable#LARGE} or
+     *             {@link MaterialProgressDrawable#DEFAULT}
+     */
+    public void updateSizes(int size) {
+        if (size == LARGE) {
+            setSizeParameters(CIRCLE_DIAMETER_LARGE, CIRCLE_DIAMETER_LARGE, CENTER_RADIUS_LARGE,
+                    STROKE_WIDTH_LARGE, ARROW_WIDTH_LARGE, ARROW_HEIGHT_LARGE);
+        } else {
+            setSizeParameters(CIRCLE_DIAMETER, CIRCLE_DIAMETER, CENTER_RADIUS, STROKE_WIDTH,
+                    ARROW_WIDTH, ARROW_HEIGHT);
+        }
+    }
+
+    /**
+     * @param show Set to true to display the arrowhead on the progress spinner.
+     */
+    public void showArrow(boolean show) {
+        mRing.setShowArrow(show);
+    }
+
+    /**
+     * @param scale Set the scale of the arrowhead for the spinner.
+     */
+    public void setArrowScale(float scale) {
+        mRing.setArrowScale(scale);
+    }
+
+    /**
+     * Set the start and end trim for the progress spinner arc.
+     *
+     * @param startAngle start angle
+     * @param endAngle   end angle
+     */
+    public void setStartEndTrim(float startAngle, float endAngle) {
+        mRing.setStartTrim(startAngle);
+        mRing.setEndTrim(endAngle);
+    }
+
+    /**
+     * Set the amount of rotation to apply to the progress spinner.
+     *
+     * @param rotation Rotation is from [0..1]
+     */
+    public void setProgressRotation(float rotation) {
+        mRing.setRotation(rotation);
+    }
+
+    /**
+     * Update the background color of the circle image view.
+     */
+    public void setBackgroundColor(int color) {
+        mBackgroundColor = color;
+        mRing.setBackgroundColor(color);
+    }
+
+    /**
+     * Set the colors used in the progress animation from color resources.
+     * The first color will also be the color of the bar that grows in response
+     * to a user swipe gesture.
+     *
+     * @param colors
+     */
+    public void setColorSchemeColors(int... colors) {
+        mRing.setColors(colors);
+        mRing.setColorIndex(0);
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return (int) mHeight;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return (int) mWidth;
+    }
+
+    @Override
+    public void draw(Canvas c) {
+        if (mShadow != null) {
+            mShadow.getPaint().setColor(mBackgroundColor);
+            mShadow.draw(c);
+        }
+
+        final Rect bounds = getBounds();
+        final int saveCount = c.save();
+        c.rotate(mRotation, bounds.exactCenterX(), bounds.exactCenterY());
+        mRing.draw(c, bounds);
+        c.restoreToCount(saveCount);
+    }
+
+    public int getAlpha() {
+        return mRing.getAlpha();
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+        mRing.setAlpha(alpha);
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter colorFilter) {
+        mRing.setColorFilter(colorFilter);
+    }
+
+    @SuppressWarnings("unused")
+    private float getRotation() {
+        return mRotation;
+    }
+
+    @SuppressWarnings("unused")
+    void setRotation(float rotation) {
+        mRotation = rotation;
+        invalidateSelf();
+    }
+
+    @Override
+    public int getOpacity() {
+        return PixelFormat.TRANSLUCENT;
+    }
+
+    @Override
+    public boolean isRunning() {
+        final ArrayList<Animation> animators = mAnimators;
+        final int N = animators.size();
+        for (int i = 0; i < N; i++) {
+            final Animation animator = animators.get(i);
+            if (animator.hasStarted() && !animator.hasEnded()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public void start() {
+        mAnimation.reset();
+        mRing.storeOriginals();
+        // Already showing some part of the ring
+        if (mRing.getEndTrim() != mRing.getStartTrim()) {
+            mParent.startAnimation(mFinishAnimation);
+        } else {
+            mRing.setColorIndex(0);
+            mRing.resetOriginals();
+            mParent.startAnimation(mAnimation);
+        }
+    }
+
+    @Override
+    public void stop() {
+        mParent.clearAnimation();
+        setRotation(0);
+        mRing.setShowArrow(false);
+        mRing.setColorIndex(0);
+        mRing.resetOriginals();
+    }
+
+    private void setupAnimators() {
+        final Ring ring = mRing;
+        final Animation finishRingAnimation = new Animation() {
+            public void applyTransformation(float interpolatedTime, Transformation t) {
+                // shrink back down and complete a full rotation before starting other circles
+                // Rotation goes between [0..1].
+                float targetRotation = (float) (Math.floor(ring.getStartingRotation()
+                        / MAX_PROGRESS_ARC) + 1f);
+                final float startTrim = ring.getStartingStartTrim()
+                        + (ring.getStartingEndTrim() - ring.getStartingStartTrim())
+                        * interpolatedTime;
+                ring.setStartTrim(startTrim);
+                final float rotation = ring.getStartingRotation()
+                        + ((targetRotation - ring.getStartingRotation()) * interpolatedTime);
+                ring.setRotation(rotation);
+                ring.setArrowScale(1 - interpolatedTime);
+            }
+        };
+        finishRingAnimation.setInterpolator(EASE_INTERPOLATOR);
+        finishRingAnimation.setDuration(ANIMATION_DURATION / 2);
+        finishRingAnimation.setAnimationListener(new Animation.AnimationListener() {
+            @Override
+            public void onAnimationStart(Animation animation) {
+            }
+
+            @Override
+            public void onAnimationEnd(Animation animation) {
+                ring.goToNextColor();
+                ring.storeOriginals();
+                ring.setShowArrow(false);
+                mParent.startAnimation(mAnimation);
+            }
+
+            @Override
+            public void onAnimationRepeat(Animation animation) {
+            }
+        });
+        final Animation animation = new Animation() {
+            @Override
+            public void applyTransformation(float interpolatedTime, Transformation t) {
+                // The minProgressArc is calculated from 0 to create an angle that
+                // matches the stroke width.
+                final float minProgressArc = (float) Math.toRadians(ring.getStrokeWidth()
+                        / (2 * Math.PI * ring.getCenterRadius()));
+                final float startingEndTrim = ring.getStartingEndTrim();
+                final float startingTrim = ring.getStartingStartTrim();
+                final float startingRotation = ring.getStartingRotation();
+                // Offset the minProgressArc to where the endTrim is located.
+                final float minArc = MAX_PROGRESS_ARC - minProgressArc;
+                final float endTrim = startingEndTrim
+                        + (minArc * START_CURVE_INTERPOLATOR.getInterpolation(interpolatedTime));
+                ring.setEndTrim(endTrim);
+                final float startTrim = startingTrim
+                        + (MAX_PROGRESS_ARC * END_CURVE_INTERPOLATOR
+                        .getInterpolation(interpolatedTime));
+                ring.setStartTrim(startTrim);
+                final float rotation = startingRotation + (0.25f * interpolatedTime);
+                ring.setRotation(rotation);
+                float groupRotation = ((720.0f / NUM_POINTS) * interpolatedTime)
+                        + (720.0f * (mRotationCount / NUM_POINTS));
+                setRotation(groupRotation);
+            }
+        };
+        animation.setRepeatCount(Animation.INFINITE);
+        animation.setRepeatMode(Animation.RESTART);
+        animation.setInterpolator(LINEAR_INTERPOLATOR);
+        animation.setDuration(ANIMATION_DURATION);
+        animation.setAnimationListener(new Animation.AnimationListener() {
+            @Override
+            public void onAnimationStart(Animation animation) {
+                mRotationCount = 0;
+            }
+
+            @Override
+            public void onAnimationEnd(Animation animation) {
+                // do nothing
+            }
+
+            @Override
+            public void onAnimationRepeat(Animation animation) {
+                ring.storeOriginals();
+                ring.goToNextColor();
+                ring.setStartTrim(ring.getEndTrim());
+                mRotationCount = (mRotationCount + 1) % (NUM_POINTS);
+            }
+        });
+        mFinishAnimation = finishRingAnimation;
+        mAnimation = animation;
+    }
+
+    private static class Ring {
+        private final RectF mTempBounds = new RectF();
+        private final Paint mArcPaint = new Paint();
+        private final Paint mArrowPaint = new Paint();
+        private final Callback mRingCallback;
+        private final Paint mCirclePaint = new Paint();
+        private float mStartTrim = 0.0f;
+        private float mEndTrim = 0.0f;
+        private float mRotation = 0.0f;
+        private float mStrokeWidth = 5.0f;
+        private float mStrokeInset = 2.5f;
+        private int[] mColors;
+        // mColorIndex represents the offset into the available mColors that the
+        // progress circle should currently display. As the progress circle is
+        // animating, the mColorIndex moves by one to the next available color.
+        private int mColorIndex;
+        private float mStartingStartTrim;
+        private float mStartingEndTrim;
+        private float mStartingRotation;
+        private boolean mShowArrow;
+        private Path mArrow;
+        private float mArrowScale;
+        private double mRingCenterRadius;
+        private int mArrowWidth;
+        private int mArrowHeight;
+        private int mAlpha;
+        private int mBackgroundColor;
+
+        public Ring(Callback callback) {
+            mRingCallback = callback;
+            mArcPaint.setStrokeCap(Paint.Cap.SQUARE);
+            mArcPaint.setAntiAlias(true);
+            mArcPaint.setStyle(Style.STROKE);
+            mArrowPaint.setStyle(Paint.Style.FILL);
+            mArrowPaint.setAntiAlias(true);
+
+            mCirclePaint.setAntiAlias(true);
+        }
+
+        public void setBackgroundColor(int color) {
+            mBackgroundColor = color;
+        }
+
+        /**
+         * Set the dimensions of the arrowhead.
+         *
+         * @param width  Width of the hypotenuse of the arrow head
+         * @param height Height of the arrow point
+         */
+        public void setArrowDimensions(float width, float height) {
+            mArrowWidth = (int) width;
+            mArrowHeight = (int) height;
+        }
+
+        /**
+         * Draw the progress spinner
+         */
+        public void draw(Canvas c, Rect bounds) {
+
+            mCirclePaint.setColor(mBackgroundColor);
+            mCirclePaint.setAlpha(mAlpha);
+
+            c.drawCircle(bounds.exactCenterX(), bounds.exactCenterY(), bounds.width() / 2, mCirclePaint);
+
+            final RectF arcBounds = mTempBounds;
+            arcBounds.set(bounds);
+            arcBounds.inset(mStrokeInset, mStrokeInset);
+            final float startAngle = (mStartTrim + mRotation) * 360;
+            final float endAngle = (mEndTrim + mRotation) * 360;
+            float sweepAngle = endAngle - startAngle;
+            mArcPaint.setColor(mColors[mColorIndex]);
+            mArcPaint.setAlpha(mAlpha);
+            c.drawArc(arcBounds, startAngle, sweepAngle, false, mArcPaint);
+            drawTriangle(c, startAngle, sweepAngle, bounds);
+        }
+
+        private void drawTriangle(Canvas c, float startAngle, float sweepAngle, Rect bounds) {
+            if (mShowArrow) {
+                if (mArrow == null) {
+                    mArrow = new android.graphics.Path();
+                    mArrow.setFillType(android.graphics.Path.FillType.EVEN_ODD);
+                } else {
+                    mArrow.reset();
+                }
+                // Adjust the position of the triangle so that it is inset as
+                // much as the arc, but also centered on the arc.
+                float inset = (int) mStrokeInset / 2 * mArrowScale;
+                float x = (float) (mRingCenterRadius * Math.cos(0) + bounds.exactCenterX());
+                float y = (float) (mRingCenterRadius * Math.sin(0) + bounds.exactCenterY());
+                // Update the path each time. This works around an issue in SKIA
+                // where concatenating a rotation matrix to a scale matrix
+                // ignored a starting negative rotation. This appears to have
+                // been fixed as of API 21.
+                mArrow.moveTo(0, 0);
+                mArrow.lineTo(mArrowWidth * mArrowScale, 0);
+                mArrow.lineTo((mArrowWidth * mArrowScale / 2), (mArrowHeight
+                        * mArrowScale));
+                mArrow.offset(x - inset, y);
+                mArrow.close();
+                // draw a triangle
+                mArrowPaint.setColor(mColors[mColorIndex]);
+                mArrowPaint.setAlpha(mAlpha);
+                c.rotate(startAngle + sweepAngle - ARROW_OFFSET_ANGLE, bounds.exactCenterX(),
+                        bounds.exactCenterY());
+                c.drawPath(mArrow, mArrowPaint);
+            }
+        }
+
+        /**
+         * Set the colors the progress spinner alternates between.
+         *
+         * @param colors Array of integers describing the colors. Must be non-<code>null</code>.
+         */
+        public void setColors(int[] colors) {
+            mColors = colors;
+            // if colors are reset, make sure to reset the color index as well
+            setColorIndex(0);
+        }
+
+        /**
+         * @param index Index into the color array of the color to display in
+         *              the progress spinner.
+         */
+        public void setColorIndex(int index) {
+            mColorIndex = index;
+        }
+
+        /**
+         * Proceed to the next available ring color. This will automatically
+         * wrap back to the beginning of colors.
+         */
+        public void goToNextColor() {
+            mColorIndex = (mColorIndex + 1) % (mColors.length);
+        }
+
+        public void setColorFilter(ColorFilter filter) {
+            mArcPaint.setColorFilter(filter);
+            invalidateSelf();
+        }
+
+        /**
+         * @return Current alpha of the progress spinner and arrowhead.
+         */
+        public int getAlpha() {
+            return mAlpha;
+        }
+
+        /**
+         * @param alpha Set the alpha of the progress spinner and associated arrowhead.
+         */
+        public void setAlpha(int alpha) {
+            mAlpha = alpha;
+        }
+
+        @SuppressWarnings("unused")
+        public float getStrokeWidth() {
+            return mStrokeWidth;
+        }
+
+        /**
+         * @param strokeWidth Set the stroke width of the progress spinner in pixels.
+         */
+        public void setStrokeWidth(float strokeWidth) {
+            mStrokeWidth = strokeWidth;
+            mArcPaint.setStrokeWidth(strokeWidth);
+            invalidateSelf();
+        }
+
+        @SuppressWarnings("unused")
+        public float getStartTrim() {
+            return mStartTrim;
+        }
+
+        @SuppressWarnings("unused")
+        public void setStartTrim(float startTrim) {
+            mStartTrim = startTrim;
+            invalidateSelf();
+        }
+
+        public float getStartingStartTrim() {
+            return mStartingStartTrim;
+        }
+
+        public float getStartingEndTrim() {
+            return mStartingEndTrim;
+        }
+
+        @SuppressWarnings("unused")
+        public float getEndTrim() {
+            return mEndTrim;
+        }
+
+        @SuppressWarnings("unused")
+        public void setEndTrim(float endTrim) {
+            mEndTrim = endTrim;
+            invalidateSelf();
+        }
+
+        @SuppressWarnings("unused")
+        public float getRotation() {
+            return mRotation;
+        }
+
+        @SuppressWarnings("unused")
+        public void setRotation(float rotation) {
+            mRotation = rotation;
+            invalidateSelf();
+        }
+
+        public void setInsets(int width, int height) {
+            final float minEdge = (float) Math.min(width, height);
+            float insets;
+            if (mRingCenterRadius <= 0 || minEdge < 0) {
+                insets = (float) Math.ceil(mStrokeWidth / 2.0f);
+            } else {
+                insets = (float) (minEdge / 2.0f - mRingCenterRadius);
+            }
+            mStrokeInset = insets;
+        }
+
+        @SuppressWarnings("unused")
+        public float getInsets() {
+            return mStrokeInset;
+        }
+
+        public double getCenterRadius() {
+            return mRingCenterRadius;
+        }
+
+        /**
+         * @param centerRadius Inner radius in px of the circle the progress
+         *                     spinner arc traces.
+         */
+        public void setCenterRadius(double centerRadius) {
+            mRingCenterRadius = centerRadius;
+        }
+
+        /**
+         * @param show Set to true to show the arrow head on the progress spinner.
+         */
+        public void setShowArrow(boolean show) {
+            if (mShowArrow != show) {
+                mShowArrow = show;
+                invalidateSelf();
+            }
+        }
+
+        /**
+         * @param scale Set the scale of the arrowhead for the spinner.
+         */
+        public void setArrowScale(float scale) {
+            if (scale != mArrowScale) {
+                mArrowScale = scale;
+                invalidateSelf();
+            }
+        }
+
+        /**
+         * @return The amount the progress spinner is currently rotated, between [0..1].
+         */
+        public float getStartingRotation() {
+            return mStartingRotation;
+        }
+
+        /**
+         * If the start / end trim are offset to begin with, store them so that
+         * animation starts from that offset.
+         */
+        public void storeOriginals() {
+            mStartingStartTrim = mStartTrim;
+            mStartingEndTrim = mEndTrim;
+            mStartingRotation = mRotation;
+        }
+
+        /**
+         * Reset the progress spinner to default rotation, start and end angles.
+         */
+        public void resetOriginals() {
+            mStartingStartTrim = 0;
+            mStartingEndTrim = 0;
+            mStartingRotation = 0;
+            setStartTrim(0);
+            setEndTrim(0);
+            setRotation(0);
+        }
+
+        private void invalidateSelf() {
+            mRingCallback.invalidateDrawable(null);
+        }
+    }
+
+    /**
+     * Squishes the interpolation curve into the second half of the animation.
+     */
+    private static class EndCurveInterpolator extends AccelerateDecelerateInterpolator {
+        @Override
+        public float getInterpolation(float input) {
+            return super.getInterpolation(Math.max(0, (input - 0.5f) * 2.0f));
+        }
+    }
+
+    /**
+     * Squishes the interpolation curve into the first half of the animation.
+     */
+    private static class StartCurveInterpolator extends AccelerateDecelerateInterpolator {
+        @Override
+        public float getInterpolation(float input) {
+            return super.getInterpolation(Math.min(1, input * 2.0f));
+        }
+    }
+
+    /**
+     * Taken from {@link package android.support.v4.widget}
+     */
+    private class OvalShadow extends OvalShape {
+        private RadialGradient mRadialGradient;
+        private int mShadowRadius;
+        private Paint mShadowPaint;
+        private int mCircleDiameter;
+
+        public OvalShadow(int shadowRadius, int circleDiameter) {
+            super();
+            mShadowPaint = new Paint();
+            mShadowRadius = shadowRadius;
+            mCircleDiameter = circleDiameter;
+            mRadialGradient = new RadialGradient(mCircleDiameter / 2, mCircleDiameter / 2,
+                    mShadowRadius, new int[]{
+                    FILL_SHADOW_COLOR, Color.TRANSPARENT
+            }, null, Shader.TileMode.CLAMP);
+            mShadowPaint.setShader(mRadialGradient);
+        }
+
+        @Override
+        public void draw(Canvas canvas, Paint paint) {
+            final int viewWidth = getBounds().width();
+            final int viewHeight = getBounds().height();
+            canvas.drawCircle(viewWidth / 2, viewHeight / 2, (mCircleDiameter / 2 + mShadowRadius),
+                    mShadowPaint);
+            canvas.drawCircle(viewWidth / 2, viewHeight / 2, (mCircleDiameter / 2), paint);
+        }
+    }
+}
\ No newline at end of file
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/edge/EdgePair.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/edge/EdgePair.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/edge/EdgePair.java	(revision )
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.cropwindow.edge;
+
+/**
+ * Simple class to hold a pair of Edges.
+ */
+public class EdgePair {
+
+    // Member Variables ////////////////////////////////////////////////////////
+
+    public Edge primary;
+    public Edge secondary;
+
+    // Constructor /////////////////////////////////////////////////////////////
+
+    public EdgePair(Edge edge1, Edge edge2) {
+        primary = edge1;
+        secondary = edge2;
+    }
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/util/AspectRatioUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/util/AspectRatioUtil.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/util/AspectRatioUtil.java	(revision )
@@ -0,0 +1,108 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.util;
+
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+/**
+ * Utility class for handling calculations involving a fixed aspect ratio.
+ */
+public class AspectRatioUtil {
+
+    /**
+     * Calculates the aspect ratio given a rectangle.
+     */
+    public static float calculateAspectRatio(float left, float top, float right, float bottom) {
+        final float width = right - left;
+        final float height = bottom - top;
+        return width / height;
+    }
+
+    /**
+     * Calculates the aspect ratio given a rectangle.
+     */
+    public static float calculateAspectRatio(@NonNull RectF rect) {
+        return rect.width() / rect.height();
+    }
+
+    /**
+     * Calculates the x-coordinate of the left edge given the other sides of the rectangle and an
+     * aspect ratio.
+     */
+    public static float calculateLeft(float top, float right, float bottom, float targetAspectRatio) {
+
+        final float height = bottom - top;
+        // targetAspectRatio = width / height
+        // width = targetAspectRatio * height
+        // right - left = targetAspectRatio * height
+        return right - (targetAspectRatio * height);
+    }
+
+    /**
+     * Calculates the y-coordinate of the top edge given the other sides of the rectangle and an
+     * aspect ratio.
+     */
+    public static float calculateTop(float left, float right, float bottom, float targetAspectRatio) {
+
+        final float width = right - left;
+        // targetAspectRatio = width / height
+        // width = targetAspectRatio * height
+        // height = width / targetAspectRatio
+        // bottom - top = width / targetAspectRatio
+        return bottom - (width / targetAspectRatio);
+    }
+
+    /**
+     * Calculates the x-coordinate of the right edge given the other sides of the rectangle and an
+     * aspect ratio.
+     */
+    public static float calculateRight(float left, float top, float bottom, float targetAspectRatio) {
+
+        final float height = bottom - top;
+        // targetAspectRatio = width / height
+        // width = targetAspectRatio * height
+        // right - left = targetAspectRatio * height
+        return (targetAspectRatio * height) + left;
+    }
+
+    /**
+     * Calculates the y-coordinate of the bottom edge given the other sides of the rectangle and an
+     * aspect ratio.
+     */
+    public static float calculateBottom(float left, float top, float right, float targetAspectRatio) {
+
+        final float width = right - left;
+        // targetAspectRatio = width / height
+        // width = targetAspectRatio * height
+        // height = width / targetAspectRatio
+        // bottom - top = width / targetAspectRatio
+        return (width / targetAspectRatio) + top;
+    }
+
+    /**
+     * Calculates the width of a rectangle given the top and bottom edges and an aspect ratio.
+     */
+    public static float calculateWidth(float height, float targetAspectRatio) {
+        return targetAspectRatio * height;
+    }
+
+    /**
+     * Calculates the height of a rectangle given the left and right edges and an aspect ratio.
+     */
+    public static float calculateHeight(float width, float targetAspectRatio) {
+        return width / targetAspectRatio;
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_top.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="-100%p"
+    android:toYDelta="0" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_in_from_top.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/generated/source/r/debug/com/handmark/pulltorefresh/library/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/generated/source/r/debug/com/handmark/pulltorefresh/library/R.java	(revision )
+++ PullToRefreshLibrary/build/generated/source/r/debug/com/handmark/pulltorefresh/library/R.java	(revision )
@@ -0,0 +1,453 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+
+package com.handmark.pulltorefresh.library;
+
+public final class R {
+    public static final class anim {
+        public static int slide_in_from_bottom=0x7f040000;
+        public static int slide_in_from_top=0x7f040001;
+        public static int slide_out_to_bottom=0x7f040002;
+        public static int slide_out_to_top=0x7f040003;
+    }
+    public static final class attr {
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrAdapterViewBackground=0x7f010010;
+        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>rotate</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>flip</code></td><td>0x1</td><td></td></tr>
+</table>
+         */
+        public static int ptrAnimationStyle=0x7f01000c;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawable=0x7f010006;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableBottom=0x7f010012;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableEnd=0x7f010008;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableStart=0x7f010007;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableTop=0x7f010011;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrHeaderBackground=0x7f010001;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrHeaderSubTextColor=0x7f010003;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrHeaderTextAppearance=0x7f01000a;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrHeaderTextColor=0x7f010002;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrListViewExtrasEnabled=0x7f01000e;
+        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>disabled</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>pullFromStart</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullFromEnd</code></td><td>0x2</td><td></td></tr>
+<tr><td><code>both</code></td><td>0x3</td><td></td></tr>
+<tr><td><code>manualOnly</code></td><td>0x4</td><td></td></tr>
+<tr><td><code>pullDownFromTop</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullUpFromBottom</code></td><td>0x2</td><td></td></tr>
+</table>
+         */
+        public static int ptrMode=0x7f010004;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrOverScroll=0x7f010009;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrRefreshableViewBackground=0x7f010000;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrRotateDrawableWhilePulling=0x7f01000f;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrScrollingWhileRefreshingEnabled=0x7f01000d;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrShowIndicator=0x7f010005;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrSubHeaderTextAppearance=0x7f01000b;
+    }
+    public static final class dimen {
+        public static int header_footer_left_right_padding=0x7f060000;
+        public static int header_footer_top_bottom_padding=0x7f060001;
+        public static int indicator_corner_radius=0x7f060002;
+        public static int indicator_internal_padding=0x7f060003;
+        public static int indicator_right_padding=0x7f060004;
+    }
+    public static final class drawable {
+        public static int default_ptr_flip=0x7f020000;
+        public static int default_ptr_rotate=0x7f020001;
+        public static int indicator_arrow=0x7f020002;
+        public static int indicator_bg_bottom=0x7f020003;
+        public static int indicator_bg_top=0x7f020004;
+    }
+    public static final class id {
+        public static int both=0x7f070003;
+        public static int disabled=0x7f070004;
+        public static int fl_inner=0x7f07000c;
+        public static int flip=0x7f07000a;
+        public static int gridview=0x7f070000;
+        public static int manualOnly=0x7f070005;
+        public static int pullDownFromTop=0x7f070006;
+        public static int pullFromEnd=0x7f070007;
+        public static int pullFromStart=0x7f070008;
+        public static int pullUpFromBottom=0x7f070009;
+        public static int pull_to_refresh_image=0x7f07000d;
+        public static int pull_to_refresh_progress=0x7f07000e;
+        public static int pull_to_refresh_sub_text=0x7f070010;
+        public static int pull_to_refresh_text=0x7f07000f;
+        public static int rotate=0x7f07000b;
+        public static int scrollview=0x7f070001;
+        public static int webview=0x7f070002;
+    }
+    public static final class layout {
+        public static int pull_to_refresh_header_horizontal=0x7f030000;
+        public static int pull_to_refresh_header_vertical=0x7f030001;
+    }
+    public static final class string {
+        public static int pull_to_refresh_from_bottom_pull_label=0x7f050003;
+        public static int pull_to_refresh_from_bottom_refreshing_label=0x7f050004;
+        public static int pull_to_refresh_from_bottom_release_label=0x7f050005;
+        public static int pull_to_refresh_pull_label=0x7f050000;
+        public static int pull_to_refresh_refreshing_label=0x7f050001;
+        public static int pull_to_refresh_release_label=0x7f050002;
+    }
+    public static final class styleable {
+        /** Attributes that can be used with a PullToRefresh.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrAdapterViewBackground com.handmark.pulltorefresh.library:ptrAdapterViewBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrAnimationStyle com.handmark.pulltorefresh.library:ptrAnimationStyle}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawable com.handmark.pulltorefresh.library:ptrDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableBottom com.handmark.pulltorefresh.library:ptrDrawableBottom}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableEnd com.handmark.pulltorefresh.library:ptrDrawableEnd}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableStart com.handmark.pulltorefresh.library:ptrDrawableStart}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableTop com.handmark.pulltorefresh.library:ptrDrawableTop}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderBackground com.handmark.pulltorefresh.library:ptrHeaderBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderSubTextColor com.handmark.pulltorefresh.library:ptrHeaderSubTextColor}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderTextAppearance com.handmark.pulltorefresh.library:ptrHeaderTextAppearance}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderTextColor com.handmark.pulltorefresh.library:ptrHeaderTextColor}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrListViewExtrasEnabled com.handmark.pulltorefresh.library:ptrListViewExtrasEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrMode com.handmark.pulltorefresh.library:ptrMode}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrOverScroll com.handmark.pulltorefresh.library:ptrOverScroll}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrRefreshableViewBackground com.handmark.pulltorefresh.library:ptrRefreshableViewBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrRotateDrawableWhilePulling com.handmark.pulltorefresh.library:ptrRotateDrawableWhilePulling}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrScrollingWhileRefreshingEnabled com.handmark.pulltorefresh.library:ptrScrollingWhileRefreshingEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrShowIndicator com.handmark.pulltorefresh.library:ptrShowIndicator}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrSubHeaderTextAppearance com.handmark.pulltorefresh.library:ptrSubHeaderTextAppearance}</code></td><td></td></tr>
+           </table>
+           @see #PullToRefresh_ptrAdapterViewBackground
+           @see #PullToRefresh_ptrAnimationStyle
+           @see #PullToRefresh_ptrDrawable
+           @see #PullToRefresh_ptrDrawableBottom
+           @see #PullToRefresh_ptrDrawableEnd
+           @see #PullToRefresh_ptrDrawableStart
+           @see #PullToRefresh_ptrDrawableTop
+           @see #PullToRefresh_ptrHeaderBackground
+           @see #PullToRefresh_ptrHeaderSubTextColor
+           @see #PullToRefresh_ptrHeaderTextAppearance
+           @see #PullToRefresh_ptrHeaderTextColor
+           @see #PullToRefresh_ptrListViewExtrasEnabled
+           @see #PullToRefresh_ptrMode
+           @see #PullToRefresh_ptrOverScroll
+           @see #PullToRefresh_ptrRefreshableViewBackground
+           @see #PullToRefresh_ptrRotateDrawableWhilePulling
+           @see #PullToRefresh_ptrScrollingWhileRefreshingEnabled
+           @see #PullToRefresh_ptrShowIndicator
+           @see #PullToRefresh_ptrSubHeaderTextAppearance
+         */
+        public static final int[] PullToRefresh = {
+            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
+            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
+            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
+            0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f,
+            0x7f010010, 0x7f010011, 0x7f010012
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrAdapterViewBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrAdapterViewBackground
+        */
+        public static int PullToRefresh_ptrAdapterViewBackground = 16;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrAnimationStyle}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>rotate</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>flip</code></td><td>0x1</td><td></td></tr>
+</table>
+          @attr name com.handmark.pulltorefresh.library:ptrAnimationStyle
+        */
+        public static int PullToRefresh_ptrAnimationStyle = 12;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawable}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawable
+        */
+        public static int PullToRefresh_ptrDrawable = 6;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableBottom}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableBottom
+        */
+        public static int PullToRefresh_ptrDrawableBottom = 18;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableEnd}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableEnd
+        */
+        public static int PullToRefresh_ptrDrawableEnd = 8;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableStart}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableStart
+        */
+        public static int PullToRefresh_ptrDrawableStart = 7;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableTop}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableTop
+        */
+        public static int PullToRefresh_ptrDrawableTop = 17;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderBackground
+        */
+        public static int PullToRefresh_ptrHeaderBackground = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderSubTextColor}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderSubTextColor
+        */
+        public static int PullToRefresh_ptrHeaderSubTextColor = 3;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderTextAppearance}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderTextAppearance
+        */
+        public static int PullToRefresh_ptrHeaderTextAppearance = 10;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderTextColor}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderTextColor
+        */
+        public static int PullToRefresh_ptrHeaderTextColor = 2;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrListViewExtrasEnabled}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrListViewExtrasEnabled
+        */
+        public static int PullToRefresh_ptrListViewExtrasEnabled = 14;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrMode}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>disabled</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>pullFromStart</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullFromEnd</code></td><td>0x2</td><td></td></tr>
+<tr><td><code>both</code></td><td>0x3</td><td></td></tr>
+<tr><td><code>manualOnly</code></td><td>0x4</td><td></td></tr>
+<tr><td><code>pullDownFromTop</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullUpFromBottom</code></td><td>0x2</td><td></td></tr>
+</table>
+          @attr name com.handmark.pulltorefresh.library:ptrMode
+        */
+        public static int PullToRefresh_ptrMode = 4;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrOverScroll}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrOverScroll
+        */
+        public static int PullToRefresh_ptrOverScroll = 9;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrRefreshableViewBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrRefreshableViewBackground
+        */
+        public static int PullToRefresh_ptrRefreshableViewBackground = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrRotateDrawableWhilePulling}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrRotateDrawableWhilePulling
+        */
+        public static int PullToRefresh_ptrRotateDrawableWhilePulling = 15;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrScrollingWhileRefreshingEnabled}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrScrollingWhileRefreshingEnabled
+        */
+        public static int PullToRefresh_ptrScrollingWhileRefreshingEnabled = 13;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrShowIndicator}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrShowIndicator
+        */
+        public static int PullToRefresh_ptrShowIndicator = 5;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrSubHeaderTextAppearance}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrSubHeaderTextAppearance
+        */
+        public static int PullToRefresh_ptrSubHeaderTextAppearance = 11;
+    };
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/drawable/indicator_bg_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/drawable/indicator_bg_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/drawable/indicator_bg_top.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="@dimen/indicator_corner_radius"
+        android:bottomRightRadius="@dimen/indicator_corner_radius"
+        android:radius="1dp"
+        android:topLeftRadius="0dp"
+        android:topRightRadius="0dp" />
+
+</shape><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/drawable/indicator_bg_top.xml -->
\ No newline at end of file
Index: app/src/main/java/zhu/com/sortingdata/widget/CustomBar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/widget/CustomBar.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/widget/CustomBar.java	(revision )
@@ -0,0 +1,112 @@
+package zhu.com.sortingdata.widget;
+
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import zhu.com.sortingdata.R;
+
+
+public class CustomBar extends LinearLayout implements OnClickListener {
+	private Context context;
+	private View View;
+	private LayoutInflater inflater;
+	private LinearLayout layout;
+	//选中的功能
+	private int index = 0;
+	//默认背景图片
+	private int mImageViews[] = null ;
+	//选中时背景图片
+	private int selectViews[] = null ;
+	//选中是的接口
+	SelectListener mlistener;
+
+	public CustomBar(Context context) {
+		super(context, null);
+	}
+
+	public CustomBar(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		this.context = context;
+
+	}
+
+	private void initView() {
+		inflater = LayoutInflater.from(context);
+		View = inflater.inflate(R.layout.custom_bar, null);
+		layout = (LinearLayout) View.findViewById(R.id.custom_bar_layout);
+		LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
+		layout.setLayoutParams(params);
+		//循环设置监听
+		for (int i = 0; i < layout.getChildCount(); i++) {
+			layout.getChildAt(i).setOnClickListener(this);
+		}
+		setChange(0);
+	}
+
+	/**
+	 * 设置显示背景图片和选中图片
+	 */
+	public void setImageViewBg(int imgs[] , int selectImgs[]){
+		this.mImageViews = imgs ;
+		this.selectViews = selectImgs ;
+		initView();
+		addView(View);
+	}
+
+	//改变背景图片和字体颜色(表示选中)
+	public void setChange(int i) {
+		LinearLayout linearLayout;
+		ImageView imageView;
+		TextView textView;
+		for (int j = 0; j < layout.getChildCount(); j++) {
+			linearLayout = (LinearLayout) layout.getChildAt(j);
+			imageView = (ImageView) linearLayout.getChildAt(0);
+			textView = (TextView) linearLayout.getChildAt(1);
+			if (j == i) {
+				imageView.setImageResource(selectViews[i]);
+				textView.setTextColor(getResources().getColor(R.color.red));
+			} else {
+				imageView.setImageResource(mImageViews[i]);
+				textView.setTextColor(getResources().getColor(R.color.white));
+			}
+		}
+	}
+
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+			case R.id.custom_bar_home:
+				index = 0;
+				break;
+			case R.id.custom_bar_antenna:
+				index = 1;
+				break;
+			case R.id.custom_bar_stting:
+				index = 2;
+				break;
+		}
+		setChange(index);
+		//接口触发
+		if (mlistener != null) {
+			mlistener.getOnclick(index);
+		}
+
+	}
+	//接口调用
+	public void setSelectListener(SelectListener mlistener) {
+		this.mlistener = mlistener;
+	}
+	//初始化接口
+	public interface SelectListener {
+		void getOnclick(int i);
+	}
+
+
+}
Index: app/src/main/java/zhu/com/sortingdata/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/MainActivity.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/MainActivity.java	(revision )
@@ -0,0 +1,153 @@
+package zhu.com.sortingdata;
+
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.view.ViewPager;
+import android.support.v4.view.ViewPager.OnPageChangeListener;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
+import com.jeremyfeinstein.slidingmenu.lib.app.SlidingFragmentActivity;
+
+import java.util.ArrayList;
+
+import zhu.com.sortingdata.adapter.MyFragmentPagerAdapter;
+import zhu.com.sortingdata.fragment.FragmentLeftMenu;
+import zhu.com.sortingdata.fragment.FragmentTab01;
+import zhu.com.sortingdata.fragment.FragmentTab02;
+import zhu.com.sortingdata.fragment.FragmentTab03;
+import zhu.com.sortingdata.widget.CustomBar;
+
+public class MainActivity extends SlidingFragmentActivity implements OnPageChangeListener, CustomBar.SelectListener {
+
+    private ViewPager pager;
+    private CustomBar bar;
+    // 默认背景图片
+    private int imgs[] = {R.drawable.icon_bar, R.drawable.icon_bar, R.drawable.icon_bar};
+    // 选中时背景图片
+    private int selectImgs[] = {R.drawable.icon_bar_select_01, R.drawable.icon_bar_select_02, R.drawable.icon_bar_select_03};
+    // 所有fragment集合
+    private ArrayList<Fragment> fragments;
+    // 第一页的fragment
+    private FragmentTab01 tab01;
+    private FragmentTab02 tab02;
+    private FragmentTab03 tab03;
+    // 滑出菜单
+    private SlidingMenu mSlidingMenu;
+    // 侧边栏按钮
+    private Button bt_menu;
+    private FragmentLeftMenu leftMenu;
+    TextView textView1, textView2, textView3;
+    Button bt_menu_show;
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        initView();
+        initClick();
+        setSlidingMenu();
+
+    }
+
+    /**
+     * 设置一个左边划出菜单
+     */
+    private void setSlidingMenu() {
+
+        leftMenu = new FragmentLeftMenu();
+        setBehindContentView(R.layout.layout_left_nemu);
+        getSupportFragmentManager().beginTransaction().replace(R.id.ll_left_menu, leftMenu).commit();
+
+        mSlidingMenu = getSlidingMenu();
+        mSlidingMenu.setMode(SlidingMenu.LEFT);//设置左滑菜单
+        mSlidingMenu.setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);//设置滑动的屏幕范围，该设置为全屏区域都可以滑动
+        mSlidingMenu.setShadowDrawable(R.mipmap.shadow);//设置阴影图片
+        mSlidingMenu.setShadowWidthRes(R.dimen.shadow_width);//设置阴影图片的宽度
+        mSlidingMenu.setBehindOffsetRes(R.dimen.slidingmenu_offset);//SlidingMenu划出时主页面显示的剩余宽度
+        mSlidingMenu.setFadeDegree(0.35f);//SlidingMenu滑动时的渐变程度
+        mSlidingMenu.setBehindWidth(400);//设置SlidingMenu菜单的宽度
+
+
+    }
+
+
+    private void initView() {
+        pager = (ViewPager) findViewById(R.id.main_viewPager);
+        bar = (CustomBar) findViewById(R.id.main_customBar);
+        // 设置选中监听
+        bar.setSelectListener(this);
+        // 设置菜单图片和选中图片
+        bar.setImageViewBg(imgs, selectImgs);
+
+        fragments = new ArrayList<Fragment>();
+        tab01 = new FragmentTab01();
+        fragments.add(tab01);
+        tab02 = new FragmentTab02();
+        fragments.add(tab02);
+        tab03 = new FragmentTab03();
+        fragments.add(tab03);
+        // 设置Adapter
+        pager.setAdapter(new MyFragmentPagerAdapter(getSupportFragmentManager(), fragments));
+        // 设置监听，主要是设置点点的背景
+        pager.setOnPageChangeListener(this);
+
+        bt_menu = (Button) findViewById(R.id.bt_menu);
+
+    }
+
+    private void initClick() {
+        bt_menu.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                mSlidingMenu.showMenu();
+            }
+        });
+    }
+
+    public void menuOrContent(int i) {
+        bar.setChange(i);
+        pager.setCurrentItem(i, false);
+        mSlidingMenu.showContent();
+    }
+
+    @Override
+    public void onPageScrollStateChanged(int arg0) {
+
+    }
+
+    @Override
+    public void onPageScrolled(int arg0, float arg1, int arg2) {
+        // TODO Auto-generated method stub
+
+    }
+
+    @Override
+    public void onPageSelected(int arg0) {
+        // 改变底部状态栏背景和字体颜色
+        bar.setChange(arg0);
+    }
+
+    @Override
+    public void getOnclick(int i) {
+        // 选中状态栏中的功能键切换viewpager的页面
+        pager.setCurrentItem(i, false);
+    }
+
+
+    @Override
+    public void onStart() {
+        super.onStart();
+
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+
+    }
+}
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java	(revision )
@@ -0,0 +1,147 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.internal;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Matrix;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.Animation.AnimationListener;
+import android.view.animation.AnimationUtils;
+import android.view.animation.Interpolator;
+import android.view.animation.LinearInterpolator;
+import android.view.animation.RotateAnimation;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.ImageView.ScaleType;
+
+import com.handmark.pulltorefresh.library.PullToRefreshBase;
+import com.handmark.pulltorefresh.library.R;
+
+@SuppressLint("ViewConstructor")
+public class IndicatorLayout extends FrameLayout implements AnimationListener {
+
+	static final int DEFAULT_ROTATION_ANIMATION_DURATION = 150;
+
+	private Animation mInAnim, mOutAnim;
+	private ImageView mArrowImageView;
+
+	private final Animation mRotateAnimation, mResetRotateAnimation;
+
+	public IndicatorLayout(Context context, PullToRefreshBase.Mode mode) {
+		super(context);
+		mArrowImageView = new ImageView(context);
+
+		Drawable arrowD = getResources().getDrawable(R.drawable.indicator_arrow);
+		mArrowImageView.setImageDrawable(arrowD);
+
+		final int padding = getResources().getDimensionPixelSize(R.dimen.indicator_internal_padding);
+		mArrowImageView.setPadding(padding, padding, padding, padding);
+		addView(mArrowImageView);
+
+		int inAnimResId, outAnimResId;
+		switch (mode) {
+			case PULL_FROM_END:
+				inAnimResId = R.anim.slide_in_from_bottom;
+				outAnimResId = R.anim.slide_out_to_bottom;
+				setBackgroundResource(R.drawable.indicator_bg_bottom);
+
+				// Rotate Arrow so it's pointing the correct way
+				mArrowImageView.setScaleType(ScaleType.MATRIX);
+				Matrix matrix = new Matrix();
+				matrix.setRotate(180f, arrowD.getIntrinsicWidth() / 2f, arrowD.getIntrinsicHeight() / 2f);
+				mArrowImageView.setImageMatrix(matrix);
+				break;
+			default:
+			case PULL_FROM_START:
+				inAnimResId = R.anim.slide_in_from_top;
+				outAnimResId = R.anim.slide_out_to_top;
+				setBackgroundResource(R.drawable.indicator_bg_top);
+				break;
+		}
+
+		mInAnim = AnimationUtils.loadAnimation(context, inAnimResId);
+		mInAnim.setAnimationListener(this);
+
+		mOutAnim = AnimationUtils.loadAnimation(context, outAnimResId);
+		mOutAnim.setAnimationListener(this);
+
+		final Interpolator interpolator = new LinearInterpolator();
+		mRotateAnimation = new RotateAnimation(0, -180, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,
+				0.5f);
+		mRotateAnimation.setInterpolator(interpolator);
+		mRotateAnimation.setDuration(DEFAULT_ROTATION_ANIMATION_DURATION);
+		mRotateAnimation.setFillAfter(true);
+
+		mResetRotateAnimation = new RotateAnimation(-180, 0, Animation.RELATIVE_TO_SELF, 0.5f,
+				Animation.RELATIVE_TO_SELF, 0.5f);
+		mResetRotateAnimation.setInterpolator(interpolator);
+		mResetRotateAnimation.setDuration(DEFAULT_ROTATION_ANIMATION_DURATION);
+		mResetRotateAnimation.setFillAfter(true);
+
+	}
+
+	public final boolean isVisible() {
+		Animation currentAnim = getAnimation();
+		if (null != currentAnim) {
+			return mInAnim == currentAnim;
+		}
+
+		return getVisibility() == View.VISIBLE;
+	}
+
+	public void hide() {
+		startAnimation(mOutAnim);
+	}
+
+	public void show() {
+		mArrowImageView.clearAnimation();
+		startAnimation(mInAnim);
+	}
+
+	@Override
+	public void onAnimationEnd(Animation animation) {
+		if (animation == mOutAnim) {
+			mArrowImageView.clearAnimation();
+			setVisibility(View.GONE);
+		} else if (animation == mInAnim) {
+			setVisibility(View.VISIBLE);
+		}
+
+		clearAnimation();
+	}
+
+	@Override
+	public void onAnimationRepeat(Animation animation) {
+		// NO-OP
+	}
+
+	@Override
+	public void onAnimationStart(Animation animation) {
+		setVisibility(View.VISIBLE);
+	}
+
+	public void releaseToRefresh() {
+		mArrowImageView.startAnimation(mRotateAnimation);
+	}
+
+	public void pullToRefresh() {
+		mArrowImageView.startAnimation(mResetRotateAnimation);
+	}
+
+}
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingPreferenceActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingPreferenceActivity.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingPreferenceActivity.java	(revision )
@@ -0,0 +1,151 @@
+package com.jeremyfeinstein.slidingmenu.lib.app;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
+
+import android.os.Bundle;
+import android.preference.PreferenceActivity;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+
+public class SlidingPreferenceActivity extends PreferenceActivity implements SlidingActivityBase {
+
+	private SlidingActivityHelper mHelper;
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		mHelper = new SlidingActivityHelper(this);
+		super.onCreate(savedInstanceState);
+		mHelper.onCreate(savedInstanceState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onPostCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onPostCreate(Bundle savedInstanceState) {
+		super.onPostCreate(savedInstanceState);
+		mHelper.onPostCreate(savedInstanceState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#findViewById(int)
+	 */
+	@Override
+	public View findViewById(int id) {
+		View v = super.findViewById(id);
+		if (v != null)
+			return v;
+		return mHelper.findViewById(id);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)
+	 */
+	@Override
+	protected void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		mHelper.onSaveInstanceState(outState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(int)
+	 */
+	@Override
+	public void setContentView(int id) {
+		setContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View)
+	 */
+	@Override
+	public void setContentView(View v) {
+		setContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	@Override
+	public void setContentView(View v, LayoutParams params) {
+		super.setContentView(v, params);
+		mHelper.registerAboveContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(int)
+	 */
+	public void setBehindContentView(int id) {
+		setBehindContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View)
+	 */
+	public void setBehindContentView(View v) {
+		setBehindContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	public void setBehindContentView(View v, LayoutParams params) {
+		mHelper.setBehindContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#getSlidingMenu()
+	 */
+	public SlidingMenu getSlidingMenu() {
+		return mHelper.getSlidingMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#toggle()
+	 */
+	public void toggle() {
+		mHelper.toggle();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showAbove()
+	 */
+	public void showContent() {
+		mHelper.showContent();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showBehind()
+	 */
+	public void showMenu() {
+		mHelper.showMenu();
+	}
+	
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showSecondaryMenu()
+	 */
+	public void showSecondaryMenu() {
+		mHelper.showSecondaryMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setSlidingActionBarEnabled(boolean)
+	 */
+	public void setSlidingActionBarEnabled(boolean b) {
+		mHelper.setSlidingActionBarEnabled(b);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onKeyUp(int, android.view.KeyEvent)
+	 */
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		boolean b = mHelper.onKeyUp(keyCode, event);
+		if (b) return b;
+		return super.onKeyUp(keyCode, event);
+	}
+}
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/proguard-rules.pro	(revision )
+++ app/proguard-rules.pro	(revision )
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in F:\ZZT\Tools\AndroidStudio\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
Index: app/src/main/res/menu/menu_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/menu_main.xml	(revision )
+++ app/src/main/res/menu/menu_main.xml	(revision )
@@ -0,0 +1,10 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:context="zhu.com.sortingdata.MainActivity">
+    <item
+        android:id="@+id/action_settings"
+        android:orderInCategory="100"
+        android:title="@string/action_settings"
+        app:showAsAction="never" />
+</menu>
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/util/PtrCLog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/util/PtrCLog.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/util/PtrCLog.java	(revision )
@@ -0,0 +1,292 @@
+package in.srain.cube.views.ptr.util;
+
+import android.util.Log;
+
+/**
+ * An encapsulation of {@link Log}, enable log level and print log with parameters.
+ *
+ * @author http://www.liaohuqiu.net/
+ */
+public class PtrCLog {
+
+    public static final int LEVEL_VERBOSE = 0;
+    public static final int LEVEL_DEBUG = 1;
+    public static final int LEVEL_INFO = 2;
+    public static final int LEVEL_WARNING = 3;
+    public static final int LEVEL_ERROR = 4;
+    public static final int LEVEL_FATAL = 5;
+
+    private static int sLevel = LEVEL_VERBOSE;
+
+    /**
+     * set log level, the level lower than this level will not be logged
+     *
+     * @param level
+     */
+    public static void setLogLevel(int level) {
+        sLevel = level;
+    }
+
+    /**
+     * Send a VERBOSE log message.
+     *
+     * @param tag
+     * @param msg
+     */
+    public static void v(String tag, String msg) {
+        if (sLevel > LEVEL_VERBOSE) {
+            return;
+        }
+        Log.v(tag, msg);
+    }
+
+    /**
+     * Send a VERBOSE log message.
+     *
+     * @param tag
+     * @param msg
+     * @param throwable
+     */
+    public static void v(String tag, String msg, Throwable throwable) {
+        if (sLevel > LEVEL_VERBOSE) {
+            return;
+        }
+        Log.v(tag, msg, throwable);
+    }
+
+    /**
+     * Send a VERBOSE log message.
+     *
+     * @param tag
+     * @param msg
+     * @param args
+     */
+    public static void v(String tag, String msg, Object... args) {
+        if (sLevel > LEVEL_VERBOSE) {
+            return;
+        }
+        if (args.length > 0) {
+            msg = String.format(msg, args);
+        }
+        Log.v(tag, msg);
+    }
+
+    /**
+     * Send a DEBUG log message
+     *
+     * @param tag
+     * @param msg
+     */
+    public static void d(String tag, String msg) {
+        if (sLevel > LEVEL_DEBUG) {
+            return;
+        }
+        Log.d(tag, msg);
+    }
+
+    /**
+     * Send a DEBUG log message
+     *
+     * @param tag
+     * @param msg
+     * @param args
+     */
+    public static void d(String tag, String msg, Object... args) {
+        if (sLevel > LEVEL_DEBUG) {
+            return;
+        }
+        if (args.length > 0) {
+            msg = String.format(msg, args);
+        }
+        Log.d(tag, msg);
+    }
+
+    /**
+     * Send a DEBUG log message
+     *
+     * @param tag
+     * @param msg
+     * @param throwable
+     */
+    public static void d(String tag, String msg, Throwable throwable) {
+        if (sLevel > LEVEL_DEBUG) {
+            return;
+        }
+        Log.d(tag, msg, throwable);
+    }
+
+    /**
+     * Send an INFO log message
+     *
+     * @param tag
+     * @param msg
+     */
+    public static void i(String tag, String msg) {
+        if (sLevel > LEVEL_INFO) {
+            return;
+        }
+        Log.i(tag, msg);
+    }
+
+    /**
+     * Send an INFO log message
+     *
+     * @param tag
+     * @param msg
+     * @param args
+     */
+    public static void i(String tag, String msg, Object... args) {
+        if (sLevel > LEVEL_INFO) {
+            return;
+        }
+        if (args.length > 0) {
+            msg = String.format(msg, args);
+        }
+        Log.i(tag, msg);
+    }
+
+    /**
+     * Send an INFO log message
+     *
+     * @param tag
+     * @param msg
+     */
+    public static void i(String tag, String msg, Throwable throwable) {
+        if (sLevel > LEVEL_INFO) {
+            return;
+        }
+        Log.i(tag, msg, throwable);
+    }
+
+    /**
+     * Send a WARNING log message
+     *
+     * @param tag
+     * @param msg
+     */
+    public static void w(String tag, String msg) {
+        if (sLevel > LEVEL_WARNING) {
+            return;
+        }
+        Log.w(tag, msg);
+    }
+
+    /**
+     * Send a WARNING log message
+     *
+     * @param tag
+     * @param msg
+     * @param args
+     */
+    public static void w(String tag, String msg, Object... args) {
+        if (sLevel > LEVEL_WARNING) {
+            return;
+        }
+        if (args.length > 0) {
+            msg = String.format(msg, args);
+        }
+        Log.w(tag, msg);
+    }
+
+    /**
+     * Send a WARNING log message
+     *
+     * @param tag
+     * @param msg
+     * @param throwable
+     */
+    public static void w(String tag, String msg, Throwable throwable) {
+        if (sLevel > LEVEL_WARNING) {
+            return;
+        }
+        Log.w(tag, msg, throwable);
+    }
+
+    /**
+     * Send an ERROR log message
+     *
+     * @param tag
+     * @param msg
+     */
+    public static void e(String tag, String msg) {
+        if (sLevel > LEVEL_ERROR) {
+            return;
+        }
+        Log.e(tag, msg);
+    }
+
+    /**
+     * Send an ERROR log message
+     *
+     * @param tag
+     * @param msg
+     * @param args
+     */
+    public static void e(String tag, String msg, Object... args) {
+        if (sLevel > LEVEL_ERROR) {
+            return;
+        }
+        if (args.length > 0) {
+            msg = String.format(msg, args);
+        }
+        Log.e(tag, msg);
+    }
+
+    /**
+     * Send an ERROR log message
+     *
+     * @param tag
+     * @param msg
+     * @param throwable
+     */
+    public static void e(String tag, String msg, Throwable throwable) {
+        if (sLevel > LEVEL_ERROR) {
+            return;
+        }
+        Log.e(tag, msg, throwable);
+    }
+
+    /**
+     * Send a FATAL ERROR log message
+     *
+     * @param tag
+     * @param msg
+     */
+    public static void f(String tag, String msg) {
+        if (sLevel > LEVEL_FATAL) {
+            return;
+        }
+        Log.wtf(tag, msg);
+    }
+
+    /**
+     * Send a FATAL ERROR log message
+     *
+     * @param tag
+     * @param msg
+     * @param args
+     */
+    public static void f(String tag, String msg, Object... args) {
+        if (sLevel > LEVEL_FATAL) {
+            return;
+        }
+        if (args.length > 0) {
+            msg = String.format(msg, args);
+        }
+        Log.wtf(tag, msg);
+    }
+
+    /**
+     * Send a FATAL ERROR log message
+     *
+     * @param tag
+     * @param msg
+     * @param throwable
+     */
+    public static void f(String tag, String msg, Throwable throwable) {
+        if (sLevel > LEVEL_FATAL) {
+            return;
+        }
+        Log.wtf(tag, msg, throwable);
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-es/values-es.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-es/values-es.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-es/values-es.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-es/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tirar para actualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">Cargando…</string>
+    <string name="pull_to_refresh_release_label">Soltar para actualizar…</string>
+</resources>
\ No newline at end of file
Index: cropperimagelibrary/src/test/java/com/edmodo/cropper/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/test/java/com/edmodo/cropper/ExampleUnitTest.java	(revision )
+++ cropperimagelibrary/src/test/java/com/edmodo/cropper/ExampleUnitTest.java	(revision )
@@ -0,0 +1,17 @@
+package com.edmodo.cropper;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshWebView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshWebView.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshWebView.java	(revision )
@@ -0,0 +1,165 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.FloatMath;
+import android.webkit.WebChromeClient;
+import android.webkit.WebView;
+
+public class PullToRefreshWebView extends PullToRefreshBase<WebView> {
+
+	private static final OnRefreshListener<WebView> defaultOnRefreshListener = new OnRefreshListener<WebView>() {
+
+		@Override
+		public void onRefresh(PullToRefreshBase<WebView> refreshView) {
+			refreshView.getRefreshableView().reload();
+		}
+
+	};
+
+	private final WebChromeClient defaultWebChromeClient = new WebChromeClient() {
+
+		@Override
+		public void onProgressChanged(WebView view, int newProgress) {
+			if (newProgress == 100) {
+				onRefreshComplete();
+			}
+		}
+
+	};
+
+	public PullToRefreshWebView(Context context) {
+		super(context);
+
+		/**
+		 * Added so that by default, Pull-to-Refresh refreshes the page
+		 */
+		setOnRefreshListener(defaultOnRefreshListener);
+		mRefreshableView.setWebChromeClient(defaultWebChromeClient);
+	}
+
+	public PullToRefreshWebView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+
+		/**
+		 * Added so that by default, Pull-to-Refresh refreshes the page
+		 */
+		setOnRefreshListener(defaultOnRefreshListener);
+		mRefreshableView.setWebChromeClient(defaultWebChromeClient);
+	}
+
+	public PullToRefreshWebView(Context context, Mode mode) {
+		super(context, mode);
+
+		/**
+		 * Added so that by default, Pull-to-Refresh refreshes the page
+		 */
+		setOnRefreshListener(defaultOnRefreshListener);
+		mRefreshableView.setWebChromeClient(defaultWebChromeClient);
+	}
+
+	public PullToRefreshWebView(Context context, Mode mode, AnimationStyle style) {
+		super(context, mode, style);
+
+		/**
+		 * Added so that by default, Pull-to-Refresh refreshes the page
+		 */
+		setOnRefreshListener(defaultOnRefreshListener);
+		mRefreshableView.setWebChromeClient(defaultWebChromeClient);
+	}
+
+	@Override
+	public final Orientation getPullToRefreshScrollDirection() {
+		return Orientation.VERTICAL;
+	}
+
+	@Override
+	protected WebView createRefreshableView(Context context, AttributeSet attrs) {
+		WebView webView;
+		if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {
+			webView = new InternalWebViewSDK9(context, attrs);
+		} else {
+			webView = new WebView(context, attrs);
+		}
+
+		webView.setId(R.id.webview);
+		return webView;
+	}
+
+	@Override
+	protected boolean isReadyForPullStart() {
+		return mRefreshableView.getScrollY() == 0;
+	}
+
+	@Override
+	protected boolean isReadyForPullEnd() {
+		float exactContentHeight = (float) Math.floor(mRefreshableView.getContentHeight() * mRefreshableView.getScale());
+		return mRefreshableView.getScrollY() >= (exactContentHeight - mRefreshableView.getHeight());
+	}
+
+	@Override
+	protected void onPtrRestoreInstanceState(Bundle savedInstanceState) {
+		super.onPtrRestoreInstanceState(savedInstanceState);
+		mRefreshableView.restoreState(savedInstanceState);
+	}
+
+	@Override
+	protected void onPtrSaveInstanceState(Bundle saveState) {
+		super.onPtrSaveInstanceState(saveState);
+		mRefreshableView.saveState(saveState);
+	}
+
+	@TargetApi(9)
+	final class InternalWebViewSDK9 extends WebView {
+
+		// WebView doesn't always scroll back to it's edge so we add some
+		// fuzziness
+		static final int OVERSCROLL_FUZZY_THRESHOLD = 2;
+
+		// WebView seems quite reluctant to overscroll so we use the scale
+		// factor to scale it's value
+		static final float OVERSCROLL_SCALE_FACTOR = 1.5f;
+
+		public InternalWebViewSDK9(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
+				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
+
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
+
+			// Does all of the hard work...
+			OverscrollHelper.overScrollBy(PullToRefreshWebView.this, deltaX, scrollX, deltaY, scrollY,
+					getScrollRange(), OVERSCROLL_FUZZY_THRESHOLD, OVERSCROLL_SCALE_FACTOR, isTouchEvent);
+
+			return returnValue;
+		}
+
+		private int getScrollRange() {
+			return (int) Math.max(0, Math.floor(mRefreshableView.getContentHeight() * mRefreshableView.getScale())
+					- (getHeight() - getPaddingBottom() - getPaddingTop()));
+		}
+	}
+}
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/MenuInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/MenuInterface.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/MenuInterface.java	(revision )
@@ -0,0 +1,35 @@
+package com.jeremyfeinstein.slidingmenu.lib;
+
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+
+public interface MenuInterface {
+
+	public abstract void scrollBehindTo(int x, int y, 
+			CustomViewBehind cvb, float scrollScale);
+	
+	public abstract int getMenuLeft(CustomViewBehind cvb, View content);
+	
+	public abstract int getAbsLeftBound(CustomViewBehind cvb, View content);
+
+	public abstract int getAbsRightBound(CustomViewBehind cvb, View content);
+
+	public abstract boolean marginTouchAllowed(View content, int x, int threshold);
+	
+	public abstract boolean menuOpenTouchAllowed(View content, int currPage, int x);
+	
+	public abstract boolean menuTouchInQuickReturn(View content, int currPage, int x);
+	
+	public abstract boolean menuClosedSlideAllowed(int x);
+	
+	public abstract boolean menuOpenSlideAllowed(int x);
+	
+	public abstract void drawShadow(Canvas canvas, Drawable shadow, int width);
+	
+	public abstract void drawFade(Canvas canvas, int alpha, 
+			CustomViewBehind cvb, View content);
+	
+	public abstract void drawSelector(View content, Canvas canvas, float percentOpen);
+	
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pt-rBR/values-pt-rBR.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pt-rBR/values-pt-rBR.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pt-rBR/values-pt-rBR.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt-rBR/values-pt-rBR.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">Carregando…</string>
+    <string name="pull_to_refresh_release_label">Libere para atualizar…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/project.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/project.properties	(revision )
+++ SlidingMeunlibrary/project.properties	(revision )
@@ -0,0 +1,13 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system use,
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+
+android.library=true
+# Project target.
+target=android-16
+
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-iw/values-iw.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-iw/values-iw.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-iw/values-iw.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-iw/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+    <string name="pull_to_refresh_refreshing_label">טוען…</string>
+    <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/symbols/androidTest/debug/R.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/symbols/androidTest/debug/R.txt	(revision )
+++ SlidingMeunlibrary/build/intermediates/symbols/androidTest/debug/R.txt	(revision )
@@ -0,0 +1,37 @@
+int attr behindOffset 0x7f010003
+int attr behindScrollScale 0x7f010005
+int attr behindWidth 0x7f010004
+int attr fadeDegree 0x7f01000b
+int attr fadeEnabled 0x7f01000a
+int attr mode 0x7f010000
+int attr selectorDrawable 0x7f01000d
+int attr selectorEnabled 0x7f01000c
+int attr shadowDrawable 0x7f010008
+int attr shadowWidth 0x7f010009
+int attr touchModeAbove 0x7f010006
+int attr touchModeBehind 0x7f010007
+int attr viewAbove 0x7f010001
+int attr viewBehind 0x7f010002
+int id fullscreen 0x7f030003
+int id left 0x7f030001
+int id margin 0x7f030004
+int id none 0x7f030005
+int id right 0x7f030002
+int id selected_view 0x7f030000
+int id slidingmenumain 0x7f030006
+int layout slidingmenumain 0x7f020000
+int[] styleable SlidingMenu { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d }
+int styleable SlidingMenu_behindOffset 3
+int styleable SlidingMenu_behindScrollScale 5
+int styleable SlidingMenu_behindWidth 4
+int styleable SlidingMenu_fadeDegree 11
+int styleable SlidingMenu_fadeEnabled 10
+int styleable SlidingMenu_mode 0
+int styleable SlidingMenu_selectorDrawable 13
+int styleable SlidingMenu_selectorEnabled 12
+int styleable SlidingMenu_shadowDrawable 8
+int styleable SlidingMenu_shadowWidth 9
+int styleable SlidingMenu_touchModeAbove 6
+int styleable SlidingMenu_touchModeBehind 7
+int styleable SlidingMenu_viewAbove 1
+int styleable SlidingMenu_viewBehind 2
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/LoadingLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/LoadingLayout.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/LoadingLayout.java	(revision )
@@ -0,0 +1,393 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.internal;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.content.res.TypedArray;
+import android.graphics.Typeface;
+import android.graphics.drawable.AnimationDrawable;
+import android.graphics.drawable.Drawable;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.Interpolator;
+import android.view.animation.LinearInterpolator;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.handmark.pulltorefresh.library.ILoadingLayout;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Orientation;
+import com.handmark.pulltorefresh.library.R;
+
+@SuppressLint("ViewConstructor")
+public abstract class LoadingLayout extends FrameLayout implements ILoadingLayout {
+
+	static final String LOG_TAG = "PullToRefresh-LoadingLayout";
+
+	static final Interpolator ANIMATION_INTERPOLATOR = new LinearInterpolator();
+
+	private FrameLayout mInnerLayout;
+
+	protected final ImageView mHeaderImage;
+	protected final ProgressBar mHeaderProgress;
+
+	private boolean mUseIntrinsicAnimation;
+
+	private final TextView mHeaderText;
+	private final TextView mSubHeaderText;
+
+	protected final Mode mMode;
+	protected final Orientation mScrollDirection;
+
+	private CharSequence mPullLabel;
+	private CharSequence mRefreshingLabel;
+	private CharSequence mReleaseLabel;
+
+	public LoadingLayout(Context context, final Mode mode, final Orientation scrollDirection, TypedArray attrs) {
+		super(context);
+		mMode = mode;
+		mScrollDirection = scrollDirection;
+
+		switch (scrollDirection) {
+			case HORIZONTAL:
+				LayoutInflater.from(context).inflate(R.layout.pull_to_refresh_header_horizontal, this);
+				break;
+			case VERTICAL:
+			default:
+				LayoutInflater.from(context).inflate(R.layout.pull_to_refresh_header_vertical, this);
+				break;
+		}
+
+		mInnerLayout = (FrameLayout) findViewById(R.id.fl_inner);
+		mHeaderText = (TextView) mInnerLayout.findViewById(R.id.pull_to_refresh_text);
+		mHeaderProgress = (ProgressBar) mInnerLayout.findViewById(R.id.pull_to_refresh_progress);
+		mSubHeaderText = (TextView) mInnerLayout.findViewById(R.id.pull_to_refresh_sub_text);
+		mHeaderImage = (ImageView) mInnerLayout.findViewById(R.id.pull_to_refresh_image);
+
+		FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) mInnerLayout.getLayoutParams();
+
+		switch (mode) {
+			case PULL_FROM_END:
+				lp.gravity = scrollDirection == Orientation.VERTICAL ? Gravity.TOP : Gravity.LEFT;
+
+				// Load in labels
+				mPullLabel = context.getString(R.string.pull_to_refresh_from_bottom_pull_label);
+				mRefreshingLabel = context.getString(R.string.pull_to_refresh_from_bottom_refreshing_label);
+				mReleaseLabel = context.getString(R.string.pull_to_refresh_from_bottom_release_label);
+				break;
+
+			case PULL_FROM_START:
+			default:
+				lp.gravity = scrollDirection == Orientation.VERTICAL ? Gravity.BOTTOM : Gravity.RIGHT;
+
+				// Load in labels
+				mPullLabel = context.getString(R.string.pull_to_refresh_pull_label);
+				mRefreshingLabel = context.getString(R.string.pull_to_refresh_refreshing_label);
+				mReleaseLabel = context.getString(R.string.pull_to_refresh_release_label);
+				break;
+		}
+
+		if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderBackground)) {
+			Drawable background = attrs.getDrawable(R.styleable.PullToRefresh_ptrHeaderBackground);
+			if (null != background) {
+				ViewCompat.setBackground(this, background);
+			}
+		}
+
+		if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderTextAppearance)) {
+			TypedValue styleID = new TypedValue();
+			attrs.getValue(R.styleable.PullToRefresh_ptrHeaderTextAppearance, styleID);
+			setTextAppearance(styleID.data);
+		}
+		if (attrs.hasValue(R.styleable.PullToRefresh_ptrSubHeaderTextAppearance)) {
+			TypedValue styleID = new TypedValue();
+			attrs.getValue(R.styleable.PullToRefresh_ptrSubHeaderTextAppearance, styleID);
+			setSubTextAppearance(styleID.data);
+		}
+
+		// Text Color attrs need to be set after TextAppearance attrs
+		if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderTextColor)) {
+			ColorStateList colors = attrs.getColorStateList(R.styleable.PullToRefresh_ptrHeaderTextColor);
+			if (null != colors) {
+				setTextColor(colors);
+			}
+		}
+		if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderSubTextColor)) {
+			ColorStateList colors = attrs.getColorStateList(R.styleable.PullToRefresh_ptrHeaderSubTextColor);
+			if (null != colors) {
+				setSubTextColor(colors);
+			}
+		}
+
+		// Try and get defined drawable from Attrs
+		Drawable imageDrawable = null;
+		if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawable)) {
+			imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawable);
+		}
+
+		// Check Specific Drawable from Attrs, these overrite the generic
+		// drawable attr above
+		switch (mode) {
+			case PULL_FROM_START:
+			default:
+				if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableStart)) {
+					imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableStart);
+				} else if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableTop)) {
+					Utils.warnDeprecation("ptrDrawableTop", "ptrDrawableStart");
+					imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableTop);
+				}
+				break;
+
+			case PULL_FROM_END:
+				if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableEnd)) {
+					imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableEnd);
+				} else if (attrs.hasValue(R.styleable.PullToRefresh_ptrDrawableBottom)) {
+					Utils.warnDeprecation("ptrDrawableBottom", "ptrDrawableEnd");
+					imageDrawable = attrs.getDrawable(R.styleable.PullToRefresh_ptrDrawableBottom);
+				}
+				break;
+		}
+
+		// If we don't have a user defined drawable, load the default
+		if (null == imageDrawable) {
+			imageDrawable = context.getResources().getDrawable(getDefaultDrawableResId());
+		}
+
+		// Set Drawable, and save width/height
+		setLoadingDrawable(imageDrawable);
+
+		reset();
+	}
+
+	public final void setHeight(int height) {
+		ViewGroup.LayoutParams lp = (ViewGroup.LayoutParams) getLayoutParams();
+		lp.height = height;
+		requestLayout();
+	}
+
+	public final void setWidth(int width) {
+		ViewGroup.LayoutParams lp = (ViewGroup.LayoutParams) getLayoutParams();
+		lp.width = width;
+		requestLayout();
+	}
+
+	public final int getContentSize() {
+		switch (mScrollDirection) {
+			case HORIZONTAL:
+				return mInnerLayout.getWidth();
+			case VERTICAL:
+			default:
+				return mInnerLayout.getHeight();
+		}
+	}
+
+	public final void hideAllViews() {
+		if (View.VISIBLE == mHeaderText.getVisibility()) {
+			mHeaderText.setVisibility(View.INVISIBLE);
+		}
+		if (View.VISIBLE == mHeaderProgress.getVisibility()) {
+			mHeaderProgress.setVisibility(View.INVISIBLE);
+		}
+		if (View.VISIBLE == mHeaderImage.getVisibility()) {
+			mHeaderImage.setVisibility(View.INVISIBLE);
+		}
+		if (View.VISIBLE == mSubHeaderText.getVisibility()) {
+			mSubHeaderText.setVisibility(View.INVISIBLE);
+		}
+	}
+
+	public final void onPull(float scaleOfLayout) {
+		if (!mUseIntrinsicAnimation) {
+			onPullImpl(scaleOfLayout);
+		}
+	}
+
+	public final void pullToRefresh() {
+		if (null != mHeaderText) {
+			mHeaderText.setText(mPullLabel);
+		}
+
+		// Now call the callback
+		pullToRefreshImpl();
+	}
+
+	public final void refreshing() {
+		if (null != mHeaderText) {
+			mHeaderText.setText(mRefreshingLabel);
+		}
+
+		if (mUseIntrinsicAnimation) {
+			((AnimationDrawable) mHeaderImage.getDrawable()).start();
+		} else {
+			// Now call the callback
+			refreshingImpl();
+		}
+
+		if (null != mSubHeaderText) {
+			mSubHeaderText.setVisibility(View.GONE);
+		}
+	}
+
+	public final void releaseToRefresh() {
+		if (null != mHeaderText) {
+			mHeaderText.setText(mReleaseLabel);
+		}
+
+		// Now call the callback
+		releaseToRefreshImpl();
+	}
+
+	public final void reset() {
+		if (null != mHeaderText) {
+			mHeaderText.setText(mPullLabel);
+		}
+		mHeaderImage.setVisibility(View.VISIBLE);
+
+		if (mUseIntrinsicAnimation) {
+			((AnimationDrawable) mHeaderImage.getDrawable()).stop();
+		} else {
+			// Now call the callback
+			resetImpl();
+		}
+
+		if (null != mSubHeaderText) {
+			if (TextUtils.isEmpty(mSubHeaderText.getText())) {
+				mSubHeaderText.setVisibility(View.GONE);
+			} else {
+				mSubHeaderText.setVisibility(View.VISIBLE);
+			}
+		}
+	}
+
+	@Override
+	public void setLastUpdatedLabel(CharSequence label) {
+		setSubHeaderText(label);
+	}
+
+	public final void setLoadingDrawable(Drawable imageDrawable) {
+		// Set Drawable
+		mHeaderImage.setImageDrawable(imageDrawable);
+		mUseIntrinsicAnimation = (imageDrawable instanceof AnimationDrawable);
+
+		// Now call the callback
+		onLoadingDrawableSet(imageDrawable);
+	}
+
+	public void setPullLabel(CharSequence pullLabel) {
+		mPullLabel = pullLabel;
+	}
+
+	public void setRefreshingLabel(CharSequence refreshingLabel) {
+		mRefreshingLabel = refreshingLabel;
+	}
+
+	public void setReleaseLabel(CharSequence releaseLabel) {
+		mReleaseLabel = releaseLabel;
+	}
+
+	@Override
+	public void setTextTypeface(Typeface tf) {
+		mHeaderText.setTypeface(tf);
+	}
+
+	public final void showInvisibleViews() {
+		if (View.INVISIBLE == mHeaderText.getVisibility()) {
+			mHeaderText.setVisibility(View.VISIBLE);
+		}
+		if (View.INVISIBLE == mHeaderProgress.getVisibility()) {
+			mHeaderProgress.setVisibility(View.VISIBLE);
+		}
+		if (View.INVISIBLE == mHeaderImage.getVisibility()) {
+			mHeaderImage.setVisibility(View.VISIBLE);
+		}
+		if (View.INVISIBLE == mSubHeaderText.getVisibility()) {
+			mSubHeaderText.setVisibility(View.VISIBLE);
+		}
+	}
+
+	/**
+	 * Callbacks for derivative Layouts
+	 */
+
+	protected abstract int getDefaultDrawableResId();
+
+	protected abstract void onLoadingDrawableSet(Drawable imageDrawable);
+
+	protected abstract void onPullImpl(float scaleOfLayout);
+
+	protected abstract void pullToRefreshImpl();
+
+	protected abstract void refreshingImpl();
+
+	protected abstract void releaseToRefreshImpl();
+
+	protected abstract void resetImpl();
+
+	private void setSubHeaderText(CharSequence label) {
+		if (null != mSubHeaderText) {
+			if (TextUtils.isEmpty(label)) {
+				mSubHeaderText.setVisibility(View.GONE);
+			} else {
+				mSubHeaderText.setText(label);
+
+				// Only set it to Visible if we're GONE, otherwise VISIBLE will
+				// be set soon
+				if (View.GONE == mSubHeaderText.getVisibility()) {
+					mSubHeaderText.setVisibility(View.VISIBLE);
+				}
+			}
+		}
+	}
+
+	private void setSubTextAppearance(int value) {
+		if (null != mSubHeaderText) {
+			mSubHeaderText.setTextAppearance(getContext(), value);
+		}
+	}
+
+	private void setSubTextColor(ColorStateList color) {
+		if (null != mSubHeaderText) {
+			mSubHeaderText.setTextColor(color);
+		}
+	}
+
+	private void setTextAppearance(int value) {
+		if (null != mHeaderText) {
+			mHeaderText.setTextAppearance(getContext(), value);
+		}
+		if (null != mSubHeaderText) {
+			mSubHeaderText.setTextAppearance(getContext(), value);
+		}
+	}
+
+	private void setTextColor(ColorStateList color) {
+		if (null != mHeaderText) {
+			mHeaderText.setTextColor(color);
+		}
+		if (null != mSubHeaderText) {
+			mSubHeaderText.setTextColor(color);
+		}
+	}
+
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/util/PaintUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/util/PaintUtil.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/util/PaintUtil.java	(revision )
@@ -0,0 +1,82 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.util;
+
+
+import android.content.res.Resources;
+import android.graphics.Paint;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.R;
+
+/**
+ * Utility class for handling all of the Paint used to draw the CropOverlayView.
+ */
+public class PaintUtil {
+
+    // Public Methods //////////////////////////////////////////////////////////
+
+    /**
+     * Creates the Paint object for drawing the crop window border.
+     */
+    public static Paint newBorderPaint(@NonNull Resources resources) {
+
+        final Paint paint = new Paint();
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setStrokeWidth(resources.getDimension(R.dimen.border_thickness));
+        paint.setColor(resources.getColor(R.color.border));
+
+        return paint;
+    }
+
+    /**
+     * Creates the Paint object for drawing the crop window guidelines.
+     */
+    public static Paint newGuidelinePaint(@NonNull Resources resources) {
+
+        final Paint paint = new Paint();
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setStrokeWidth(resources.getDimension(R.dimen.guideline_thickness));
+        paint.setColor(resources.getColor(R.color.guideline));
+
+        return paint;
+    }
+
+    /**
+     * Creates the Paint object for drawing the translucent overlay outside the crop window.
+     *
+     * @return the new Paint object
+     */
+    public static Paint newSurroundingAreaOverlayPaint(@NonNull Resources resources) {
+
+        final Paint paint = new Paint();
+        paint.setStyle(Paint.Style.FILL);
+        paint.setColor(resources.getColor(R.color.surrounding_area));
+
+        return paint;
+    }
+
+    /**
+     * Creates the Paint object for drawing the corners of the border
+     */
+    public static Paint newCornerPaint(@NonNull Resources resources) {
+
+        final Paint paint = new Paint();
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setStrokeWidth(resources.getDimension(R.dimen.corner_thickness));
+        paint.setColor(resources.getColor(R.color.corner));
+
+        return paint;
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-fr/values-fr.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-fr/values-fr.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-fr/values-fr.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-fr/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tirez pour rafraîchir…</string>
+    <string name="pull_to_refresh_refreshing_label">Chargement…</string>
+    <string name="pull_to_refresh_release_label">Relâcher pour rafraîchir…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CanvasTransformerBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CanvasTransformerBuilder.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CanvasTransformerBuilder.java	(revision )
@@ -0,0 +1,95 @@
+package com.jeremyfeinstein.slidingmenu.lib;
+
+import android.graphics.Canvas;
+import android.view.animation.Interpolator;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu.CanvasTransformer;
+
+public class CanvasTransformerBuilder {
+
+	private CanvasTransformer mTrans;
+
+	private static Interpolator lin = new Interpolator() {
+		public float getInterpolation(float t) {
+			return t;
+		}
+	};
+
+	private void initTransformer() {
+		if (mTrans == null)
+			mTrans = new CanvasTransformer() {
+			public void transformCanvas(Canvas canvas, float percentOpen) {	}
+		};
+	}
+
+	public CanvasTransformer zoom(final int openedX, final int closedX, 
+			final int openedY, final int closedY, 
+			final int px, final int py) {
+		return zoom(openedX, closedX, openedY, closedY, px, py, lin);
+	}
+
+	public CanvasTransformer zoom(final int openedX, final int closedX, 
+			final int openedY, final int closedY,
+			final int px, final int py, final Interpolator interp) {
+		initTransformer();
+		mTrans = new CanvasTransformer() {
+			public void transformCanvas(Canvas canvas, float percentOpen) {
+				mTrans.transformCanvas(canvas, percentOpen);
+				float f = interp.getInterpolation(percentOpen);
+				canvas.scale((openedX - closedX) * f + closedX,
+						(openedY - closedY) * f + closedY, px, py);
+			}			
+		};
+		return mTrans;
+	}
+
+	public CanvasTransformer rotate(final int openedDeg, final int closedDeg, 
+			final int px, final int py) {
+		return rotate(openedDeg, closedDeg, px, py, lin);
+	}
+
+	public CanvasTransformer rotate(final int openedDeg, final int closedDeg, 
+			final int px, final int py, final Interpolator interp) {
+		initTransformer();
+		mTrans = new CanvasTransformer() {
+			public void transformCanvas(Canvas canvas, float percentOpen) {
+				mTrans.transformCanvas(canvas, percentOpen);
+				float f = interp.getInterpolation(percentOpen);
+				canvas.rotate((openedDeg - closedDeg) * f + closedDeg, 
+						px, py);
+			}			
+		};
+		return mTrans;
+	}
+
+	public CanvasTransformer translate(final int openedX, final int closedX, 
+			final int openedY, final int closedY) {
+		return translate(openedX, closedX, openedY, closedY, lin);
+	}
+
+	public CanvasTransformer translate(final int openedX, final int closedX, 
+			final int openedY, final int closedY, final Interpolator interp) {
+		initTransformer();
+		mTrans = new CanvasTransformer() {
+			public void transformCanvas(Canvas canvas, float percentOpen) {
+				mTrans.transformCanvas(canvas, percentOpen);
+				float f = interp.getInterpolation(percentOpen);
+				canvas.translate((openedX - closedX) * f + closedX,
+						(openedY - closedY) * f + closedY);
+			}			
+		};
+		return mTrans;
+	}
+
+	public CanvasTransformer concatTransformer(final CanvasTransformer t) {
+		initTransformer();
+		mTrans = new CanvasTransformer() {
+			public void transformCanvas(Canvas canvas, float percentOpen) {
+				mTrans.transformCanvas(canvas, percentOpen);
+				t.transformCanvas(canvas, percentOpen);
+			}			
+		};
+		return mTrans;
+	}
+
+}
Index: app/src/main/res/values-w820dp/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-w820dp/dimens.xml	(revision )
+++ app/src/main/res/values-w820dp/dimens.xml	(revision )
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java	(revision )
@@ -0,0 +1,73 @@
+package com.handmark.pulltorefresh.library;
+
+import java.util.HashSet;
+
+import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
+
+import com.handmark.pulltorefresh.library.internal.LoadingLayout;
+
+public class LoadingLayoutProxy implements ILoadingLayout {
+
+	private final HashSet<LoadingLayout> mLoadingLayouts;
+
+	LoadingLayoutProxy() {
+		mLoadingLayouts = new HashSet<LoadingLayout>();
+	}
+
+	/**
+	 * This allows you to add extra LoadingLayout instances to this proxy. This
+	 * is only necessary if you keep your own instances, and want to have them
+	 * included in any
+	 * {@link PullToRefreshBase#createLoadingLayoutProxy(boolean, boolean)
+	 * createLoadingLayoutProxy(...)} calls.
+	 * 
+	 * @param layout - LoadingLayout to have included.
+	 */
+	public void addLayout(LoadingLayout layout) {
+		if (null != layout) {
+			mLoadingLayouts.add(layout);
+		}
+	}
+
+	@Override
+	public void setLastUpdatedLabel(CharSequence label) {
+		for (LoadingLayout layout : mLoadingLayouts) {
+			layout.setLastUpdatedLabel(label);
+		}
+	}
+
+	@Override
+	public void setLoadingDrawable(Drawable drawable) {
+		for (LoadingLayout layout : mLoadingLayouts) {
+			layout.setLoadingDrawable(drawable);
+		}
+	}
+
+	@Override
+	public void setRefreshingLabel(CharSequence refreshingLabel) {
+		for (LoadingLayout layout : mLoadingLayouts) {
+			layout.setRefreshingLabel(refreshingLabel);
+		}
+	}
+
+	@Override
+	public void setPullLabel(CharSequence label) {
+		for (LoadingLayout layout : mLoadingLayouts) {
+			layout.setPullLabel(label);
+		}
+	}
+
+	@Override
+	public void setReleaseLabel(CharSequence label) {
+		for (LoadingLayout layout : mLoadingLayouts) {
+			layout.setReleaseLabel(label);
+		}
+	}
+
+	public void setTextTypeface(Typeface tf) {
+		for (LoadingLayout layout : mLoadingLayouts) {
+			layout.setTextTypeface(tf);
+		}
+	}
+}
Index: cropperimagelibrary/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/.gitignore	(revision )
+++ cropperimagelibrary/.gitignore	(revision )
@@ -0,0 +1,1 @@
+/build
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ro/values-ro.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ro/values-ro.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ro/values-ro.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ro/values-ro.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Trage pentru a reîmprospăta…</string>
+    <string name="pull_to_refresh_refreshing_label">Încărcare…</string>
+    <string name="pull_to_refresh_release_label">Eliberează pentru a reîmprospăta…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build.gradle	(revision )
+++ SlidingMeunlibrary/build.gradle	(revision )
@@ -0,0 +1,35 @@
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+
+}
+apply plugin: 'com.android.library'
+
+dependencies {
+    compile 'com.android.support:support-v4:13.0.0'
+}
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
+
+    defaultConfig {
+        minSdkVersion 15
+        targetSdkVersion 25
+    }
+
+    sourceSets {
+        main {
+            java.srcDirs = ['src']
+            resources.srcDirs = ['src']
+            aidl.srcDirs = ['src']
+            renderscript.srcDirs = ['src']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+
+            manifest.srcFile 'AndroidManifest.xml'
+        }
+    }
+
+}
Index: SlidingMeunlibrary/build/intermediates/bundles/debug/res/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/debug/res/values/values.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/debug/res/values/values.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="SlidingMenu"><attr name="mode"><enum name="left" value="0"/><enum name="right" value="1"/></attr><attr format="reference" name="viewAbove"/><attr format="reference" name="viewBehind"/><attr format="dimension" name="behindOffset"/><attr format="dimension" name="behindWidth"/><attr format="float" name="behindScrollScale"/><attr name="touchModeAbove"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr name="touchModeBehind"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr format="reference" name="shadowDrawable"/><attr format="dimension" name="shadowWidth"/><attr format="boolean" name="fadeEnabled"/><attr format="float" name="fadeDegree"/><attr format="boolean" name="selectorEnabled"/><attr format="reference" name="selectorDrawable"/></declare-styleable>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/SlidingMeunlibrary/res/values/ids.xml -->
+    <eat-comment/>
+    <item name="selected_view" type="id"/>
+</resources>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHouseHeader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHouseHeader.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHouseHeader.java	(revision )
@@ -0,0 +1,331 @@
+package in.srain.cube.views.ptr.header;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Matrix;
+import android.graphics.PointF;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.animation.Transformation;
+import in.srain.cube.views.ptr.PtrFrameLayout;
+import in.srain.cube.views.ptr.PtrUIHandler;
+import in.srain.cube.views.ptr.indicator.PtrIndicator;
+import in.srain.cube.views.ptr.util.PtrLocalDisplay;
+
+import java.util.ArrayList;
+
+public class StoreHouseHeader extends View implements PtrUIHandler {
+
+    public ArrayList<StoreHouseBarItem> mItemList = new ArrayList<StoreHouseBarItem>();
+
+    private int mLineWidth = -1;
+    private float mScale = 1;
+    private int mDropHeight = -1;
+    private float mInternalAnimationFactor = 0.7f;
+    private int mHorizontalRandomness = -1;
+
+    private float mProgress = 0;
+
+    private int mDrawZoneWidth = 0;
+    private int mDrawZoneHeight = 0;
+    private int mOffsetX = 0;
+    private int mOffsetY = 0;
+    private float mBarDarkAlpha = 0.4f;
+    private float mFromAlpha = 1.0f;
+    private float mToAlpha = 0.4f;
+
+    private int mLoadingAniDuration = 1000;
+    private int mLoadingAniSegDuration = 1000;
+    private int mLoadingAniItemDuration = 400;
+
+    private Transformation mTransformation = new Transformation();
+    private boolean mIsInLoading = false;
+    private AniController mAniController = new AniController();
+    private int mTextColor = Color.WHITE;
+
+    public StoreHouseHeader(Context context) {
+        super(context);
+        initView();
+    }
+
+    public StoreHouseHeader(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initView();
+    }
+
+    public StoreHouseHeader(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        initView();
+    }
+
+    private void initView() {
+        PtrLocalDisplay.init(getContext());
+        mLineWidth = PtrLocalDisplay.dp2px(1);
+        mDropHeight = PtrLocalDisplay.dp2px(40);
+        mHorizontalRandomness = PtrLocalDisplay.SCREEN_WIDTH_PIXELS / 2;
+    }
+
+    private void setProgress(float progress) {
+        mProgress = progress;
+    }
+
+    public int getLoadingAniDuration() {
+        return mLoadingAniDuration;
+    }
+
+    public void setLoadingAniDuration(int duration) {
+        mLoadingAniDuration = duration;
+        mLoadingAniSegDuration = duration;
+    }
+
+    public StoreHouseHeader setLineWidth(int width) {
+        mLineWidth = width;
+        for (int i = 0; i < mItemList.size(); i++) {
+            mItemList.get(i).setLineWidth(width);
+        }
+        return this;
+    }
+
+    public StoreHouseHeader setTextColor(int color) {
+        mTextColor = color;
+        for (int i = 0; i < mItemList.size(); i++) {
+            mItemList.get(i).setColor(color);
+        }
+        return this;
+    }
+
+    public StoreHouseHeader setDropHeight(int height) {
+        mDropHeight = height;
+        return this;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int height = getTopOffset() + mDrawZoneHeight + getBottomOffset();
+        heightMeasureSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY);
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        mOffsetX = (getMeasuredWidth() - mDrawZoneWidth) / 2;
+        mOffsetY = getTopOffset();
+        mDropHeight = getTopOffset();
+    }
+
+    private int getTopOffset() {
+        return getPaddingTop() + PtrLocalDisplay.dp2px(10);
+    }
+
+    private int getBottomOffset() {
+        return getPaddingBottom() + PtrLocalDisplay.dp2px(10);
+    }
+
+    public void initWithString(String str) {
+        initWithString(str, 25);
+    }
+
+    public void initWithString(String str, int fontSize) {
+        ArrayList<float[]> pointList = StoreHousePath.getPath(str, fontSize * 0.01f, 14);
+        initWithPointList(pointList);
+    }
+
+    public void initWithStringArray(int id) {
+        String[] points = getResources().getStringArray(id);
+        ArrayList<float[]> pointList = new ArrayList<float[]>();
+        for (int i = 0; i < points.length; i++) {
+            String[] x = points[i].split(",");
+            float[] f = new float[4];
+            for (int j = 0; j < 4; j++) {
+                f[j] = Float.parseFloat(x[j]);
+            }
+            pointList.add(f);
+        }
+        initWithPointList(pointList);
+    }
+
+    public float getScale() {
+        return mScale;
+    }
+
+    public void setScale(float scale) {
+        mScale = scale;
+    }
+
+    public void initWithPointList(ArrayList<float[]> pointList) {
+
+        float drawWidth = 0;
+        float drawHeight = 0;
+        boolean shouldLayout = mItemList.size() > 0;
+        mItemList.clear();
+        for (int i = 0; i < pointList.size(); i++) {
+            float[] line = pointList.get(i);
+            PointF startPoint = new PointF(PtrLocalDisplay.dp2px(line[0]) * mScale, PtrLocalDisplay.dp2px(line[1]) * mScale);
+            PointF endPoint = new PointF(PtrLocalDisplay.dp2px(line[2]) * mScale, PtrLocalDisplay.dp2px(line[3]) * mScale);
+
+            drawWidth = Math.max(drawWidth, startPoint.x);
+            drawWidth = Math.max(drawWidth, endPoint.x);
+
+            drawHeight = Math.max(drawHeight, startPoint.y);
+            drawHeight = Math.max(drawHeight, endPoint.y);
+
+            StoreHouseBarItem item = new StoreHouseBarItem(i, startPoint, endPoint, mTextColor, mLineWidth);
+            item.resetPosition(mHorizontalRandomness);
+            mItemList.add(item);
+        }
+        mDrawZoneWidth = (int) Math.ceil(drawWidth);
+        mDrawZoneHeight = (int) Math.ceil(drawHeight);
+        if (shouldLayout) {
+            requestLayout();
+        }
+    }
+
+    private void beginLoading() {
+        mIsInLoading = true;
+        mAniController.start();
+        invalidate();
+    }
+
+    private void loadFinish() {
+        mIsInLoading = false;
+        mAniController.stop();
+    }
+
+    @Override
+    public void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        float progress = mProgress;
+        int c1 = canvas.save();
+        int len = mItemList.size();
+
+        for (int i = 0; i < len; i++) {
+
+            canvas.save();
+            StoreHouseBarItem storeHouseBarItem = mItemList.get(i);
+            float offsetX = mOffsetX + storeHouseBarItem.midPoint.x;
+            float offsetY = mOffsetY + storeHouseBarItem.midPoint.y;
+
+            if (mIsInLoading) {
+                storeHouseBarItem.getTransformation(getDrawingTime(), mTransformation);
+                canvas.translate(offsetX, offsetY);
+            } else {
+
+                if (progress == 0) {
+                    storeHouseBarItem.resetPosition(mHorizontalRandomness);
+                    continue;
+                }
+
+                float startPadding = (1 - mInternalAnimationFactor) * i / len;
+                float endPadding = 1 - mInternalAnimationFactor - startPadding;
+
+                // done
+                if (progress == 1 || progress >= 1 - endPadding) {
+                    canvas.translate(offsetX, offsetY);
+                    storeHouseBarItem.setAlpha(mBarDarkAlpha);
+                } else {
+                    float realProgress;
+                    if (progress <= startPadding) {
+                        realProgress = 0;
+                    } else {
+                        realProgress = Math.min(1, (progress - startPadding) / mInternalAnimationFactor);
+                    }
+                    offsetX += storeHouseBarItem.translationX * (1 - realProgress);
+                    offsetY += -mDropHeight * (1 - realProgress);
+                    Matrix matrix = new Matrix();
+                    matrix.postRotate(360 * realProgress);
+                    matrix.postScale(realProgress, realProgress);
+                    matrix.postTranslate(offsetX, offsetY);
+                    storeHouseBarItem.setAlpha(mBarDarkAlpha * realProgress);
+                    canvas.concat(matrix);
+                }
+            }
+            storeHouseBarItem.draw(canvas);
+            canvas.restore();
+        }
+        if (mIsInLoading) {
+            invalidate();
+        }
+        canvas.restoreToCount(c1);
+    }
+
+    @Override
+    public void onUIReset(PtrFrameLayout frame) {
+        loadFinish();
+        for (int i = 0; i < mItemList.size(); i++) {
+            mItemList.get(i).resetPosition(mHorizontalRandomness);
+
+        }
+    }
+
+    @Override
+    public void onUIRefreshPrepare(PtrFrameLayout frame) {
+
+    }
+
+    @Override
+    public void onUIRefreshBegin(PtrFrameLayout frame) {
+        beginLoading();
+    }
+
+    @Override
+    public void onUIRefreshComplete(PtrFrameLayout frame) {
+        loadFinish();
+    }
+
+    @Override
+    public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator) {
+
+        float currentPercent = Math.min(1f, ptrIndicator.getCurrentPercent());
+        setProgress(currentPercent);
+        invalidate();
+    }
+
+    private class AniController implements Runnable {
+
+        private int mTick = 0;
+        private int mCountPerSeg = 0;
+        private int mSegCount = 0;
+        private int mInterval = 0;
+        private boolean mRunning = true;
+
+        private void start() {
+            mRunning = true;
+            mTick = 0;
+
+            mInterval = mLoadingAniDuration / mItemList.size();
+            mCountPerSeg = mLoadingAniSegDuration / mInterval;
+            mSegCount = mItemList.size() / mCountPerSeg + 1;
+            run();
+        }
+
+        @Override
+        public void run() {
+
+            int pos = mTick % mCountPerSeg;
+            for (int i = 0; i < mSegCount; i++) {
+
+                int index = i * mCountPerSeg + pos;
+                if (index > mTick) {
+                    continue;
+                }
+
+                index = index % mItemList.size();
+                StoreHouseBarItem item = mItemList.get(index);
+
+                item.setFillAfter(false);
+                item.setFillEnabled(true);
+                item.setFillBefore(false);
+                item.setDuration(mLoadingAniItemDuration);
+                item.start(mFromAlpha, mToAlpha);
+            }
+
+            mTick++;
+            if (mRunning) {
+                postDelayed(this, mInterval);
+            }
+        }
+
+        private void stop() {
+            mRunning = false;
+            removeCallbacks(this);
+        }
+    }
+}
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-ar/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-ar/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-ar/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">اسحب للتحديث…</string>
+  <string name="pull_to_refresh_release_label">اترك للتحديث…</string>
+  <string name="pull_to_refresh_refreshing_label">تحميل…</string>
+</resources>
Index: cropperimagelibrary/src/main/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/res/values/attrs.xml	(revision )
+++ cropperimagelibrary/src/main/res/values/attrs.xml	(revision )
@@ -0,0 +1,17 @@
+<resources>
+
+    <declare-styleable name="CropImageView">
+
+        <attr name="guidelines">
+            <enum name="off" value="0"/>
+            <enum name="onTouch" value="1"/>
+            <enum name="on" value="2"/>
+        </attr>
+
+        <attr name="fixAspectRatio" format="boolean"/>
+        <attr name="aspectRatioX" format="integer"/>
+        <attr name="aspectRatioY" format="integer"/>
+
+    </declare-styleable>
+
+</resources>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/res/values/cube_ptr_string.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/res/values/cube_ptr_string.xml	(revision )
+++ ultrapulltorefreshlibrary/src/main/res/values/cube_ptr_string.xml	(revision )
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="cube_ptr_pull_down">Pull Down</string>
+    <string name="cube_ptr_pull_down_to_refresh">Pull Down to Refresh</string>
+    <string name="cube_ptr_release_to_refresh">Release To Refresh</string>
+    <string name="cube_ptr_refreshing">Updating...</string>
+    <string name="cube_ptr_refresh_complete">Updated.</string>
+
+    <string name="cube_ptr_last_update">last update:&#160;</string>
+    <string name="cube_ptr_seconds_ago">&#160;seconds ago</string>
+    <string name="cube_ptr_minutes_ago">&#160;minutes ago</string>
+    <string name="cube_ptr_hours_ago">&#160;hours ago</string>
+
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/layout/pull_to_refresh_header_vertical.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/layout/pull_to_refresh_header_vertical.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/layout/pull_to_refresh_header_vertical.xml	(revision )
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="left|center_vertical" >
+
+            <ImageView
+                android:id="@+id/pull_to_refresh_image"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center" />
+
+            <ProgressBar
+                android:id="@+id/pull_to_refresh_progress"
+                style="?android:attr/progressBarStyleSmall"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:indeterminate="true"
+                android:visibility="gone" />
+        </FrameLayout>
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:gravity="center_horizontal"
+            android:orientation="vertical" >
+
+            <TextView
+                android:id="@+id/pull_to_refresh_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearance"
+                android:textStyle="bold" />
+
+            <TextView
+                android:id="@+id/pull_to_refresh_sub_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:visibility="gone" />
+        </LinearLayout>
+    </FrameLayout>
+
+</merge><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_vertical.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/drawable/indicator_bg_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/drawable/indicator_bg_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/drawable/indicator_bg_top.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="@dimen/indicator_corner_radius"
+        android:bottomRightRadius="@dimen/indicator_corner_radius"
+        android:radius="1dp"
+        android:topLeftRadius="0dp"
+        android:topRightRadius="0dp" />
+
+</shape><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/drawable/indicator_bg_top.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_top.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/release/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/release/merger.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/release/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\assets"/></dataSet><dataSet config="release"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\release\assets"/></dataSet></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-de/values-de.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-de/values-de.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-de/values-de.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-de/values-de.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Ziehen zum Aktualisieren…</string>
+    <string name="pull_to_refresh_refreshing_label">Laden…</string>
+    <string name="pull_to_refresh_release_label">Loslassen zum Aktualisieren…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshListView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshListView.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshListView.java	(revision )
@@ -0,0 +1,337 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;
+import com.handmark.pulltorefresh.library.internal.LoadingLayout;
+
+public class PullToRefreshListView extends PullToRefreshAdapterViewBase<ListView> {
+
+	private LoadingLayout mHeaderLoadingView;
+	private LoadingLayout mFooterLoadingView;
+
+	private FrameLayout mLvFooterLoadingFrame;
+
+	private boolean mListViewExtrasEnabled;
+
+	public PullToRefreshListView(Context context) {
+		super(context);
+	}
+
+	public PullToRefreshListView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public PullToRefreshListView(Context context, Mode mode) {
+		super(context, mode);
+	}
+
+	public PullToRefreshListView(Context context, Mode mode, AnimationStyle style) {
+		super(context, mode, style);
+	}
+
+	@Override
+	public final Orientation getPullToRefreshScrollDirection() {
+		return Orientation.VERTICAL;
+	}
+
+	@Override
+	protected void onRefreshing(final boolean doScroll) {
+		/**
+		 * If we're not showing the Refreshing view, or the list is empty, the
+		 * the header/footer views won't show so we use the normal method.
+		 */
+		ListAdapter adapter = mRefreshableView.getAdapter();
+		if (!mListViewExtrasEnabled || !getShowViewWhileRefreshing() || null == adapter || adapter.isEmpty()) {
+			super.onRefreshing(doScroll);
+			return;
+		}
+
+		super.onRefreshing(false);
+
+		final LoadingLayout origLoadingView, listViewLoadingView, oppositeListViewLoadingView;
+		final int selection, scrollToY;
+
+		switch (getCurrentMode()) {
+			case MANUAL_REFRESH_ONLY:
+			case PULL_FROM_END:
+				origLoadingView = getFooterLayout();
+				listViewLoadingView = mFooterLoadingView;
+				oppositeListViewLoadingView = mHeaderLoadingView;
+				selection = mRefreshableView.getCount() - 1;
+				scrollToY = getScrollY() - getFooterSize();
+				break;
+			case PULL_FROM_START:
+			default:
+				origLoadingView = getHeaderLayout();
+				listViewLoadingView = mHeaderLoadingView;
+				oppositeListViewLoadingView = mFooterLoadingView;
+				selection = 0;
+				scrollToY = getScrollY() + getHeaderSize();
+				break;
+		}
+
+		// Hide our original Loading View
+		origLoadingView.reset();
+		origLoadingView.hideAllViews();
+
+		// Make sure the opposite end is hidden too
+		oppositeListViewLoadingView.setVisibility(View.GONE);
+
+		// Show the ListView Loading View and set it to refresh.
+		listViewLoadingView.setVisibility(View.VISIBLE);
+		listViewLoadingView.refreshing();
+
+		if (doScroll) {
+			// We need to disable the automatic visibility changes for now
+			disableLoadingLayoutVisibilityChanges();
+
+			// We scroll slightly so that the ListView's header/footer is at the
+			// same Y position as our normal header/footer
+			setHeaderScroll(scrollToY);
+
+			// Make sure the ListView is scrolled to show the loading
+			// header/footer
+			mRefreshableView.setSelection(selection);
+
+			// Smooth scroll as normal
+			smoothScrollTo(0);
+		}
+	}
+
+	@Override
+	protected void onReset() {
+		/**
+		 * If the extras are not enabled, just call up to super and return.
+		 */
+		if (!mListViewExtrasEnabled) {
+			super.onReset();
+			return;
+		}
+
+		final LoadingLayout originalLoadingLayout, listViewLoadingLayout;
+		final int scrollToHeight, selection;
+		final boolean scrollLvToEdge;
+
+		switch (getCurrentMode()) {
+			case MANUAL_REFRESH_ONLY:
+			case PULL_FROM_END:
+				originalLoadingLayout = getFooterLayout();
+				listViewLoadingLayout = mFooterLoadingView;
+				selection = mRefreshableView.getCount() - 1;
+				scrollToHeight = getFooterSize();
+				scrollLvToEdge = Math.abs(mRefreshableView.getLastVisiblePosition() - selection) <= 1;
+				break;
+			case PULL_FROM_START:
+			default:
+				originalLoadingLayout = getHeaderLayout();
+				listViewLoadingLayout = mHeaderLoadingView;
+				scrollToHeight = -getHeaderSize();
+				selection = 0;
+				scrollLvToEdge = Math.abs(mRefreshableView.getFirstVisiblePosition() - selection) <= 1;
+				break;
+		}
+
+		// If the ListView header loading layout is showing, then we need to
+		// flip so that the original one is showing instead
+		if (listViewLoadingLayout.getVisibility() == View.VISIBLE) {
+
+			// Set our Original View to Visible
+			originalLoadingLayout.showInvisibleViews();
+
+			// Hide the ListView Header/Footer
+			listViewLoadingLayout.setVisibility(View.GONE);
+
+			/**
+			 * Scroll so the View is at the same Y as the ListView
+			 * header/footer, but only scroll if: we've pulled to refresh, it's
+			 * positioned correctly
+			 */
+			if (scrollLvToEdge && getState() != State.MANUAL_REFRESHING) {
+				mRefreshableView.setSelection(selection);
+				setHeaderScroll(scrollToHeight);
+			}
+		}
+
+		// Finally, call up to super
+		super.onReset();
+	}
+
+	@Override
+	protected LoadingLayoutProxy createLoadingLayoutProxy(final boolean includeStart, final boolean includeEnd) {
+		LoadingLayoutProxy proxy = super.createLoadingLayoutProxy(includeStart, includeEnd);
+
+		if (mListViewExtrasEnabled) {
+			final Mode mode = getMode();
+
+			if (includeStart && mode.showHeaderLoadingLayout()) {
+				proxy.addLayout(mHeaderLoadingView);
+			}
+			if (includeEnd && mode.showFooterLoadingLayout()) {
+				proxy.addLayout(mFooterLoadingView);
+			}
+		}
+
+		return proxy;
+	}
+
+	protected ListView createListView(Context context, AttributeSet attrs) {
+		final ListView lv;
+		if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {
+			lv = new InternalListViewSDK9(context, attrs);
+		} else {
+			lv = new InternalListView(context, attrs);
+		}
+		return lv;
+	}
+
+	@Override
+	protected ListView createRefreshableView(Context context, AttributeSet attrs) {
+		ListView lv = createListView(context, attrs);
+
+		// Set it to this so it can be used in ListActivity/ListFragment
+		lv.setId(android.R.id.list);
+		return lv;
+	}
+
+	@Override
+	protected void handleStyledAttributes(TypedArray a) {
+		super.handleStyledAttributes(a);
+
+		mListViewExtrasEnabled = a.getBoolean(R.styleable.PullToRefresh_ptrListViewExtrasEnabled, true);
+
+		if (mListViewExtrasEnabled) {
+			final FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
+					FrameLayout.LayoutParams.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL);
+
+			// Create Loading Views ready for use later
+			FrameLayout frame = new FrameLayout(getContext());
+			mHeaderLoadingView = createLoadingLayout(getContext(), Mode.PULL_FROM_START, a);
+			mHeaderLoadingView.setVisibility(View.GONE);
+			frame.addView(mHeaderLoadingView, lp);
+			mRefreshableView.addHeaderView(frame, null, false);
+
+			mLvFooterLoadingFrame = new FrameLayout(getContext());
+			mFooterLoadingView = createLoadingLayout(getContext(), Mode.PULL_FROM_END, a);
+			mFooterLoadingView.setVisibility(View.GONE);
+			mLvFooterLoadingFrame.addView(mFooterLoadingView, lp);
+
+			/**
+			 * If the value for Scrolling While Refreshing hasn't been
+			 * explicitly set via XML, enable Scrolling While Refreshing.
+			 */
+			if (!a.hasValue(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled)) {
+				setScrollingWhileRefreshingEnabled(true);
+			}
+		}
+	}
+
+	@TargetApi(9)
+	final class InternalListViewSDK9 extends InternalListView {
+
+		public InternalListViewSDK9(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
+				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
+
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
+
+			// Does all of the hard work...
+			OverscrollHelper.overScrollBy(PullToRefreshListView.this, deltaX, scrollX, deltaY, scrollY, isTouchEvent);
+
+			return returnValue;
+		}
+	}
+
+	protected class InternalListView extends ListView implements EmptyViewMethodAccessor {
+
+		private boolean mAddedLvFooter = false;
+
+		public InternalListView(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		protected void dispatchDraw(Canvas canvas) {
+			/**
+			 * This is a bit hacky, but Samsung's ListView has got a bug in it
+			 * when using Header/Footer Views and the list is empty. This masks
+			 * the issue so that it doesn't cause an FC. See Issue #66.
+			 */
+			try {
+				super.dispatchDraw(canvas);
+			} catch (IndexOutOfBoundsException e) {
+				e.printStackTrace();
+			}
+		}
+
+		@Override
+		public boolean dispatchTouchEvent(MotionEvent ev) {
+			/**
+			 * This is a bit hacky, but Samsung's ListView has got a bug in it
+			 * when using Header/Footer Views and the list is empty. This masks
+			 * the issue so that it doesn't cause an FC. See Issue #66.
+			 */
+			try {
+				return super.dispatchTouchEvent(ev);
+			} catch (IndexOutOfBoundsException e) {
+				e.printStackTrace();
+				return false;
+			}
+		}
+
+		@Override
+		public void setAdapter(ListAdapter adapter) {
+			// Add the Footer View at the last possible moment
+			if (null != mLvFooterLoadingFrame && !mAddedLvFooter) {
+				addFooterView(mLvFooterLoadingFrame, null, false);
+				mAddedLvFooter = true;
+			}
+
+			super.setAdapter(adapter);
+		}
+
+		@Override
+		public void setEmptyView(View emptyView) {
+			PullToRefreshListView.this.setEmptyView(emptyView);
+		}
+
+		@Override
+		public void setEmptyViewInternal(View emptyView) {
+			super.setEmptyView(emptyView);
+		}
+
+	}
+
+}
Index: ultrapulltorefreshlibrary/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/proguard-rules.pro	(revision )
+++ ultrapulltorefreshlibrary/proguard-rules.pro	(revision )
@@ -0,0 +1,25 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in F:\ZZT\Tools\AndroidStudio\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
Index: SlidingMeunlibrary/build/intermediates/incremental/mergeResources/androidTest/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/incremental/mergeResources/androidTest/debug/merger.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/incremental/mergeResources/androidTest/debug/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\intermediates\bundles\debug\res"><file name="slidingmenumain" path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\intermediates\bundles\debug\res\layout\slidingmenumain.xml" qualifiers="" type="layout"/><file path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\intermediates\bundles\debug\res\values\values.xml" qualifiers=""><item name="selected_view" type="id"/><declare-styleable name="SlidingMenu"><attr name="mode"><enum name="left" value="0"/><enum name="right" value="1"/></attr><attr format="reference" name="viewAbove"/><attr format="reference" name="viewBehind"/><attr format="dimension" name="behindOffset"/><attr format="dimension" name="behindWidth"/><attr format="float" name="behindScrollScale"/><attr name="touchModeAbove"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr name="touchModeBehind"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr format="reference" name="shadowDrawable"/><attr format="dimension" name="shadowWidth"/><attr format="boolean" name="fadeEnabled"/><attr format="float" name="fadeDegree"/><attr format="boolean" name="selectorEnabled"/><attr format="reference" name="selectorDrawable"/></declare-styleable></file></source></dataSet><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\src\androidTest\res"/><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\generated\res\rs\androidTest\debug"/><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\generated\res\generated\androidTest\debug"/></dataSet><mergedItems><configuration qualifiers=""><declare-styleable name="SlidingMenu"><attr name="mode"><enum name="left" value="0"/><enum name="right" value="1"/></attr><attr format="reference" name="viewAbove"/><attr format="reference" name="viewBehind"/><attr format="dimension" name="behindOffset"/><attr format="dimension" name="behindWidth"/><attr format="float" name="behindScrollScale"/><attr name="touchModeAbove"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr name="touchModeBehind"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr format="reference" name="shadowDrawable"/><attr format="dimension" name="shadowWidth"/><attr format="boolean" name="fadeEnabled"/><attr format="float" name="fadeDegree"/><attr format="boolean" name="selectorEnabled"/><attr format="reference" name="selectorDrawable"/></declare-styleable></configuration></mergedItems></merger>
\ No newline at end of file
Index: SlidingMeunlibrary/build/generated/source/r/release/com/jeremyfeinstein/slidingmenu/lib/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/generated/source/r/release/com/jeremyfeinstein/slidingmenu/lib/R.java	(revision )
+++ SlidingMeunlibrary/build/generated/source/r/release/com/jeremyfeinstein/slidingmenu/lib/R.java	(revision )
@@ -0,0 +1,379 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+
+package com.jeremyfeinstein.slidingmenu.lib;
+
+public final class R {
+    public static final class attr {
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int behindOffset=0x7f010003;
+        /** <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int behindScrollScale=0x7f010005;
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int behindWidth=0x7f010004;
+        /** <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int fadeDegree=0x7f01000b;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int fadeEnabled=0x7f01000a;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>left</code></td><td>0</td><td></td></tr>
+<tr><td><code>right</code></td><td>1</td><td></td></tr>
+</table>
+         */
+        public static int mode=0x7f010000;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int selectorDrawable=0x7f01000d;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int selectorEnabled=0x7f01000c;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int shadowDrawable=0x7f010008;
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int shadowWidth=0x7f010009;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+         */
+        public static int touchModeAbove=0x7f010006;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+         */
+        public static int touchModeBehind=0x7f010007;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int viewAbove=0x7f010001;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int viewBehind=0x7f010002;
+    }
+    public static final class id {
+        public static int fullscreen=0x7f030003;
+        public static int left=0x7f030001;
+        public static int margin=0x7f030004;
+        public static int none=0x7f030005;
+        public static int right=0x7f030002;
+        public static int selected_view=0x7f030000;
+        public static int slidingmenumain=0x7f030006;
+    }
+    public static final class layout {
+        public static int slidingmenumain=0x7f020000;
+    }
+    public static final class styleable {
+        /** Attributes that can be used with a SlidingMenu.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #SlidingMenu_behindOffset com.jeremyfeinstein.slidingmenu.lib:behindOffset}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_behindScrollScale com.jeremyfeinstein.slidingmenu.lib:behindScrollScale}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_behindWidth com.jeremyfeinstein.slidingmenu.lib:behindWidth}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_fadeDegree com.jeremyfeinstein.slidingmenu.lib:fadeDegree}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_fadeEnabled com.jeremyfeinstein.slidingmenu.lib:fadeEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_mode com.jeremyfeinstein.slidingmenu.lib:mode}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_selectorDrawable com.jeremyfeinstein.slidingmenu.lib:selectorDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_selectorEnabled com.jeremyfeinstein.slidingmenu.lib:selectorEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_shadowDrawable com.jeremyfeinstein.slidingmenu.lib:shadowDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_shadowWidth com.jeremyfeinstein.slidingmenu.lib:shadowWidth}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_touchModeAbove com.jeremyfeinstein.slidingmenu.lib:touchModeAbove}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_touchModeBehind com.jeremyfeinstein.slidingmenu.lib:touchModeBehind}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_viewAbove com.jeremyfeinstein.slidingmenu.lib:viewAbove}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_viewBehind com.jeremyfeinstein.slidingmenu.lib:viewBehind}</code></td><td></td></tr>
+           </table>
+           @see #SlidingMenu_behindOffset
+           @see #SlidingMenu_behindScrollScale
+           @see #SlidingMenu_behindWidth
+           @see #SlidingMenu_fadeDegree
+           @see #SlidingMenu_fadeEnabled
+           @see #SlidingMenu_mode
+           @see #SlidingMenu_selectorDrawable
+           @see #SlidingMenu_selectorEnabled
+           @see #SlidingMenu_shadowDrawable
+           @see #SlidingMenu_shadowWidth
+           @see #SlidingMenu_touchModeAbove
+           @see #SlidingMenu_touchModeBehind
+           @see #SlidingMenu_viewAbove
+           @see #SlidingMenu_viewBehind
+         */
+        public static final int[] SlidingMenu = {
+            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
+            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
+            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
+            0x7f01000c, 0x7f01000d
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#behindOffset}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:behindOffset
+        */
+        public static int SlidingMenu_behindOffset = 3;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#behindScrollScale}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:behindScrollScale
+        */
+        public static int SlidingMenu_behindScrollScale = 5;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#behindWidth}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:behindWidth
+        */
+        public static int SlidingMenu_behindWidth = 4;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#fadeDegree}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:fadeDegree
+        */
+        public static int SlidingMenu_fadeDegree = 11;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#fadeEnabled}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:fadeEnabled
+        */
+        public static int SlidingMenu_fadeEnabled = 10;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#mode}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>left</code></td><td>0</td><td></td></tr>
+<tr><td><code>right</code></td><td>1</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib:mode
+        */
+        public static int SlidingMenu_mode = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#selectorDrawable}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:selectorDrawable
+        */
+        public static int SlidingMenu_selectorDrawable = 13;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#selectorEnabled}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:selectorEnabled
+        */
+        public static int SlidingMenu_selectorEnabled = 12;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#shadowDrawable}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:shadowDrawable
+        */
+        public static int SlidingMenu_shadowDrawable = 8;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#shadowWidth}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:shadowWidth
+        */
+        public static int SlidingMenu_shadowWidth = 9;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#touchModeAbove}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib:touchModeAbove
+        */
+        public static int SlidingMenu_touchModeAbove = 6;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#touchModeBehind}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib:touchModeBehind
+        */
+        public static int SlidingMenu_touchModeBehind = 7;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#viewAbove}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:viewAbove
+        */
+        public static int SlidingMenu_viewAbove = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#viewBehind}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:viewBehind
+        */
+        public static int SlidingMenu_viewBehind = 2;
+    };
+}
Index: PullToRefreshLibrary/build/generated/source/buildConfig/androidTest/debug/com/handmark/pulltorefresh/library/test/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/generated/source/buildConfig/androidTest/debug/com/handmark/pulltorefresh/library/test/BuildConfig.java	(revision )
+++ PullToRefreshLibrary/build/generated/source/buildConfig/androidTest/debug/com/handmark/pulltorefresh/library/test/BuildConfig.java	(revision )
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.handmark.pulltorefresh.library.test;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String APPLICATION_ID = "com.handmark.pulltorefresh.library.test";
+  public static final String BUILD_TYPE = "debug";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = -1;
+  public static final String VERSION_NAME = "";
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fi/values-fi.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fi/values-fi.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fi/values-fi.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-fi/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_from_bottom_pull_label">Päivitä vetämällä ylös…</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_pull_label">Päivitä vetämällä alas…</string>
+    <string name="pull_to_refresh_refreshing_label">Päivitetään…</string>
+    <string name="pull_to_refresh_release_label">Päivitä vapauttamalla…</string>
+</resources>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision )
+++ app/build.gradle	(revision )
@@ -0,0 +1,35 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
+    defaultConfig {
+        applicationId "zhu.com.sortingdata"
+        minSdkVersion 15
+        targetSdkVersion 25
+        versionCode 1
+        versionName "1.0"
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
+        exclude group: 'com.android.support', module: 'support-annotations'
+    })
+    compile 'com.android.support:appcompat-v7:25.2.0'
+    compile 'com.android.support:design:25.2.0'
+    testCompile 'junit:junit:4.12'
+    compile project(':SlidingMeunlibrary')
+    compile project(':PullToRefreshLibrary')
+    compile files('libs/universal-image-loader-1.9.5.jar')
+    compile project(':cropperimagelibrary')
+    compile project(':ultrapulltorefreshlibrary')
+}
Index: PullToRefreshLibrary/build/generated/source/buildConfig/release/com/handmark/pulltorefresh/library/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/generated/source/buildConfig/release/com/handmark/pulltorefresh/library/BuildConfig.java	(revision )
+++ PullToRefreshLibrary/build/generated/source/buildConfig/release/com/handmark/pulltorefresh/library/BuildConfig.java	(revision )
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.handmark.pulltorefresh.library;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = false;
+  public static final String APPLICATION_ID = "com.handmark.pulltorefresh.library";
+  public static final String BUILD_TYPE = "release";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = 2110;
+  public static final String VERSION_NAME = "";
+}
Index: PullToRefreshLibrary/src/main/res/values-de/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-de/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-de/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Ziehen zum Aktualisieren…</string>
+  <string name="pull_to_refresh_release_label">Loslassen zum Aktualisieren…</string>
+  <string name="pull_to_refresh_refreshing_label">Laden…</string>
+</resources>
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrClassicDefaultHeader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrClassicDefaultHeader.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrClassicDefaultHeader.java	(revision )
@@ -0,0 +1,304 @@
+package in.srain.cube.views.ptr;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.res.TypedArray;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.animation.LinearInterpolator;
+import android.view.animation.RotateAnimation;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import com.zhu.ultrapulltorefreshlibrary.R;
+
+import in.srain.cube.views.ptr.indicator.PtrIndicator;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class PtrClassicDefaultHeader extends FrameLayout implements PtrUIHandler {
+
+    private final static String KEY_SharedPreferences = "cube_ptr_classic_last_update";
+    private static SimpleDateFormat sDataFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+    private int mRotateAniTime = 150;
+    private RotateAnimation mFlipAnimation;
+    private RotateAnimation mReverseFlipAnimation;
+    private TextView mTitleTextView;
+    private View mRotateView;
+    private View mProgressBar;
+    private long mLastUpdateTime = -1;
+    private TextView mLastUpdateTextView;
+    private String mLastUpdateTimeKey;
+    private boolean mShouldShowLastUpdate;
+
+    private LastUpdateTimeUpdater mLastUpdateTimeUpdater = new LastUpdateTimeUpdater();
+
+    public PtrClassicDefaultHeader(Context context) {
+        super(context);
+        initViews(null);
+    }
+
+    public PtrClassicDefaultHeader(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initViews(attrs);
+    }
+
+    public PtrClassicDefaultHeader(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        initViews(attrs);
+    }
+
+    protected void initViews(AttributeSet attrs) {
+        TypedArray arr = getContext().obtainStyledAttributes(attrs, R.styleable.PtrClassicHeader, 0, 0);
+        if (arr != null) {
+            mRotateAniTime = arr.getInt(R.styleable.PtrClassicHeader_ptr_rotate_ani_time, mRotateAniTime);
+        }
+        buildAnimation();
+        View header = LayoutInflater.from(getContext()).inflate(R.layout.cube_ptr_classic_default_header, this);
+
+        mRotateView = header.findViewById(R.id.ptr_classic_header_rotate_view);
+
+        mTitleTextView = (TextView) header.findViewById(R.id.ptr_classic_header_rotate_view_header_title);
+        mLastUpdateTextView = (TextView) header.findViewById(R.id.ptr_classic_header_rotate_view_header_last_update);
+        mProgressBar = header.findViewById(R.id.ptr_classic_header_rotate_view_progressbar);
+
+        resetView();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (mLastUpdateTimeUpdater != null) {
+            mLastUpdateTimeUpdater.stop();
+        }
+    }
+
+    public void setRotateAniTime(int time) {
+        if (time == mRotateAniTime || time == 0) {
+            return;
+        }
+        mRotateAniTime = time;
+        buildAnimation();
+    }
+
+    /**
+     * Specify the last update time by this key string
+     *
+     * @param key
+     */
+    public void setLastUpdateTimeKey(String key) {
+        if (TextUtils.isEmpty(key)) {
+            return;
+        }
+        mLastUpdateTimeKey = key;
+    }
+
+    /**
+     * Using an object to specify the last update time.
+     *
+     * @param object
+     */
+    public void setLastUpdateTimeRelateObject(Object object) {
+        setLastUpdateTimeKey(object.getClass().getName());
+    }
+
+    private void buildAnimation() {
+        mFlipAnimation = new RotateAnimation(0, -180, RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);
+        mFlipAnimation.setInterpolator(new LinearInterpolator());
+        mFlipAnimation.setDuration(mRotateAniTime);
+        mFlipAnimation.setFillAfter(true);
+
+        mReverseFlipAnimation = new RotateAnimation(-180, 0, RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);
+        mReverseFlipAnimation.setInterpolator(new LinearInterpolator());
+        mReverseFlipAnimation.setDuration(mRotateAniTime);
+        mReverseFlipAnimation.setFillAfter(true);
+    }
+
+    private void resetView() {
+        hideRotateView();
+        mProgressBar.setVisibility(INVISIBLE);
+    }
+
+    private void hideRotateView() {
+        mRotateView.clearAnimation();
+        mRotateView.setVisibility(INVISIBLE);
+    }
+
+    @Override
+    public void onUIReset(PtrFrameLayout frame) {
+        resetView();
+        mShouldShowLastUpdate = true;
+        tryUpdateLastUpdateTime();
+    }
+
+    @Override
+    public void onUIRefreshPrepare(PtrFrameLayout frame) {
+
+        mShouldShowLastUpdate = true;
+        tryUpdateLastUpdateTime();
+        mLastUpdateTimeUpdater.start();
+
+        mProgressBar.setVisibility(INVISIBLE);
+
+        mRotateView.setVisibility(VISIBLE);
+        mTitleTextView.setVisibility(VISIBLE);
+        if (frame.isPullToRefresh()) {
+            mTitleTextView.setText(getResources().getString(R.string.cube_ptr_pull_down_to_refresh));
+        } else {
+            mTitleTextView.setText(getResources().getString(R.string.cube_ptr_pull_down));
+        }
+    }
+
+    @Override
+    public void onUIRefreshBegin(PtrFrameLayout frame) {
+        mShouldShowLastUpdate = false;
+        hideRotateView();
+        mProgressBar.setVisibility(VISIBLE);
+        mTitleTextView.setVisibility(VISIBLE);
+        mTitleTextView.setText(R.string.cube_ptr_refreshing);
+
+        tryUpdateLastUpdateTime();
+        mLastUpdateTimeUpdater.stop();
+    }
+
+    @Override
+    public void onUIRefreshComplete(PtrFrameLayout frame) {
+
+        hideRotateView();
+        mProgressBar.setVisibility(INVISIBLE);
+
+        mTitleTextView.setVisibility(VISIBLE);
+        mTitleTextView.setText(getResources().getString(R.string.cube_ptr_refresh_complete));
+
+        // update last update time
+        SharedPreferences sharedPreferences = getContext().getSharedPreferences(KEY_SharedPreferences, 0);
+        if (!TextUtils.isEmpty(mLastUpdateTimeKey)) {
+            mLastUpdateTime = new Date().getTime();
+            sharedPreferences.edit().putLong(mLastUpdateTimeKey, mLastUpdateTime).commit();
+        }
+    }
+
+    private void tryUpdateLastUpdateTime() {
+        if (TextUtils.isEmpty(mLastUpdateTimeKey) || !mShouldShowLastUpdate) {
+            mLastUpdateTextView.setVisibility(GONE);
+        } else {
+            String time = getLastUpdateTime();
+            if (TextUtils.isEmpty(time)) {
+                mLastUpdateTextView.setVisibility(GONE);
+            } else {
+                mLastUpdateTextView.setVisibility(VISIBLE);
+                mLastUpdateTextView.setText(time);
+            }
+        }
+    }
+
+    private String getLastUpdateTime() {
+
+        if (mLastUpdateTime == -1 && !TextUtils.isEmpty(mLastUpdateTimeKey)) {
+            mLastUpdateTime = getContext().getSharedPreferences(KEY_SharedPreferences, 0).getLong(mLastUpdateTimeKey, -1);
+        }
+        if (mLastUpdateTime == -1) {
+            return null;
+        }
+        long diffTime = new Date().getTime() - mLastUpdateTime;
+        int seconds = (int) (diffTime / 1000);
+        if (diffTime < 0) {
+            return null;
+        }
+        if (seconds <= 0) {
+            return null;
+        }
+        StringBuilder sb = new StringBuilder();
+        sb.append(getContext().getString(R.string.cube_ptr_last_update));
+
+        if (seconds < 60) {
+            sb.append(seconds + getContext().getString(R.string.cube_ptr_seconds_ago));
+        } else {
+            int minutes = (seconds / 60);
+            if (minutes > 60) {
+                int hours = minutes / 60;
+                if (hours > 24) {
+                    Date date = new Date(mLastUpdateTime);
+                    sb.append(sDataFormat.format(date));
+                } else {
+                    sb.append(hours + getContext().getString(R.string.cube_ptr_hours_ago));
+                }
+
+            } else {
+                sb.append(minutes + getContext().getString(R.string.cube_ptr_minutes_ago));
+            }
+        }
+        return sb.toString();
+    }
+
+    @Override
+    public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator) {
+
+        final int mOffsetToRefresh = frame.getOffsetToRefresh();
+        final int currentPos = ptrIndicator.getCurrentPosY();
+        final int lastPos = ptrIndicator.getLastPosY();
+
+        if (currentPos < mOffsetToRefresh && lastPos >= mOffsetToRefresh) {
+            if (isUnderTouch && status == PtrFrameLayout.PTR_STATUS_PREPARE) {
+                crossRotateLineFromBottomUnderTouch(frame);
+                if (mRotateView != null) {
+                    mRotateView.clearAnimation();
+                    mRotateView.startAnimation(mReverseFlipAnimation);
+                }
+            }
+        } else if (currentPos > mOffsetToRefresh && lastPos <= mOffsetToRefresh) {
+            if (isUnderTouch && status == PtrFrameLayout.PTR_STATUS_PREPARE) {
+                crossRotateLineFromTopUnderTouch(frame);
+                if (mRotateView != null) {
+                    mRotateView.clearAnimation();
+                    mRotateView.startAnimation(mFlipAnimation);
+                }
+            }
+        }
+    }
+
+    private void crossRotateLineFromTopUnderTouch(PtrFrameLayout frame) {
+        if (!frame.isPullToRefresh()) {
+            mTitleTextView.setVisibility(VISIBLE);
+            mTitleTextView.setText(R.string.cube_ptr_release_to_refresh);
+        }
+    }
+
+    private void crossRotateLineFromBottomUnderTouch(PtrFrameLayout frame) {
+        mTitleTextView.setVisibility(VISIBLE);
+        if (frame.isPullToRefresh()) {
+            mTitleTextView.setText(getResources().getString(R.string.cube_ptr_pull_down_to_refresh));
+        } else {
+            mTitleTextView.setText(getResources().getString(R.string.cube_ptr_pull_down));
+        }
+    }
+
+    private class LastUpdateTimeUpdater implements Runnable {
+
+        private boolean mRunning = false;
+
+        private void start() {
+            if (TextUtils.isEmpty(mLastUpdateTimeKey)) {
+                return;
+            }
+            mRunning = true;
+            run();
+        }
+
+        private void stop() {
+            mRunning = false;
+            removeCallbacks(this);
+        }
+
+        @Override
+        public void run() {
+            tryUpdateLastUpdateTime();
+            if (mRunning) {
+                postDelayed(this, 1000);
+            }
+        }
+    }
+}
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrDefaultHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrDefaultHandler.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrDefaultHandler.java	(revision )
@@ -0,0 +1,39 @@
+package in.srain.cube.views.ptr;
+
+import android.view.View;
+import android.widget.AbsListView;
+
+public abstract class PtrDefaultHandler implements PtrHandler {
+
+    public static boolean canChildScrollUp(View view) {
+        if (android.os.Build.VERSION.SDK_INT < 14) {
+            if (view instanceof AbsListView) {
+                final AbsListView absListView = (AbsListView) view;
+                return absListView.getChildCount() > 0
+                        && (absListView.getFirstVisiblePosition() > 0 || absListView.getChildAt(0)
+                        .getTop() < absListView.getPaddingTop());
+            } else {
+                return view.getScrollY() > 0;
+            }
+        } else {
+            return view.canScrollVertically(-1);
+        }
+    }
+
+    /**
+     * Default implement for check can perform pull to refresh
+     *
+     * @param frame
+     * @param content
+     * @param header
+     * @return
+     */
+    public static boolean checkContentCanBePulledDown(PtrFrameLayout frame, View content, View header) {
+        return !canChildScrollUp(content);
+    }
+
+    @Override
+    public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header) {
+        return checkContentCanBePulledDown(frame, content, header);
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_tab01.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_tab01.xml	(revision )
+++ app/src/main/res/layout/fragment_tab01.xml	(revision )
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/bg_color"
+    android:orientation="vertical" >
+
+    <com.handmark.pulltorefresh.library.PullToRefreshScrollView
+        xmlns:ptr="http://schemas.android.com/apk/res-auto"
+        android:id="@+id/ptr_scroll"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        ptr:ptrAnimationStyle="rotate"
+        ptr:ptrHeaderTextColor="@color/black"
+        ptr:ptrMode="both" >
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical" >
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="1、图片轮播"
+                android:textColor="@color/black" />
+
+            <zhu.com.sortingdata.imagecycle.ImageCycleView
+                android:id="@+id/imageCycle_View"
+                android:layout_width="match_parent"
+                android:layout_height="200dp" >
+            </zhu.com.sortingdata.imagecycle.ImageCycleView>
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="2、加载网络图片"
+                android:textColor="@color/black" />
+
+            <ImageView
+                android:id="@+id/iv_net_display"
+                android:layout_width="250dp"
+                android:layout_height="150dp"
+                android:src="@drawable/ic_launcher" />
+
+            <ImageView
+                android:id="@+id/iv_net_display01"
+                android:layout_width="250dp"
+                android:layout_height="150dp"
+                android:src="@drawable/ic_launcher" />
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="3、加载本地图片"
+                android:textColor="@color/black" />
+
+            <ImageView
+                android:id="@+id/iv_net_display02"
+                android:layout_width="250dp"
+                android:layout_height="150dp"
+                android:src="@drawable/ic_launcher" />
+
+            <ImageView
+                android:id="@+id/iv_net_display03"
+                android:layout_width="250dp"
+                android:layout_height="150dp"
+                android:src="@drawable/ic_launcher" />
+        </LinearLayout>
+    </com.handmark.pulltorefresh.library.PullToRefreshScrollView>
+
+</LinearLayout>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-ko/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-ko/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-ko/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">당겨서 새로 고침…</string>
+  <string name="pull_to_refresh_release_label">놓아서 새로 고침…</string>
+  <string name="pull_to_refresh_refreshing_label">로드 중…</string>
+</resources>
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_in_from_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_in_from_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_in_from_top.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="-100%p"
+    android:toYDelta="0" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_in_from_top.xml -->
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/debug/merger.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/debug/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\assets"/></dataSet><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\src\debug\assets"/></dataSet></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-zh/values-zh.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-zh/values-zh.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-zh/values-zh.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-zh/values-zh.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">下拉刷新…</string>
+    <string name="pull_to_refresh_refreshing_label">正在载入…</string>
+    <string name="pull_to_refresh_release_label">放开以刷新…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_top.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="@dimen/indicator_corner_radius"
+        android:bottomRightRadius="@dimen/indicator_corner_radius"
+        android:radius="1dp"
+        android:topLeftRadius="0dp"
+        android:topRightRadius="0dp" />
+
+</shape><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/drawable/indicator_bg_top.xml -->
\ No newline at end of file
Index: SlidingMeunlibrary/res/layout/slidingmenumain.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/res/layout/slidingmenumain.xml	(revision )
+++ SlidingMeunlibrary/res/layout/slidingmenumain.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.jeremyfeinstein.slidingmenu.lib.SlidingMenu xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/slidingmenumain"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" />
\ No newline at end of file
Index: cropperimagelibrary/src/androidTest/java/com/edmodo/cropper/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/androidTest/java/com/edmodo/cropper/ExampleInstrumentedTest.java	(revision )
+++ cropperimagelibrary/src/androidTest/java/com/edmodo/cropper/ExampleInstrumentedTest.java	(revision )
@@ -0,0 +1,26 @@
+package com.edmodo.cropper;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumentation test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.edmodo.cropper.test", appContext.getPackageName());
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fr/values-fr.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fr/values-fr.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fr/values-fr.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-fr/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tirez pour rafraîchir…</string>
+    <string name="pull_to_refresh_refreshing_label">Chargement…</string>
+    <string name="pull_to_refresh_release_label">Relâcher pour rafraîchir…</string>
+</resources>
\ No newline at end of file
Index: app/src/main/java/zhu/com/sortingdata/imagecycle/ImageCycleInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/imagecycle/ImageCycleInfo.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/imagecycle/ImageCycleInfo.java	(revision )
@@ -0,0 +1,47 @@
+package zhu.com.sortingdata.imagecycle;
+
+/**
+ * 轮播图片对象
+ * @author Administrator
+ *
+ */
+public class ImageCycleInfo {
+
+	String id = "";// id
+	Integer img = 0 ;// 本地图片id
+	String content = "";// 内容
+	String type = "";// 类型
+	Object imgPath = "" ;// 图片路径
+
+	public Object getImgPath() {
+		return imgPath;
+	}
+	public void setImgPath(Object imgPath) {
+		this.imgPath = imgPath;
+	}
+	public String getId() {
+		return id;
+	}
+	public void setId(String id) {
+		this.id = id;
+	}
+	public String getContent() {
+		return content;
+	}
+	public Integer getImg() {
+		return img;
+	}
+	public void setImg(Integer img) {
+		this.img = img;
+	}
+	public void setContent(String content) {
+		this.content = content;
+	}
+	public String getType() {
+		return type;
+	}
+	public void setType(String type) {
+		this.type = type;
+	}
+
+}
Index: app/src/main/res/layout/custom_bar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/custom_bar.xml	(revision )
+++ app/src/main/res/layout/custom_bar.xml	(revision )
@@ -0,0 +1,77 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/custom_bar_layout"
+    android:layout_width="match_parent"
+    android:background="@color/black"
+    android:layout_height="60dp"
+    android:orientation="horizontal" >
+
+    <LinearLayout
+        android:id="@+id/custom_bar_home"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <ImageView
+            android:id="@+id/home_image"
+            android:layout_width="30dp"
+            android:layout_height="30dp"
+            android:layout_marginTop="4dp"
+            android:src="@drawable/icon_star_01" />
+
+        <TextView
+            android:id="@+id/home_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="4dp"
+            android:text="@string/custom_bar_home" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/custom_bar_antenna"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <ImageView
+            android:id="@+id/antenna_image"
+            android:layout_width="30dp"
+            android:layout_height="30dp"
+            android:layout_marginTop="4dp"
+            android:src="@drawable/icon_star_01" />
+
+        <TextView
+            android:id="@+id/antenna_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="4dp"
+            android:text="@string/custom_bar_body" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/custom_bar_stting"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center"
+        android:orientation="vertical" >
+
+        <ImageView
+            android:id="@+id/stting_image"
+            android:layout_width="30dp"
+            android:layout_height="30dp"
+            android:layout_marginTop="4dp"
+            android:src="@drawable/icon_star_01" />
+
+        <TextView
+            android:id="@+id/stting_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="4dp"
+            android:text="@string/custom_bar_setting" />
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivityHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivityHelper.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivityHelper.java	(revision )
@@ -0,0 +1,219 @@
+package com.jeremyfeinstein.slidingmenu.lib.app;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.os.Handler;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+
+import com.jeremyfeinstein.slidingmenu.lib.R;
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
+
+public class SlidingActivityHelper {
+
+	private Activity mActivity;
+
+	private SlidingMenu mSlidingMenu;
+
+	private View mViewAbove;
+
+	private View mViewBehind;
+
+	private boolean mBroadcasting = false;
+
+	private boolean mOnPostCreateCalled = false;
+
+	private boolean mEnableSlide = true;
+
+	/**
+	 * Instantiates a new SlidingActivityHelper.
+	 *
+	 * @param activity the associated activity
+	 */
+	public SlidingActivityHelper(Activity activity) {
+		mActivity = activity;
+	}
+
+	/**
+	 * Sets mSlidingMenu as a newly inflated SlidingMenu. Should be called within the activitiy's onCreate()
+	 *
+	 * @param savedInstanceState the saved instance state (unused)
+	 */
+	public void onCreate(Bundle savedInstanceState) {
+		mSlidingMenu = (SlidingMenu) LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain, null);
+	}
+
+	/**
+	 * Further SlidingMenu initialization. Should be called within the activitiy's onPostCreate()
+	 *
+	 * @param savedInstanceState the saved instance state (unused)
+	 */
+	public void onPostCreate(Bundle savedInstanceState) {
+		if (mViewBehind == null || mViewAbove == null) {
+			throw new IllegalStateException("Both setBehindContentView must be called " +
+					"in onCreate in addition to setContentView.");
+		}
+
+		mOnPostCreateCalled = true;
+
+		mSlidingMenu.attachToActivity(mActivity, 
+				mEnableSlide ? SlidingMenu.SLIDING_WINDOW : SlidingMenu.SLIDING_CONTENT);
+		
+		final boolean open;
+		final boolean secondary;
+		if (savedInstanceState != null) {
+			open = savedInstanceState.getBoolean("SlidingActivityHelper.open");
+			secondary = savedInstanceState.getBoolean("SlidingActivityHelper.secondary");
+		} else {
+			open = false;
+			secondary = false;
+		}
+		new Handler().post(new Runnable() {
+			public void run() {
+				if (open) {
+					if (secondary) {
+						mSlidingMenu.showSecondaryMenu(false);
+					} else {
+						mSlidingMenu.showMenu(false);
+					}
+				} else {
+					mSlidingMenu.showContent(false);					
+				}
+			}
+		});
+	}
+
+	/**
+	 * Controls whether the ActionBar slides along with the above view when the menu is opened,
+	 * or if it stays in place.
+	 *
+	 * @param slidingActionBarEnabled True if you want the ActionBar to slide along with the SlidingMenu,
+	 * false if you want the ActionBar to stay in place
+	 */
+	public void setSlidingActionBarEnabled(boolean slidingActionBarEnabled) {
+		if (mOnPostCreateCalled)
+			throw new IllegalStateException("enableSlidingActionBar must be called in onCreate.");
+		mEnableSlide = slidingActionBarEnabled;
+	}
+
+	/**
+	 * Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle).
+	 * 
+	 * @param id the resource id of the desired view
+	 * @return The view if found or null otherwise.
+	 */
+	public View findViewById(int id) {
+		View v;
+		if (mSlidingMenu != null) {
+			v = mSlidingMenu.findViewById(id);
+			if (v != null)
+				return v;
+		}
+		return null;
+	}
+
+	/**
+	 * Called to retrieve per-instance state from an activity before being killed so that the state can be
+	 * restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method
+	 * will be passed to both). 
+	 *
+	 * @param outState Bundle in which to place your saved state.
+	 */
+	public void onSaveInstanceState(Bundle outState) {
+		outState.putBoolean("SlidingActivityHelper.open", mSlidingMenu.isMenuShowing());
+		outState.putBoolean("SlidingActivityHelper.secondary", mSlidingMenu.isSecondaryMenuShowing());
+	}
+
+	/**
+	 * Register the above content view.
+	 *
+	 * @param v the above content view to register
+	 * @param params LayoutParams for that view (unused)
+	 */
+	public void registerAboveContentView(View v, LayoutParams params) {
+		if (!mBroadcasting)
+			mViewAbove = v;
+	}
+
+	/**
+	 * Set the activity content to an explicit view. This view is placed directly into the activity's view
+	 * hierarchy. It can itself be a complex view hierarchy. When calling this method, the layout parameters
+	 * of the specified view are ignored. Both the width and the height of the view are set by default to
+	 * MATCH_PARENT. To use your own layout parameters, invoke setContentView(android.view.View,
+	 * android.view.ViewGroup.LayoutParams) instead.
+	 *
+	 * @param v The desired content to display.
+	 */
+	public void setContentView(View v) {
+		mBroadcasting = true;
+		mActivity.setContentView(v);
+	}
+
+	/**
+	 * Set the behind view content to an explicit view. This view is placed directly into the behind view 's view hierarchy.
+	 * It can itself be a complex view hierarchy.
+	 *
+	 * @param view The desired content to display.
+	 * @param layoutParams Layout parameters for the view. (unused)
+	 */
+	public void setBehindContentView(View view, LayoutParams layoutParams) {
+		mViewBehind = view;
+		mSlidingMenu.setMenu(mViewBehind);
+	}
+
+	/**
+	 * Gets the SlidingMenu associated with this activity.
+	 *
+	 * @return the SlidingMenu associated with this activity.
+	 */
+	public SlidingMenu getSlidingMenu() {
+		return mSlidingMenu;
+	}
+
+	/**
+	 * Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.
+	 */
+	public void toggle() {
+		mSlidingMenu.toggle();
+	}
+
+	/**
+	 * Close the SlidingMenu and show the content view.
+	 */
+	public void showContent() {
+		mSlidingMenu.showContent();
+	}
+
+	/**
+	 * Open the SlidingMenu and show the menu view.
+	 */
+	public void showMenu() {
+		mSlidingMenu.showMenu();
+	}
+
+	/**
+	 * Open the SlidingMenu and show the secondary menu view. Will default to the regular menu
+	 * if there is only one.
+	 */
+	public void showSecondaryMenu() {
+		mSlidingMenu.showSecondaryMenu();
+	}
+
+	/**
+	 * On key up.
+	 *
+	 * @param keyCode the key code
+	 * @param event the event
+	 * @return true, if successful
+	 */
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {
+			showContent();
+			return true;
+		}
+		return false;
+	}
+
+}
Index: PullToRefreshLibrary/src/main/res/anim/slide_out_to_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/anim/slide_out_to_bottom.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/anim/slide_out_to_bottom.xml	(revision )
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="100%p" />
Index: PullToRefreshLibrary/build/intermediates/symbols/androidTest/debug/R.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/symbols/androidTest/debug/R.txt	(revision )
+++ PullToRefreshLibrary/build/intermediates/symbols/androidTest/debug/R.txt	(revision )
@@ -0,0 +1,78 @@
+int anim slide_in_from_bottom 0x7f040000
+int anim slide_in_from_top 0x7f040001
+int anim slide_out_to_bottom 0x7f040002
+int anim slide_out_to_top 0x7f040003
+int attr ptrAdapterViewBackground 0x7f010010
+int attr ptrAnimationStyle 0x7f01000c
+int attr ptrDrawable 0x7f010006
+int attr ptrDrawableBottom 0x7f010012
+int attr ptrDrawableEnd 0x7f010008
+int attr ptrDrawableStart 0x7f010007
+int attr ptrDrawableTop 0x7f010011
+int attr ptrHeaderBackground 0x7f010001
+int attr ptrHeaderSubTextColor 0x7f010003
+int attr ptrHeaderTextAppearance 0x7f01000a
+int attr ptrHeaderTextColor 0x7f010002
+int attr ptrListViewExtrasEnabled 0x7f01000e
+int attr ptrMode 0x7f010004
+int attr ptrOverScroll 0x7f010009
+int attr ptrRefreshableViewBackground 0x7f010000
+int attr ptrRotateDrawableWhilePulling 0x7f01000f
+int attr ptrScrollingWhileRefreshingEnabled 0x7f01000d
+int attr ptrShowIndicator 0x7f010005
+int attr ptrSubHeaderTextAppearance 0x7f01000b
+int dimen header_footer_left_right_padding 0x7f060000
+int dimen header_footer_top_bottom_padding 0x7f060001
+int dimen indicator_corner_radius 0x7f060002
+int dimen indicator_internal_padding 0x7f060003
+int dimen indicator_right_padding 0x7f060004
+int drawable default_ptr_flip 0x7f020000
+int drawable default_ptr_rotate 0x7f020001
+int drawable indicator_arrow 0x7f020002
+int drawable indicator_bg_bottom 0x7f020003
+int drawable indicator_bg_top 0x7f020004
+int id both 0x7f070003
+int id disabled 0x7f070004
+int id fl_inner 0x7f07000c
+int id flip 0x7f07000a
+int id gridview 0x7f070000
+int id manualOnly 0x7f070005
+int id pullDownFromTop 0x7f070006
+int id pullFromEnd 0x7f070007
+int id pullFromStart 0x7f070008
+int id pullUpFromBottom 0x7f070009
+int id pull_to_refresh_image 0x7f07000d
+int id pull_to_refresh_progress 0x7f07000e
+int id pull_to_refresh_sub_text 0x7f070010
+int id pull_to_refresh_text 0x7f07000f
+int id rotate 0x7f07000b
+int id scrollview 0x7f070001
+int id webview 0x7f070002
+int layout pull_to_refresh_header_horizontal 0x7f030000
+int layout pull_to_refresh_header_vertical 0x7f030001
+int string pull_to_refresh_from_bottom_pull_label 0x7f050003
+int string pull_to_refresh_from_bottom_refreshing_label 0x7f050004
+int string pull_to_refresh_from_bottom_release_label 0x7f050005
+int string pull_to_refresh_pull_label 0x7f050000
+int string pull_to_refresh_refreshing_label 0x7f050001
+int string pull_to_refresh_release_label 0x7f050002
+int[] styleable PullToRefresh { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f, 0x7f010010, 0x7f010011, 0x7f010012 }
+int styleable PullToRefresh_ptrAdapterViewBackground 16
+int styleable PullToRefresh_ptrAnimationStyle 12
+int styleable PullToRefresh_ptrDrawable 6
+int styleable PullToRefresh_ptrDrawableBottom 18
+int styleable PullToRefresh_ptrDrawableEnd 8
+int styleable PullToRefresh_ptrDrawableStart 7
+int styleable PullToRefresh_ptrDrawableTop 17
+int styleable PullToRefresh_ptrHeaderBackground 1
+int styleable PullToRefresh_ptrHeaderSubTextColor 3
+int styleable PullToRefresh_ptrHeaderTextAppearance 10
+int styleable PullToRefresh_ptrHeaderTextColor 2
+int styleable PullToRefresh_ptrListViewExtrasEnabled 14
+int styleable PullToRefresh_ptrMode 4
+int styleable PullToRefresh_ptrOverScroll 9
+int styleable PullToRefresh_ptrRefreshableViewBackground 0
+int styleable PullToRefresh_ptrRotateDrawableWhilePulling 15
+int styleable PullToRefresh_ptrScrollingWhileRefreshingEnabled 13
+int styleable PullToRefresh_ptrShowIndicator 5
+int styleable PullToRefresh_ptrSubHeaderTextAppearance 11
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CustomViewBehind.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CustomViewBehind.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CustomViewBehind.java	(revision )
@@ -0,0 +1,439 @@
+package com.jeremyfeinstein.slidingmenu.lib;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu.CanvasTransformer;
+
+public class CustomViewBehind extends ViewGroup {
+
+	private static final String TAG = "CustomViewBehind";
+
+	private static final int MARGIN_THRESHOLD = 48; // dips
+	private int mTouchMode = SlidingMenu.TOUCHMODE_MARGIN;
+
+	private CustomViewAbove mViewAbove;
+
+	private View mContent;
+	private View mSecondaryContent;
+	private int mMarginThreshold;
+	private int mWidthOffset;
+	private CanvasTransformer mTransformer;
+	private boolean mChildrenEnabled;
+
+	public CustomViewBehind(Context context) {
+		this(context, null);
+	}
+
+	public CustomViewBehind(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		mMarginThreshold = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 
+				MARGIN_THRESHOLD, getResources().getDisplayMetrics());
+	}
+
+	public void setCustomViewAbove(CustomViewAbove customViewAbove) {
+		mViewAbove = customViewAbove;
+	}
+
+	public void setCanvasTransformer(CanvasTransformer t) {
+		mTransformer = t;
+	}
+
+	public void setWidthOffset(int i) {
+		mWidthOffset = i;
+		requestLayout();
+	}
+	
+	public void setMarginThreshold(int marginThreshold) {
+		mMarginThreshold = marginThreshold;
+	}
+	
+	public int getMarginThreshold() {
+		return mMarginThreshold;
+	}
+
+	public int getBehindWidth() {
+		return mContent.getWidth();
+	}
+
+	public void setContent(View v) {
+		if (mContent != null)
+			removeView(mContent);
+		mContent = v;
+		addView(mContent);
+	}
+
+	public View getContent() {
+		return mContent;
+	}
+
+	/**
+	 * Sets the secondary (right) menu for use when setMode is called with SlidingMenu.LEFT_RIGHT.
+	 * @param v the right menu
+	 */
+	public void setSecondaryContent(View v) {
+		if (mSecondaryContent != null)
+			removeView(mSecondaryContent);
+		mSecondaryContent = v;
+		addView(mSecondaryContent);
+	}
+
+	public View getSecondaryContent() {
+		return mSecondaryContent;
+	}
+
+	public void setChildrenEnabled(boolean enabled) {
+		mChildrenEnabled = enabled;
+	}
+
+	@Override
+	public void scrollTo(int x, int y) {
+		super.scrollTo(x, y);
+		if (mTransformer != null)
+			invalidate();
+	}
+
+	@Override
+	public boolean onInterceptTouchEvent(MotionEvent e) {
+		return !mChildrenEnabled;
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent e) {
+		return !mChildrenEnabled;
+	}
+
+	@Override
+	protected void dispatchDraw(Canvas canvas) {
+		if (mTransformer != null) {
+			canvas.save();
+			mTransformer.transformCanvas(canvas, mViewAbove.getPercentOpen());
+			super.dispatchDraw(canvas);
+			canvas.restore();
+		} else
+			super.dispatchDraw(canvas);
+	}
+
+	@Override
+	protected void onLayout(boolean changed, int l, int t, int r, int b) {
+		final int width = r - l;
+		final int height = b - t;
+		mContent.layout(0, 0, width-mWidthOffset, height);
+		if (mSecondaryContent != null)
+			mSecondaryContent.layout(0, 0, width-mWidthOffset, height);
+	}
+
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+		int width = getDefaultSize(0, widthMeasureSpec);
+		int height = getDefaultSize(0, heightMeasureSpec);
+		setMeasuredDimension(width, height);
+		final int contentWidth = getChildMeasureSpec(widthMeasureSpec, 0, width-mWidthOffset);
+		final int contentHeight = getChildMeasureSpec(heightMeasureSpec, 0, height);
+		mContent.measure(contentWidth, contentHeight);
+		if (mSecondaryContent != null)
+			mSecondaryContent.measure(contentWidth, contentHeight);
+	}
+
+	private int mMode;
+	private boolean mFadeEnabled;
+	private final Paint mFadePaint = new Paint();
+	private float mScrollScale;
+	private Drawable mShadowDrawable;
+	private Drawable mSecondaryShadowDrawable;
+	private int mShadowWidth;
+	private float mFadeDegree;
+
+	public void setMode(int mode) {
+		if (mode == SlidingMenu.LEFT || mode == SlidingMenu.RIGHT) {
+			if (mContent != null)
+				mContent.setVisibility(View.VISIBLE);
+			if (mSecondaryContent != null)
+				mSecondaryContent.setVisibility(View.INVISIBLE);
+		}
+		mMode = mode;
+	}
+
+	public int getMode() {
+		return mMode;
+	}
+
+	public void setScrollScale(float scrollScale) {
+		mScrollScale = scrollScale;
+	}
+
+	public float getScrollScale() {
+		return mScrollScale;
+	}
+
+	public void setShadowDrawable(Drawable shadow) {
+		mShadowDrawable = shadow;
+		invalidate();
+	}
+
+	public void setSecondaryShadowDrawable(Drawable shadow) {
+		mSecondaryShadowDrawable = shadow;
+		invalidate();
+	}
+
+	public void setShadowWidth(int width) {
+		mShadowWidth = width;
+		invalidate();
+	}
+
+	public void setFadeEnabled(boolean b) {
+		mFadeEnabled = b;
+	}
+
+	public void setFadeDegree(float degree) {
+		if (degree > 1.0f || degree < 0.0f)
+			throw new IllegalStateException("The BehindFadeDegree must be between 0.0f and 1.0f");
+		mFadeDegree = degree;
+	}
+
+	public int getMenuPage(int page) {
+		page = (page > 1) ? 2 : ((page < 1) ? 0 : page);
+		if (mMode == SlidingMenu.LEFT && page > 1) {
+			return 0;
+		} else if (mMode == SlidingMenu.RIGHT && page < 1) {
+			return 2;
+		} else {
+			return page;
+		}
+	}
+
+	public void scrollBehindTo(View content, int x, int y) {
+		int vis = View.VISIBLE;		
+		if (mMode == SlidingMenu.LEFT) {
+			if (x >= content.getLeft()) vis = View.INVISIBLE;
+			scrollTo((int)((x + getBehindWidth())*mScrollScale), y);
+		} else if (mMode == SlidingMenu.RIGHT) {
+			if (x <= content.getLeft()) vis = View.INVISIBLE;
+			scrollTo((int)(getBehindWidth() - getWidth() + 
+					(x-getBehindWidth())*mScrollScale), y);
+		} else if (mMode == SlidingMenu.LEFT_RIGHT) {
+			mContent.setVisibility(x >= content.getLeft() ? View.INVISIBLE : View.VISIBLE);
+			mSecondaryContent.setVisibility(x <= content.getLeft() ? View.INVISIBLE : View.VISIBLE);
+			vis = x == 0 ? View.INVISIBLE : View.VISIBLE;
+			if (x <= content.getLeft()) {
+				scrollTo((int)((x + getBehindWidth())*mScrollScale), y);				
+			} else {
+				scrollTo((int)(getBehindWidth() - getWidth() + 
+						(x-getBehindWidth())*mScrollScale), y);				
+			}
+		}
+		if (vis == View.INVISIBLE)
+			Log.v(TAG, "behind INVISIBLE");
+		setVisibility(vis);
+	}
+
+	public int getMenuLeft(View content, int page) {
+		if (mMode == SlidingMenu.LEFT) {
+			switch (page) {
+			case 0:
+				return content.getLeft() - getBehindWidth();
+			case 2:
+				return content.getLeft();
+			}
+		} else if (mMode == SlidingMenu.RIGHT) {
+			switch (page) {
+			case 0:
+				return content.getLeft();
+			case 2:
+				return content.getLeft() + getBehindWidth();	
+			}
+		} else if (mMode == SlidingMenu.LEFT_RIGHT) {
+			switch (page) {
+			case 0:
+				return content.getLeft() - getBehindWidth();
+			case 2:
+				return content.getLeft() + getBehindWidth();
+			}
+		}
+		return content.getLeft();
+	}
+
+	public int getAbsLeftBound(View content) {
+		if (mMode == SlidingMenu.LEFT || mMode == SlidingMenu.LEFT_RIGHT) {
+			return content.getLeft() - getBehindWidth();
+		} else if (mMode == SlidingMenu.RIGHT) {
+			return content.getLeft();
+		}
+		return 0;
+	}
+
+	public int getAbsRightBound(View content) {
+		if (mMode == SlidingMenu.LEFT) {
+			return content.getLeft();
+		} else if (mMode == SlidingMenu.RIGHT || mMode == SlidingMenu.LEFT_RIGHT) {
+			return content.getLeft() + getBehindWidth();
+		}
+		return 0;
+	}
+
+	public boolean marginTouchAllowed(View content, int x) {
+		int left = content.getLeft();
+		int right = content.getRight();
+		if (mMode == SlidingMenu.LEFT) {
+			return (x >= left && x <= mMarginThreshold + left);
+		} else if (mMode == SlidingMenu.RIGHT) {
+			return (x <= right && x >= right - mMarginThreshold);
+		} else if (mMode == SlidingMenu.LEFT_RIGHT) {
+			return (x >= left && x <= mMarginThreshold + left) || 
+					(x <= right && x >= right - mMarginThreshold);
+		}
+		return false;
+	}
+
+	public void setTouchMode(int i) {
+		mTouchMode = i;
+	}
+
+	public boolean menuOpenTouchAllowed(View content, int currPage, float x) {
+		switch (mTouchMode) {
+		case SlidingMenu.TOUCHMODE_FULLSCREEN:
+			return true;
+		case SlidingMenu.TOUCHMODE_MARGIN:
+			return menuTouchInQuickReturn(content, currPage, x);
+		}
+		return false;
+	}
+
+	public boolean menuTouchInQuickReturn(View content, int currPage, float x) {
+		if (mMode == SlidingMenu.LEFT || (mMode == SlidingMenu.LEFT_RIGHT && currPage == 0)) {
+			return x >= content.getLeft();
+		} else if (mMode == SlidingMenu.RIGHT || (mMode == SlidingMenu.LEFT_RIGHT && currPage == 2)) {
+			return x <= content.getRight();
+		}
+		return false;
+	}
+
+	public boolean menuClosedSlideAllowed(float dx) {
+		if (mMode == SlidingMenu.LEFT) {
+			return dx > 0;
+		} else if (mMode == SlidingMenu.RIGHT) {
+			return dx < 0;
+		} else if (mMode == SlidingMenu.LEFT_RIGHT) {
+			return true;
+		}
+		return false;
+	}
+
+	public boolean menuOpenSlideAllowed(float dx) {
+		if (mMode == SlidingMenu.LEFT) {
+			return dx < 0;
+		} else if (mMode == SlidingMenu.RIGHT) {
+			return dx > 0;
+		} else if (mMode == SlidingMenu.LEFT_RIGHT) {
+			return true;
+		}
+		return false;
+	}
+
+	public void drawShadow(View content, Canvas canvas) {
+		if (mShadowDrawable == null || mShadowWidth <= 0) return;
+		int left = 0;
+		if (mMode == SlidingMenu.LEFT) {
+			left = content.getLeft() - mShadowWidth;
+		} else if (mMode == SlidingMenu.RIGHT) {
+			left = content.getRight();
+		} else if (mMode == SlidingMenu.LEFT_RIGHT) {
+			if (mSecondaryShadowDrawable != null) {
+				left = content.getRight();
+				mSecondaryShadowDrawable.setBounds(left, 0, left + mShadowWidth, getHeight());
+				mSecondaryShadowDrawable.draw(canvas);
+			}
+			left = content.getLeft() - mShadowWidth;
+		}
+		mShadowDrawable.setBounds(left, 0, left + mShadowWidth, getHeight());
+		mShadowDrawable.draw(canvas);
+	}
+
+	public void drawFade(View content, Canvas canvas, float openPercent) {
+		if (!mFadeEnabled) return;
+		final int alpha = (int) (mFadeDegree * 255 * Math.abs(1-openPercent));
+		mFadePaint.setColor(Color.argb(alpha, 0, 0, 0));
+		int left = 0;
+		int right = 0;
+		if (mMode == SlidingMenu.LEFT) {
+			left = content.getLeft() - getBehindWidth();
+			right = content.getLeft();
+		} else if (mMode == SlidingMenu.RIGHT) {
+			left = content.getRight();
+			right = content.getRight() + getBehindWidth();			
+		} else if (mMode == SlidingMenu.LEFT_RIGHT) {
+			left = content.getLeft() - getBehindWidth();
+			right = content.getLeft();
+			canvas.drawRect(left, 0, right, getHeight(), mFadePaint);
+			left = content.getRight();
+			right = content.getRight() + getBehindWidth();			
+		}
+		canvas.drawRect(left, 0, right, getHeight(), mFadePaint);
+	}
+	
+	private boolean mSelectorEnabled = true;
+	private Bitmap mSelectorDrawable;
+	private View mSelectedView;
+	
+	public void drawSelector(View content, Canvas canvas, float openPercent) {
+		if (!mSelectorEnabled) return;
+		if (mSelectorDrawable != null && mSelectedView != null) {
+			String tag = (String) mSelectedView.getTag(R.id.selected_view);
+			if (tag.equals(TAG+"SelectedView")) {
+				canvas.save();
+				int left, right, offset;
+				offset = (int) (mSelectorDrawable.getWidth() * openPercent);
+				if (mMode == SlidingMenu.LEFT) {
+					right = content.getLeft();
+					left = right - offset;
+					canvas.clipRect(left, 0, right, getHeight());
+					canvas.drawBitmap(mSelectorDrawable, left, getSelectorTop(), null);		
+				} else if (mMode == SlidingMenu.RIGHT) {
+					left = content.getRight();
+					right = left + offset;
+					canvas.clipRect(left, 0, right, getHeight());
+					canvas.drawBitmap(mSelectorDrawable, right - mSelectorDrawable.getWidth(), getSelectorTop(), null);
+				}
+				canvas.restore();
+			}
+		}
+	}
+	
+	public void setSelectorEnabled(boolean b) {
+		mSelectorEnabled = b;
+	}
+
+	public void setSelectedView(View v) {
+		if (mSelectedView != null) {
+			mSelectedView.setTag(R.id.selected_view, null);
+			mSelectedView = null;
+		}
+		if (v != null && v.getParent() != null) {
+			mSelectedView = v;
+			mSelectedView.setTag(R.id.selected_view, TAG+"SelectedView");
+			invalidate();
+		}
+	}
+
+	private int getSelectorTop() {
+		int y = mSelectedView.getTop();
+		y += (mSelectedView.getHeight() - mSelectorDrawable.getHeight()) / 2;
+		return y;
+	}
+
+	public void setSelectorBitmap(Bitmap b) {
+		mSelectorDrawable = b;
+		refreshDrawableState();
+	}
+
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/HandleHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/HandleHelper.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/HandleHelper.java	(revision )
@@ -0,0 +1,156 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.cropwindow.handle;
+
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.cropwindow.edge.Edge;
+import com.edmodo.cropper.cropwindow.edge.EdgePair;
+import com.edmodo.cropper.util.AspectRatioUtil;
+
+/**
+ * Abstract helper class to handle operations on a crop window Handle.
+ */
+abstract class HandleHelper {
+
+    // Member Variables ////////////////////////////////////////////////////////
+
+    private static final float UNFIXED_ASPECT_RATIO_CONSTANT = 1;
+    private Edge mHorizontalEdge;
+    private Edge mVerticalEdge;
+
+    // Save the Pair object as a member variable to avoid having to instantiate
+    // a new Object every time getActiveEdges() is called.
+    private EdgePair mActiveEdges;
+
+    // Constructor /////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Constructor.
+     *
+     * @param horizontalEdge the horizontal edge associated with this handle; may be null
+     * @param verticalEdge   the vertical edge associated with this handle; may be null
+     */
+    HandleHelper(Edge horizontalEdge, Edge verticalEdge) {
+        mHorizontalEdge = horizontalEdge;
+        mVerticalEdge = verticalEdge;
+        mActiveEdges = new EdgePair(mHorizontalEdge, mVerticalEdge);
+    }
+
+    // Package-Private Methods /////////////////////////////////////////////////////////////////////
+
+    /**
+     * Updates the crop window by directly setting the Edge coordinates.
+     *
+     * @param x          the new x-coordinate of this handle
+     * @param y          the new y-coordinate of this handle
+     * @param imageRect  the bounding rectangle of the image
+     * @param snapRadius the maximum distance (in pixels) at which the crop window should snap to
+     *                   the image
+     */
+    void updateCropWindow(float x,
+                          float y,
+                          @NonNull RectF imageRect,
+                          float snapRadius) {
+
+        final EdgePair activeEdges = getActiveEdges();
+        final Edge primaryEdge = activeEdges.primary;
+        final Edge secondaryEdge = activeEdges.secondary;
+
+        if (primaryEdge != null)
+            primaryEdge.adjustCoordinate(x, y, imageRect, snapRadius, UNFIXED_ASPECT_RATIO_CONSTANT);
+
+        if (secondaryEdge != null)
+            secondaryEdge.adjustCoordinate(x, y, imageRect, snapRadius, UNFIXED_ASPECT_RATIO_CONSTANT);
+    }
+
+    /**
+     * Updates the crop window by directly setting the Edge coordinates; this method maintains a
+     * given aspect ratio.
+     *
+     * @param x                 the new x-coordinate of this handle
+     * @param y                 the new y-coordinate of this handle
+     * @param targetAspectRatio the aspect ratio to maintain
+     * @param imageRect         the bounding rectangle of the image
+     * @param snapRadius        the maximum distance (in pixels) at which the crop window should
+     *                          snap to the image
+     */
+    abstract void updateCropWindow(float x,
+                                   float y,
+                                   float targetAspectRatio,
+                                   @NonNull RectF imageRect,
+                                   float snapRadius);
+
+    /**
+     * Gets the Edges associated with this handle (i.e. the Edges that should be moved when this
+     * handle is dragged). This is used when we are not maintaining the aspect ratio.
+     *
+     * @return the active edge as a pair (the pair may contain null values for the
+     * <code>primary</code>, <code>secondary</code> or both fields)
+     */
+    EdgePair getActiveEdges() {
+        return mActiveEdges;
+    }
+
+    /**
+     * Gets the Edges associated with this handle as an ordered Pair. The <code>primary</code> Edge
+     * in the pair is the determining side. This method is used when we need to maintain the aspect
+     * ratio.
+     *
+     * @param x                 the x-coordinate of the touch point
+     * @param y                 the y-coordinate of the touch point
+     * @param targetAspectRatio the aspect ratio that we are maintaining
+     *
+     * @return the active edges as an ordered pair
+     */
+    EdgePair getActiveEdges(float x, float y, float targetAspectRatio) {
+
+        // Calculate the aspect ratio if this handle were dragged to the given x-y coordinate.
+        final float potentialAspectRatio = getAspectRatio(x, y);
+
+        // If the touched point is wider than the aspect ratio, then x is the determining side. Else, y is the determining side.
+        if (potentialAspectRatio > targetAspectRatio) {
+            mActiveEdges.primary = mVerticalEdge;
+            mActiveEdges.secondary = mHorizontalEdge;
+        } else {
+            mActiveEdges.primary = mHorizontalEdge;
+            mActiveEdges.secondary = mVerticalEdge;
+        }
+        return mActiveEdges;
+    }
+
+    // Private Methods /////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Gets the aspect ratio of the resulting crop window if this handle were dragged to the given
+     * point.
+     *
+     * @param x the x-coordinate
+     * @param y the y-coordinate
+     *
+     * @return the aspect ratio
+     */
+    private float getAspectRatio(float x, float y) {
+
+        // Replace the active edge coordinate with the given touch coordinate.
+        final float left = (mVerticalEdge == Edge.LEFT) ? x : Edge.LEFT.getCoordinate();
+        final float top = (mHorizontalEdge == Edge.TOP) ? y : Edge.TOP.getCoordinate();
+        final float right = (mVerticalEdge == Edge.RIGHT) ? x : Edge.RIGHT.getCoordinate();
+        final float bottom = (mHorizontalEdge == Edge.BOTTOM) ? y : Edge.BOTTOM.getCoordinate();
+
+        return AspectRatioUtil.calculateAspectRatio(left, top, right, bottom);
+    }
+}
Index: PullToRefreshLibrary/src/main/res/values-it/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-it/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-it/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Tira per aggiornare…</string>
+  <string name="pull_to_refresh_release_label">Rilascia per aggionare…</string>
+  <string name="pull_to_refresh_refreshing_label">Caricamento…</string>
+</resources>
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/Utils.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/Utils.java	(revision )
@@ -0,0 +1,13 @@
+package com.handmark.pulltorefresh.library.internal;
+
+import android.util.Log;
+
+public class Utils {
+
+	static final String LOG_TAG = "PullToRefresh";
+
+	public static void warnDeprecation(String depreacted, String replacement) {
+		Log.w(LOG_TAG, "You're using the deprecated " + depreacted + " attr, please switch over to " + replacement);
+	}
+
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ru/values-ru.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ru/values-ru.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ru/values-ru.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ru/values-ru.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Потяните для обновления…</string>
+    <string name="pull_to_refresh_refreshing_label">Загрузка…</string>
+    <string name="pull_to_refresh_release_label">Отпустите для обновления…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/res/androidTest/debug/layout/slidingmenumain.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/res/androidTest/debug/layout/slidingmenumain.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/res/androidTest/debug/layout/slidingmenumain.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.jeremyfeinstein.slidingmenu.lib.SlidingMenu xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/slidingmenumain"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" /><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/SlidingMeunlibrary/res/layout/slidingmenumain.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/SlidingMeunlibrary/build/intermediates/bundles/debug/res/layout/slidingmenumain.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt/values-pt.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt/values-pt.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt/values-pt.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-pt/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">A carregar…</string>
+    <string name="pull_to_refresh_release_label">Liberação para atualizar…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values/values.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values/values.xml	(revision )
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="PullToRefresh"><attr format="reference|color" name="ptrRefreshableViewBackground"/><attr format="reference|color" name="ptrHeaderBackground"/><attr format="reference|color" name="ptrHeaderTextColor"/><attr format="reference|color" name="ptrHeaderSubTextColor"/><attr name="ptrMode"><flag name="disabled" value="0x0"/><flag name="pullFromStart" value="0x1"/><flag name="pullFromEnd" value="0x2"/><flag name="both" value="0x3"/><flag name="manualOnly" value="0x4"/><flag name="pullDownFromTop" value="0x1"/><flag name="pullUpFromBottom" value="0x2"/></attr><attr format="reference|boolean" name="ptrShowIndicator"/><attr format="reference" name="ptrDrawable"/><attr format="reference" name="ptrDrawableStart"/><attr format="reference" name="ptrDrawableEnd"/><attr format="reference|boolean" name="ptrOverScroll"/><attr format="reference" name="ptrHeaderTextAppearance"/><attr format="reference" name="ptrSubHeaderTextAppearance"/><attr name="ptrAnimationStyle"><flag name="rotate" value="0x0"/><flag name="flip" value="0x1"/></attr><attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/><attr format="reference|boolean" name="ptrListViewExtrasEnabled"/><attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/><attr format="reference|color" name="ptrAdapterViewBackground"/><attr format="reference" name="ptrDrawableTop"/><attr format="reference" name="ptrDrawableBottom"/></declare-styleable>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values/dimens.xml -->
+    <eat-comment/>
+    <dimen name="header_footer_left_right_padding">24dp</dimen>
+    <dimen name="header_footer_top_bottom_padding">12dp</dimen>
+    <dimen name="indicator_corner_radius">12dp</dimen>
+    <dimen name="indicator_internal_padding">4dp</dimen>
+    <dimen name="indicator_right_padding">10dp</dimen>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values/ids.xml -->
+    <eat-comment/>
+    <item name="gridview" type="id"/>
+    <item name="scrollview" type="id"/>
+    <item name="webview" type="id"/>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_from_bottom_pull_label">@string/pull_to_refresh_pull_label</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_pull_label">Pull to refresh…</string>
+    <string name="pull_to_refresh_refreshing_label">Loading…</string>
+    <string name="pull_to_refresh_release_label">Release to refresh…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/manifests/androidTest/debug/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/manifests/androidTest/debug/AndroidManifest.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/manifests/androidTest/debug/AndroidManifest.xml	(revision )
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jeremyfeinstein.slidingmenu.lib.test" >
+
+    <uses-sdk
+        android:minSdkVersion="15"
+        android:targetSdkVersion="25" />
+
+    <instrumentation
+        android:name="android.test.InstrumentationTestRunner"
+        android:functionalTest="false"
+        android:handleProfiling="false"
+        android:label="Tests for com.jeremyfeinstein.slidingmenu.lib.test"
+        android:targetPackage="com.jeremyfeinstein.slidingmenu.lib.test" />
+
+    <application>
+        <uses-library android:name="android.test.runner" />
+    </application>
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-nl/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-nl/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-nl/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Sleep om te vernieuwen…</string>
+  <string name="pull_to_refresh_release_label">Loslaten om te vernieuwen…</string>
+  <string name="pull_to_refresh_refreshing_label">Laden…</string>
+</resources>
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/styles.xml	(revision )
+++ app/src/main/res/values/styles.xml	(revision )
@@ -0,0 +1,20 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+    <style name="AppTheme.AppBarOverlay" parent="ThemeOverlay.AppCompat.Dark.ActionBar" />
+
+    <style name="AppTheme.PopupOverlay" parent="ThemeOverlay.AppCompat.Light" />
+
+</resources>
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_out_to_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_out_to_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_out_to_top.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="-100%p" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_out_to_top.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_top.xml -->
\ No newline at end of file
Index: SlidingMeunlibrary/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/AndroidManifest.xml	(revision )
+++ SlidingMeunlibrary/AndroidManifest.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jeremyfeinstein.slidingmenu.lib"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="5"
+        android:targetSdkVersion="17" />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/incremental/packageResources/release/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/incremental/packageResources/release/merger.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/incremental/packageResources/release/merger.xml	(revision )
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res"><file name="slide_in_from_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_in_from_bottom.xml" qualifiers="" type="anim"/><file name="slide_in_from_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_in_from_top.xml" qualifiers="" type="anim"/><file name="slide_out_to_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_out_to_bottom.xml" qualifiers="" type="anim"/><file name="slide_out_to_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_out_to_top.xml" qualifiers="" type="anim"/><file name="indicator_bg_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable\indicator_bg_bottom.xml" qualifiers="" type="drawable"/><file name="indicator_bg_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable\indicator_bg_top.xml" qualifiers="" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-hdpi\default_ptr_flip.png" qualifiers="hdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-hdpi\default_ptr_rotate.png" qualifiers="hdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-hdpi\indicator_arrow.png" qualifiers="hdpi" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-mdpi\default_ptr_flip.png" qualifiers="mdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-mdpi\default_ptr_rotate.png" qualifiers="mdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-mdpi\indicator_arrow.png" qualifiers="mdpi" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-xhdpi\default_ptr_flip.png" qualifiers="xhdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-xhdpi\default_ptr_rotate.png" qualifiers="xhdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-xhdpi\indicator_arrow.png" qualifiers="xhdpi" type="drawable"/><file name="pull_to_refresh_header_horizontal" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\layout\pull_to_refresh_header_horizontal.xml" qualifiers="" type="layout"/><file name="pull_to_refresh_header_vertical" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\layout\pull_to_refresh_header_vertical.xml" qualifiers="" type="layout"/><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\attrs.xml" qualifiers=""><declare-styleable name="PullToRefresh">
+
+        <!-- A drawable to use as the background of the Refreshable View -->
+        <attr format="reference|color" name="ptrRefreshableViewBackground"/>
+
+        <!-- A drawable to use as the background of the Header and Footer Loading Views -->
+        <attr format="reference|color" name="ptrHeaderBackground"/>
+
+        <!-- Text Color of the Header and Footer Loading Views -->
+        <attr format="reference|color" name="ptrHeaderTextColor"/>
+
+        <!-- Text Color of the Header and Footer Loading Views Sub Header -->
+        <attr format="reference|color" name="ptrHeaderSubTextColor"/>
+
+        <!-- Mode of Pull-to-Refresh that should be used -->
+        <attr name="ptrMode">
+            <flag name="disabled" value="0x0"/>
+            <flag name="pullFromStart" value="0x1"/>
+            <flag name="pullFromEnd" value="0x2"/>
+            <flag name="both" value="0x3"/>
+            <flag name="manualOnly" value="0x4"/>
+
+            <!-- These last two are depreacted -->
+            <flag name="pullDownFromTop" value="0x1"/>
+            <flag name="pullUpFromBottom" value="0x2"/>
+        </attr>
+
+        <!-- Whether the Indicator overlay(s) should be used -->
+        <attr format="reference|boolean" name="ptrShowIndicator"/>
+
+        <!-- Drawable to use as Loading Indicator. Changes both Header and Footer. -->
+        <attr format="reference" name="ptrDrawable"/>
+
+        <!-- Drawable to use as Loading Indicator in the Header View. Overrides value set in ptrDrawable. -->
+        <attr format="reference" name="ptrDrawableStart"/>
+
+        <!-- Drawable to use as Loading Indicator in the Footer View. Overrides value set in ptrDrawable. -->
+        <attr format="reference" name="ptrDrawableEnd"/>
+
+        <!-- Whether Android's built-in Over Scroll should be utilised for Pull-to-Refresh. -->
+        <attr format="reference|boolean" name="ptrOverScroll"/>
+
+        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views -->
+        <attr format="reference" name="ptrHeaderTextAppearance"/>
+
+        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views Sub Header -->
+        <attr format="reference" name="ptrSubHeaderTextAppearance"/>
+
+        <!-- Style of Animation should be used displayed when pulling. -->
+        <attr name="ptrAnimationStyle">
+            <flag name="rotate" value="0x0"/>
+            <flag name="flip" value="0x1"/>
+        </attr>
+
+        <!-- Whether the user can scroll while the View is Refreshing -->
+        <attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/>
+
+        <!--
+        	Whether PullToRefreshListView has it's extras enabled. This allows the user to be 
+        	able to scroll while refreshing, and behaves better. It acheives this by adding
+        	Header and/or Footer Views to the ListView.
+        -->
+        <attr format="reference|boolean" name="ptrListViewExtrasEnabled"/>
+
+        <!--
+        	Whether the Drawable should be continually rotated as you pull. This only
+        	takes effect when using the 'Rotate' Animation Style.
+        -->
+        <attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/>
+
+        <!-- BELOW HERE ARE DEPRECEATED. DO NOT USE. -->
+        <attr format="reference|color" name="ptrAdapterViewBackground"/>
+        <attr format="reference" name="ptrDrawableTop"/>
+        <attr format="reference" name="ptrDrawableBottom"/>
+    </declare-styleable></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\dimens.xml" qualifiers=""><dimen name="indicator_corner_radius">12dp</dimen><dimen name="indicator_right_padding">10dp</dimen><dimen name="indicator_internal_padding">4dp</dimen><dimen name="header_footer_top_bottom_padding">12dp</dimen><dimen name="header_footer_left_right_padding">24dp</dimen></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\ids.xml" qualifiers=""><item name="scrollview" type="id"/><item name="webview" type="id"/><item name="gridview" type="id"/></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\pull_refresh_strings.xml" qualifiers=""><string name="pull_to_refresh_from_bottom_pull_label">@string/pull_to_refresh_pull_label</string><string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string><string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string><string name="pull_to_refresh_refreshing_label">Loading…</string><string name="pull_to_refresh_pull_label">Pull to refresh…</string><string name="pull_to_refresh_release_label">Release to refresh…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ar\pull_refresh_strings.xml" qualifiers="ar"><string name="pull_to_refresh_release_label">اترك للتحديث…</string><string name="pull_to_refresh_refreshing_label">تحميل…</string><string name="pull_to_refresh_pull_label">اسحب للتحديث…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-cs\pull_refresh_strings.xml" qualifiers="cs"><string name="pull_to_refresh_refreshing_label">Načítání…</string><string name="pull_to_refresh_pull_label">Tažením aktualizujete…</string><string name="pull_to_refresh_release_label">Uvolněním aktualizujete…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-de\pull_refresh_strings.xml" qualifiers="de"><string name="pull_to_refresh_release_label">Loslassen zum Aktualisieren…</string><string name="pull_to_refresh_refreshing_label">Laden…</string><string name="pull_to_refresh_pull_label">Ziehen zum Aktualisieren…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-es\pull_refresh_strings.xml" qualifiers="es"><string name="pull_to_refresh_refreshing_label">Cargando…</string><string name="pull_to_refresh_pull_label">Tirar para actualizar…</string><string name="pull_to_refresh_release_label">Soltar para actualizar…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-fi\pull_refresh_strings.xml" qualifiers="fi"><string name="pull_to_refresh_release_label">Päivitä vapauttamalla…</string><string name="pull_to_refresh_pull_label">Päivitä vetämällä alas…</string><string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string><string name="pull_to_refresh_from_bottom_pull_label">Päivitä vetämällä ylös…</string><string name="pull_to_refresh_refreshing_label">Päivitetään…</string><string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-fr\pull_refresh_strings.xml" qualifiers="fr"><string name="pull_to_refresh_refreshing_label">Chargement…</string><string name="pull_to_refresh_release_label">Relâcher pour rafraîchir…</string><string name="pull_to_refresh_pull_label">Tirez pour rafraîchir…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-he\pull_refresh_strings.xml" qualifiers="he"><string name="pull_to_refresh_release_label">שחרר לרענון…</string><string name="pull_to_refresh_pull_label">משוך לרענון…</string><string name="pull_to_refresh_refreshing_label">טוען…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-it\pull_refresh_strings.xml" qualifiers="it"><string name="pull_to_refresh_pull_label">Tira per aggiornare…</string><string name="pull_to_refresh_release_label">Rilascia per aggionare…</string><string name="pull_to_refresh_refreshing_label">Caricamento…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-iw\pull_refresh_strings.xml" qualifiers="iw"><string name="pull_to_refresh_refreshing_label">טוען…</string><string name="pull_to_refresh_release_label">שחרר לרענון…</string><string name="pull_to_refresh_pull_label">משוך לרענון…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ja\pull_refresh_strings.xml" qualifiers="ja"><string name="pull_to_refresh_pull_label">画面を引っ張って…</string><string name="pull_to_refresh_refreshing_label">読み込み中…</string><string name="pull_to_refresh_release_label">指を離して更新…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ko\pull_refresh_strings.xml" qualifiers="ko"><string name="pull_to_refresh_pull_label">당겨서 새로 고침…</string><string name="pull_to_refresh_refreshing_label">로드 중…</string><string name="pull_to_refresh_release_label">놓아서 새로 고침…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-nl\pull_refresh_strings.xml" qualifiers="nl"><string name="pull_to_refresh_pull_label">Sleep om te vernieuwen…</string><string name="pull_to_refresh_release_label">Loslaten om te vernieuwen…</string><string name="pull_to_refresh_refreshing_label">Laden…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-pl\pull_refresh_strings.xml" qualifiers="pl"><string name="pull_to_refresh_pull_label">Pociągnij, aby odświeżyć…</string><string name="pull_to_refresh_release_label">Puść, aby odświeżyć…</string><string name="pull_to_refresh_refreshing_label">Wczytywanie…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-pt\pull_refresh_strings.xml" qualifiers="pt"><string name="pull_to_refresh_pull_label">Puxe para atualizar…</string><string name="pull_to_refresh_refreshing_label">A carregar…</string><string name="pull_to_refresh_release_label">Liberação para atualizar…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-pt-rBR\pull_refresh_strings.xml" qualifiers="pt-rBR"><string name="pull_to_refresh_pull_label">Puxe para atualizar…</string><string name="pull_to_refresh_release_label">Libere para atualizar…</string><string name="pull_to_refresh_refreshing_label">Carregando…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ro\pull_refresh_strings.xml" qualifiers="ro"><string name="pull_to_refresh_pull_label">Trage pentru a reîmprospăta…</string><string name="pull_to_refresh_release_label">Eliberează pentru a reîmprospăta…</string><string name="pull_to_refresh_refreshing_label">Încărcare…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ru\pull_refresh_strings.xml" qualifiers="ru"><string name="pull_to_refresh_release_label">Отпустите для обновления…</string><string name="pull_to_refresh_refreshing_label">Загрузка…</string><string name="pull_to_refresh_pull_label">Потяните для обновления…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-zh\pull_refresh_strings.xml" qualifiers="zh"><string name="pull_to_refresh_release_label">放开以刷新…</string><string name="pull_to_refresh_pull_label">下拉刷新…</string><string name="pull_to_refresh_refreshing_label">正在载入…</string></file></source><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\generated\res\rs\release"/><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\generated\res\generated\release"/></dataSet><dataSet config="release"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\release\res"/></dataSet><mergedItems><configuration qualifiers=""><declare-styleable name="PullToRefresh"><attr format="reference|color" name="ptrRefreshableViewBackground"/><attr format="reference|color" name="ptrHeaderBackground"/><attr format="reference|color" name="ptrHeaderTextColor"/><attr format="reference|color" name="ptrHeaderSubTextColor"/><attr name="ptrMode"><flag name="disabled" value="0x0"/><flag name="pullFromStart" value="0x1"/><flag name="pullFromEnd" value="0x2"/><flag name="both" value="0x3"/><flag name="manualOnly" value="0x4"/><flag name="pullDownFromTop" value="0x1"/><flag name="pullUpFromBottom" value="0x2"/></attr><attr format="reference|boolean" name="ptrShowIndicator"/><attr format="reference" name="ptrDrawable"/><attr format="reference" name="ptrDrawableStart"/><attr format="reference" name="ptrDrawableEnd"/><attr format="reference|boolean" name="ptrOverScroll"/><attr format="reference" name="ptrHeaderTextAppearance"/><attr format="reference" name="ptrSubHeaderTextAppearance"/><attr name="ptrAnimationStyle"><flag name="rotate" value="0x0"/><flag name="flip" value="0x1"/></attr><attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/><attr format="reference|boolean" name="ptrListViewExtrasEnabled"/><attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/><attr format="reference|color" name="ptrAdapterViewBackground"/><attr format="reference" name="ptrDrawableTop"/><attr format="reference" name="ptrDrawableBottom"/></declare-styleable></configuration></mergedItems></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshGridView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshGridView.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshGridView.java	(revision )
@@ -0,0 +1,102 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.GridView;
+
+import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;
+
+public class PullToRefreshGridView extends PullToRefreshAdapterViewBase<GridView> {
+
+	public PullToRefreshGridView(Context context) {
+		super(context);
+	}
+
+	public PullToRefreshGridView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public PullToRefreshGridView(Context context, Mode mode) {
+		super(context, mode);
+	}
+
+	public PullToRefreshGridView(Context context, Mode mode, AnimationStyle style) {
+		super(context, mode, style);
+	}
+
+	@Override
+	public final Orientation getPullToRefreshScrollDirection() {
+		return Orientation.VERTICAL;
+	}
+
+	@Override
+	protected final GridView createRefreshableView(Context context, AttributeSet attrs) {
+		final GridView gv;
+		if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {
+			gv = new InternalGridViewSDK9(context, attrs);
+		} else {
+			gv = new InternalGridView(context, attrs);
+		}
+
+		// Use Generated ID (from res/values/ids.xml)
+		gv.setId(R.id.gridview);
+		return gv;
+	}
+
+	class InternalGridView extends GridView implements EmptyViewMethodAccessor {
+
+		public InternalGridView(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		public void setEmptyView(View emptyView) {
+			PullToRefreshGridView.this.setEmptyView(emptyView);
+		}
+
+		@Override
+		public void setEmptyViewInternal(View emptyView) {
+			super.setEmptyView(emptyView);
+		}
+	}
+
+	@TargetApi(9)
+	final class InternalGridViewSDK9 extends InternalGridView {
+
+		public InternalGridViewSDK9(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
+				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
+
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
+
+			// Does all of the hard work...
+			OverscrollHelper.overScrollBy(PullToRefreshGridView.this, deltaX, scrollX, deltaY, scrollY, isTouchEvent);
+
+			return returnValue;
+		}
+	}
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/edge/Edge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/edge/Edge.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/edge/Edge.java	(revision )
@@ -0,0 +1,501 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+*/
+
+package com.edmodo.cropper.cropwindow.edge;
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.util.AspectRatioUtil;
+
+
+/**
+ * Enum representing an edge in the crop window.
+ */
+public enum Edge {
+
+    LEFT,
+    TOP,
+    RIGHT,
+    BOTTOM;
+
+    // Private Constants ///////////////////////////////////////////////////////////////////////////
+
+    // Minimum distance in pixels that one edge can get to its opposing edge.
+    // This is an arbitrary value that simply prevents the crop window from becoming too small.
+    public static final int MIN_CROP_LENGTH_PX = 40;
+
+    // Member Variables ////////////////////////////////////////////////////////////////////////////
+
+    // The coordinate value of this edge.
+    // This will be the x-coordinate for LEFT and RIGHT edges and the y-coordinate for TOP and BOTTOM edges.
+    private float mCoordinate;
+
+    // Public Methods //////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Sets the coordinate of the Edge. The coordinate will represent the x-coordinate for LEFT and
+     * RIGHT Edges and the y-coordinate for TOP and BOTTOM edges.
+     *
+     * @param coordinate the position of the edge
+     */
+    public void setCoordinate(float coordinate) {
+        mCoordinate = coordinate;
+    }
+
+    /**
+     * Add the given number of pixels to the current coordinate position of this Edge.
+     *
+     * @param distance the number of pixels to add
+     */
+    public void offset(float distance) {
+        mCoordinate += distance;
+    }
+
+    /**
+     * Gets the coordinate of the Edge
+     *
+     * @return the Edge coordinate (x-coordinate for LEFT and RIGHT Edges and the y-coordinate for
+     * TOP and BOTTOM edges)
+     */
+    public float getCoordinate() {
+        return mCoordinate;
+    }
+
+    /**
+     * Sets the Edge to the given x-y coordinate but also adjusting for snapping to the image bounds
+     * and parent view border constraints.
+     *
+     * @param x               the x-coordinate
+     * @param y               the y-coordinate
+     * @param imageRect       the bounding rectangle of the image
+     * @param imageSnapRadius the radius (in pixels) at which the edge should snap to the image
+     */
+    public void adjustCoordinate(float x, float y, @NonNull RectF imageRect, float imageSnapRadius, float aspectRatio) {
+
+        switch (this) {
+            case LEFT:
+                mCoordinate = adjustLeft(x, imageRect, imageSnapRadius, aspectRatio);
+                break;
+            case TOP:
+                mCoordinate = adjustTop(y, imageRect, imageSnapRadius, aspectRatio);
+                break;
+            case RIGHT:
+                mCoordinate = adjustRight(x, imageRect, imageSnapRadius, aspectRatio);
+                break;
+            case BOTTOM:
+                mCoordinate = adjustBottom(y, imageRect, imageSnapRadius, aspectRatio);
+                break;
+        }
+    }
+
+
+    /**
+     * Adjusts this Edge position such that the resulting window will have the given aspect ratio.
+     *
+     * @param aspectRatio the aspect ratio to achieve
+     */
+    public void adjustCoordinate(float aspectRatio) {
+
+        final float left = Edge.LEFT.getCoordinate();
+        final float top = Edge.TOP.getCoordinate();
+        final float right = Edge.RIGHT.getCoordinate();
+        final float bottom = Edge.BOTTOM.getCoordinate();
+
+        switch (this) {
+            case LEFT:
+                mCoordinate = AspectRatioUtil.calculateLeft(top, right, bottom, aspectRatio);
+                break;
+            case TOP:
+                mCoordinate = AspectRatioUtil.calculateTop(left, right, bottom, aspectRatio);
+                break;
+            case RIGHT:
+                mCoordinate = AspectRatioUtil.calculateRight(left, top, bottom, aspectRatio);
+                break;
+            case BOTTOM:
+                mCoordinate = AspectRatioUtil.calculateBottom(left, top, right, aspectRatio);
+                break;
+        }
+    }
+
+    /**
+     * Returns whether or not you can re-scale the image based on whether any edge would be out of
+     * bounds. Checks all the edges for a possibility of jumping out of bounds.
+     *
+     * @param edge        the Edge that is about to be expanded
+     * @param imageRect   the rectangle of the picture
+     * @param aspectRatio the desired aspectRatio of the picture
+     *
+     * @return whether or not the new image would be out of bounds.
+     */
+    public boolean isNewRectangleOutOfBounds(@NonNull Edge edge, @NonNull RectF imageRect, float aspectRatio) {
+
+        final float offset = edge.snapOffset(imageRect);
+
+        switch (this) {
+
+            case LEFT:
+
+                if (edge.equals(Edge.TOP)) {
+
+                    final float top = imageRect.top;
+                    final float bottom = Edge.BOTTOM.getCoordinate() - offset;
+                    final float right = Edge.RIGHT.getCoordinate();
+                    final float left = AspectRatioUtil.calculateLeft(top, right, bottom, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+
+                } else if (edge.equals(Edge.BOTTOM)) {
+
+                    final float bottom = imageRect.bottom;
+                    final float top = Edge.TOP.getCoordinate() - offset;
+                    final float right = Edge.RIGHT.getCoordinate();
+                    final float left = AspectRatioUtil.calculateLeft(top, right, bottom, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+                }
+                break;
+
+            case TOP:
+
+                if (edge.equals(Edge.LEFT)) {
+
+                    final float left = imageRect.left;
+                    final float right = Edge.RIGHT.getCoordinate() - offset;
+                    final float bottom = Edge.BOTTOM.getCoordinate();
+                    final float top = AspectRatioUtil.calculateTop(left, right, bottom, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+
+                } else if (edge.equals(Edge.RIGHT)) {
+
+                    final float right = imageRect.right;
+                    final float left = Edge.LEFT.getCoordinate() - offset;
+                    final float bottom = Edge.BOTTOM.getCoordinate();
+                    final float top = AspectRatioUtil.calculateTop(left, right, bottom, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+                }
+                break;
+
+            case RIGHT:
+
+                if (edge.equals(Edge.TOP)) {
+
+                    final float top = imageRect.top;
+                    final float bottom = Edge.BOTTOM.getCoordinate() - offset;
+                    final float left = Edge.LEFT.getCoordinate();
+                    final float right = AspectRatioUtil.calculateRight(left, top, bottom, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+
+                } else if (edge.equals(Edge.BOTTOM)) {
+
+                    final float bottom = imageRect.bottom;
+                    final float top = Edge.TOP.getCoordinate() - offset;
+                    final float left = Edge.LEFT.getCoordinate();
+                    final float right = AspectRatioUtil.calculateRight(left, top, bottom, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+                }
+                break;
+
+            case BOTTOM:
+
+                if (edge.equals(Edge.LEFT)) {
+
+                    final float left = imageRect.left;
+                    final float right = Edge.RIGHT.getCoordinate() - offset;
+                    final float top = Edge.TOP.getCoordinate();
+                    final float bottom = AspectRatioUtil.calculateBottom(left, top, right, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+
+                } else if (edge.equals(Edge.RIGHT)) {
+
+                    final float right = imageRect.right;
+                    final float left = Edge.LEFT.getCoordinate() - offset;
+                    final float top = Edge.TOP.getCoordinate();
+                    final float bottom = AspectRatioUtil.calculateBottom(left, top, right, aspectRatio);
+
+                    return isOutOfBounds(top, left, bottom, right, imageRect);
+
+                }
+                break;
+        }
+        return true;
+    }
+
+    /**
+     * Returns whether the new rectangle would be out of bounds.
+     *
+     * @param imageRect the Image to be compared with
+     *
+     * @return whether it would be out of bounds
+     */
+    private boolean isOutOfBounds(float top, float left, float bottom, float right, @NonNull RectF imageRect) {
+        return (top < imageRect.top || left < imageRect.left || bottom > imageRect.bottom || right > imageRect.right);
+    }
+
+    /**
+     * Snap this Edge to the given image boundaries.
+     *
+     * @param imageRect the bounding rectangle of the image to snap to
+     *
+     * @return the amount (in pixels) that this coordinate was changed (i.e. the new coordinate
+     * minus the old coordinate value)
+     */
+    public float snapToRect(@NonNull RectF imageRect) {
+
+        final float oldCoordinate = mCoordinate;
+
+        switch (this) {
+            case LEFT:
+                mCoordinate = imageRect.left;
+                break;
+            case TOP:
+                mCoordinate = imageRect.top;
+                break;
+            case RIGHT:
+                mCoordinate = imageRect.right;
+                break;
+            case BOTTOM:
+                mCoordinate = imageRect.bottom;
+                break;
+        }
+
+        return mCoordinate - oldCoordinate;
+    }
+
+    /**
+     * Returns the potential snap offset of snapToRect, without changing the coordinate.
+     *
+     * @param imageRect the bounding rectangle of the image to snap to
+     *
+     * @return the amount (in pixels) that this coordinate was changed (i.e. the new coordinate
+     * minus the old coordinate value)
+     */
+    public float snapOffset(@NonNull RectF imageRect) {
+
+        final float oldCoordinate = mCoordinate;
+        final float newCoordinate;
+
+        switch (this) {
+            case LEFT:
+                newCoordinate = imageRect.left;
+                break;
+            case TOP:
+                newCoordinate = imageRect.top;
+                break;
+            case RIGHT:
+                newCoordinate = imageRect.right;
+                break;
+            default: // BOTTOM
+                newCoordinate = imageRect.bottom;
+                break;
+        }
+
+        return newCoordinate - oldCoordinate;
+    }
+
+    /**
+     * Gets the current width of the crop window.
+     */
+    public static float getWidth() {
+        return Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate();
+    }
+
+    /**
+     * Gets the current height of the crop window.
+     */
+    public static float getHeight() {
+        return Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate();
+    }
+
+    /**
+     * Determines if this Edge is outside the inner margins of the given bounding rectangle. The
+     * margins come inside the actual frame by SNAPRADIUS amount; therefore, determines if the point
+     * is outside the inner "margin" frame.
+     */
+    public boolean isOutsideMargin(@NonNull RectF rect, float margin) {
+
+        final boolean result;
+
+        switch (this) {
+            case LEFT:
+                result = mCoordinate - rect.left < margin;
+                break;
+            case TOP:
+                result = mCoordinate - rect.top < margin;
+                break;
+            case RIGHT:
+                result = rect.right - mCoordinate < margin;
+                break;
+            default: // BOTTOM
+                result = rect.bottom - mCoordinate < margin;
+                break;
+        }
+        return result;
+    }
+
+    // Private Methods /////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Get the resulting x-position of the left edge of the crop window given the handle's position
+     * and the image's bounding box and snap radius.
+     *
+     * @param x               the x-position that the left edge is dragged to
+     * @param imageRect       the bounding box of the image that is being cropped
+     * @param imageSnapRadius the snap distance to the image edge (in pixels)
+     *
+     * @return the actual x-position of the left edge
+     */
+    private static float adjustLeft(float x, @NonNull RectF imageRect, float imageSnapRadius, float aspectRatio) {
+
+        final float resultX;
+
+        if (x - imageRect.left < imageSnapRadius) {
+
+            resultX = imageRect.left;
+
+        } else {
+
+            // Select the minimum of the three possible values to use
+            float resultXHoriz = Float.POSITIVE_INFINITY;
+            float resultXVert = Float.POSITIVE_INFINITY;
+
+            // Checks if the window is too small horizontally
+            if (x >= Edge.RIGHT.getCoordinate() - MIN_CROP_LENGTH_PX) {
+                resultXHoriz = Edge.RIGHT.getCoordinate() - MIN_CROP_LENGTH_PX;
+            }
+            // Checks if the window is too small vertically
+            if (((Edge.RIGHT.getCoordinate() - x) / aspectRatio) <= MIN_CROP_LENGTH_PX) {
+                resultXVert = Edge.RIGHT.getCoordinate() - (MIN_CROP_LENGTH_PX * aspectRatio);
+            }
+            resultX = Math.min(x, Math.min(resultXHoriz, resultXVert));
+        }
+        return resultX;
+    }
+
+    /**
+     * Get the resulting x-position of the right edge of the crop window given the handle's position
+     * and the image's bounding box and snap radius.
+     *
+     * @param x               the x-position that the right edge is dragged to
+     * @param imageRect       the bounding box of the image that is being cropped
+     * @param imageSnapRadius the snap distance to the image edge (in pixels)
+     *
+     * @return the actual x-position of the right edge
+     */
+    private static float adjustRight(float x, @NonNull RectF imageRect, float imageSnapRadius, float aspectRatio) {
+
+        final float resultX;
+
+        // If close to the edge...
+        if (imageRect.right - x < imageSnapRadius) {
+
+            resultX = imageRect.right;
+
+        } else {
+
+            // Select the maximum of the three possible values to use
+            float resultXHoriz = Float.NEGATIVE_INFINITY;
+            float resultXVert = Float.NEGATIVE_INFINITY;
+
+            // Checks if the window is too small horizontally
+            if (x <= Edge.LEFT.getCoordinate() + MIN_CROP_LENGTH_PX) {
+                resultXHoriz = Edge.LEFT.getCoordinate() + MIN_CROP_LENGTH_PX;
+            }
+            // Checks if the window is too small vertically
+            if (((x - Edge.LEFT.getCoordinate()) / aspectRatio) <= MIN_CROP_LENGTH_PX) {
+                resultXVert = Edge.LEFT.getCoordinate() + (MIN_CROP_LENGTH_PX * aspectRatio);
+            }
+            resultX = Math.max(x, Math.max(resultXHoriz, resultXVert));
+        }
+        return resultX;
+    }
+
+    /**
+     * Get the resulting y-position of the top edge of the crop window given the handle's position
+     * and the image's bounding box and snap radius.
+     *
+     * @param y               the x-position that the top edge is dragged to
+     * @param imageRect       the bounding box of the image that is being cropped
+     * @param imageSnapRadius the snap distance to the image edge (in pixels)
+     *
+     * @return the actual y-position of the top edge
+     */
+    private static float adjustTop(float y, @NonNull RectF imageRect, float imageSnapRadius, float aspectRatio) {
+
+        final float resultY;
+
+        if (y - imageRect.top < imageSnapRadius) {
+
+            resultY = imageRect.top;
+
+        } else {
+
+            // Select the minimum of the three possible values to use
+            float resultYVert = Float.POSITIVE_INFINITY;
+            float resultYHoriz = Float.POSITIVE_INFINITY;
+
+            // Checks if the window is too small vertically
+            if (y >= Edge.BOTTOM.getCoordinate() - MIN_CROP_LENGTH_PX)
+                resultYHoriz = Edge.BOTTOM.getCoordinate() - MIN_CROP_LENGTH_PX;
+
+            // Checks if the window is too small horizontally
+            if (((Edge.BOTTOM.getCoordinate() - y) * aspectRatio) <= MIN_CROP_LENGTH_PX)
+                resultYVert = Edge.BOTTOM.getCoordinate() - (MIN_CROP_LENGTH_PX / aspectRatio);
+
+            resultY = Math.min(y, Math.min(resultYHoriz, resultYVert));
+        }
+        return resultY;
+    }
+
+    /**
+     * Get the resulting y-position of the bottom edge of the crop window given the handle's
+     * position and the image's bounding box and snap radius.
+     *
+     * @param y               the x-position that the bottom edge is dragged to
+     * @param imageRect       the bounding box of the image that is being cropped
+     * @param imageSnapRadius the snap distance to the image edge (in pixels)
+     *
+     * @return the actual y-position of the bottom edge
+     */
+    private static float adjustBottom(float y, @NonNull RectF imageRect, float imageSnapRadius, float aspectRatio) {
+
+        final float resultY;
+
+        if (imageRect.bottom - y < imageSnapRadius) {
+
+            resultY = imageRect.bottom;
+
+        } else {
+
+            // Select the maximum of the three possible values to use
+            float resultYVert = Float.NEGATIVE_INFINITY;
+            float resultYHoriz = Float.NEGATIVE_INFINITY;
+
+            // Checks if the window is too small vertically
+            if (y <= Edge.TOP.getCoordinate() + MIN_CROP_LENGTH_PX) {
+                resultYVert = Edge.TOP.getCoordinate() + MIN_CROP_LENGTH_PX;
+            }
+            // Checks if the window is too small horizontally
+            if (((y - Edge.TOP.getCoordinate()) * aspectRatio) <= MIN_CROP_LENGTH_PX) {
+                resultYHoriz = Edge.TOP.getCoordinate() + (MIN_CROP_LENGTH_PX / aspectRatio);
+            }
+            resultY = Math.max(y, Math.max(resultYHoriz, resultYVert));
+        }
+        return resultY;
+    }
+}
Index: SlidingMeunlibrary/build/intermediates/bundles/release/res/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/release/res/values/values.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/release/res/values/values.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="SlidingMenu"><attr name="mode"><enum name="left" value="0"/><enum name="right" value="1"/></attr><attr format="reference" name="viewAbove"/><attr format="reference" name="viewBehind"/><attr format="dimension" name="behindOffset"/><attr format="dimension" name="behindWidth"/><attr format="float" name="behindScrollScale"/><attr name="touchModeAbove"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr name="touchModeBehind"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr format="reference" name="shadowDrawable"/><attr format="dimension" name="shadowWidth"/><attr format="boolean" name="fadeEnabled"/><attr format="float" name="fadeDegree"/><attr format="boolean" name="selectorEnabled"/><attr format="reference" name="selectorDrawable"/></declare-styleable>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/SlidingMeunlibrary/res/values/ids.xml -->
+    <eat-comment/>
+    <item name="selected_view" type="id"/>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/LICENSE.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/LICENSE.txt	(revision )
+++ SlidingMeunlibrary/LICENSE.txt	(revision )
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
\ No newline at end of file
Index: app/src/androidTest/java/zhu/com/sortingdata/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/zhu/com/sortingdata/ExampleInstrumentedTest.java	(revision )
+++ app/src/androidTest/java/zhu/com/sortingdata/ExampleInstrumentedTest.java	(revision )
@@ -0,0 +1,26 @@
+package zhu.com.sortingdata;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumentation test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("zhu.com.sortingdata", appContext.getPackageName());
+    }
+}
Index: ultrapulltorefreshlibrary/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/.gitignore	(revision )
+++ ultrapulltorefreshlibrary/.gitignore	(revision )
@@ -0,0 +1,1 @@
+/build
Index: PullToRefreshLibrary/src/main/res/anim/slide_in_from_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/anim/slide_in_from_bottom.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/anim/slide_in_from_bottom.xml	(revision )
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="100%p"
+    android:toYDelta="0" />
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingFragmentActivity.java	(revision )
@@ -0,0 +1,152 @@
+package com.jeremyfeinstein.slidingmenu.lib.app;
+
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
+
+public class SlidingFragmentActivity extends FragmentActivity implements SlidingActivityBase {
+
+	private SlidingActivityHelper mHelper;
+
+	/* (non-Javadoc)
+	 * @see android.support.v4.app.FragmentActivity#onCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		mHelper = new SlidingActivityHelper(this);
+		mHelper.onCreate(savedInstanceState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onPostCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onPostCreate(Bundle savedInstanceState) {
+		super.onPostCreate(savedInstanceState);
+		mHelper.onPostCreate(savedInstanceState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#findViewById(int)
+	 */
+	@Override
+	public View findViewById(int id) {
+		View v = super.findViewById(id);
+		if (v != null)
+			return v;
+		return mHelper.findViewById(id);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.support.v4.app.FragmentActivity#onSaveInstanceState(android.os.Bundle)
+	 */
+	@Override
+	protected void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		mHelper.onSaveInstanceState(outState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(int)
+	 */
+	@Override
+	public void setContentView(int id) {
+		setContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View)
+	 */
+	@Override
+	public void setContentView(View v) {
+		setContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	@Override
+	public void setContentView(View v, LayoutParams params) {
+		super.setContentView(v, params);
+		mHelper.registerAboveContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(int)
+	 */
+	public void setBehindContentView(int id) {
+		setBehindContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View)
+	 */
+	public void setBehindContentView(View v) {
+		setBehindContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	public void setBehindContentView(View v, LayoutParams params) {
+		mHelper.setBehindContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#getSlidingMenu()
+	 */
+	public SlidingMenu getSlidingMenu() {
+		return mHelper.getSlidingMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#toggle()
+	 */
+	public void toggle() {
+		mHelper.toggle();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showAbove()
+	 */
+	public void showContent() {
+		mHelper.showContent();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showBehind()
+	 */
+	public void showMenu() {
+		mHelper.showMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showSecondaryMenu()
+	 */
+	public void showSecondaryMenu() {
+		mHelper.showSecondaryMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setSlidingActionBarEnabled(boolean)
+	 */
+	public void setSlidingActionBarEnabled(boolean b) {
+		mHelper.setSlidingActionBarEnabled(b);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onKeyUp(int, android.view.KeyEvent)
+	 */
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		boolean b = mHelper.onKeyUp(keyCode, event);
+		if (b) return b;
+		return super.onKeyUp(keyCode, event);
+	}
+
+}
Index: SlidingMeunlibrary/build/generated/source/r/debug/com/jeremyfeinstein/slidingmenu/lib/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/generated/source/r/debug/com/jeremyfeinstein/slidingmenu/lib/R.java	(revision )
+++ SlidingMeunlibrary/build/generated/source/r/debug/com/jeremyfeinstein/slidingmenu/lib/R.java	(revision )
@@ -0,0 +1,379 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+
+package com.jeremyfeinstein.slidingmenu.lib;
+
+public final class R {
+    public static final class attr {
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int behindOffset=0x7f010003;
+        /** <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int behindScrollScale=0x7f010005;
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int behindWidth=0x7f010004;
+        /** <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int fadeDegree=0x7f01000b;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int fadeEnabled=0x7f01000a;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>left</code></td><td>0</td><td></td></tr>
+<tr><td><code>right</code></td><td>1</td><td></td></tr>
+</table>
+         */
+        public static int mode=0x7f010000;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int selectorDrawable=0x7f01000d;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int selectorEnabled=0x7f01000c;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int shadowDrawable=0x7f010008;
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static int shadowWidth=0x7f010009;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+         */
+        public static int touchModeAbove=0x7f010006;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+         */
+        public static int touchModeBehind=0x7f010007;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int viewAbove=0x7f010001;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int viewBehind=0x7f010002;
+    }
+    public static final class id {
+        public static int fullscreen=0x7f030003;
+        public static int left=0x7f030001;
+        public static int margin=0x7f030004;
+        public static int none=0x7f030005;
+        public static int right=0x7f030002;
+        public static int selected_view=0x7f030000;
+        public static int slidingmenumain=0x7f030006;
+    }
+    public static final class layout {
+        public static int slidingmenumain=0x7f020000;
+    }
+    public static final class styleable {
+        /** Attributes that can be used with a SlidingMenu.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #SlidingMenu_behindOffset com.jeremyfeinstein.slidingmenu.lib:behindOffset}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_behindScrollScale com.jeremyfeinstein.slidingmenu.lib:behindScrollScale}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_behindWidth com.jeremyfeinstein.slidingmenu.lib:behindWidth}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_fadeDegree com.jeremyfeinstein.slidingmenu.lib:fadeDegree}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_fadeEnabled com.jeremyfeinstein.slidingmenu.lib:fadeEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_mode com.jeremyfeinstein.slidingmenu.lib:mode}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_selectorDrawable com.jeremyfeinstein.slidingmenu.lib:selectorDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_selectorEnabled com.jeremyfeinstein.slidingmenu.lib:selectorEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_shadowDrawable com.jeremyfeinstein.slidingmenu.lib:shadowDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_shadowWidth com.jeremyfeinstein.slidingmenu.lib:shadowWidth}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_touchModeAbove com.jeremyfeinstein.slidingmenu.lib:touchModeAbove}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_touchModeBehind com.jeremyfeinstein.slidingmenu.lib:touchModeBehind}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_viewAbove com.jeremyfeinstein.slidingmenu.lib:viewAbove}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_viewBehind com.jeremyfeinstein.slidingmenu.lib:viewBehind}</code></td><td></td></tr>
+           </table>
+           @see #SlidingMenu_behindOffset
+           @see #SlidingMenu_behindScrollScale
+           @see #SlidingMenu_behindWidth
+           @see #SlidingMenu_fadeDegree
+           @see #SlidingMenu_fadeEnabled
+           @see #SlidingMenu_mode
+           @see #SlidingMenu_selectorDrawable
+           @see #SlidingMenu_selectorEnabled
+           @see #SlidingMenu_shadowDrawable
+           @see #SlidingMenu_shadowWidth
+           @see #SlidingMenu_touchModeAbove
+           @see #SlidingMenu_touchModeBehind
+           @see #SlidingMenu_viewAbove
+           @see #SlidingMenu_viewBehind
+         */
+        public static final int[] SlidingMenu = {
+            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
+            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
+            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
+            0x7f01000c, 0x7f01000d
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#behindOffset}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:behindOffset
+        */
+        public static int SlidingMenu_behindOffset = 3;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#behindScrollScale}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:behindScrollScale
+        */
+        public static int SlidingMenu_behindScrollScale = 5;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#behindWidth}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:behindWidth
+        */
+        public static int SlidingMenu_behindWidth = 4;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#fadeDegree}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:fadeDegree
+        */
+        public static int SlidingMenu_fadeDegree = 11;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#fadeEnabled}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:fadeEnabled
+        */
+        public static int SlidingMenu_fadeEnabled = 10;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#mode}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>left</code></td><td>0</td><td></td></tr>
+<tr><td><code>right</code></td><td>1</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib:mode
+        */
+        public static int SlidingMenu_mode = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#selectorDrawable}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:selectorDrawable
+        */
+        public static int SlidingMenu_selectorDrawable = 13;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#selectorEnabled}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:selectorEnabled
+        */
+        public static int SlidingMenu_selectorEnabled = 12;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#shadowDrawable}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:shadowDrawable
+        */
+        public static int SlidingMenu_shadowDrawable = 8;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#shadowWidth}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib:shadowWidth
+        */
+        public static int SlidingMenu_shadowWidth = 9;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#touchModeAbove}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib:touchModeAbove
+        */
+        public static int SlidingMenu_touchModeAbove = 6;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#touchModeBehind}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib:touchModeBehind
+        */
+        public static int SlidingMenu_touchModeBehind = 7;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#viewAbove}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:viewAbove
+        */
+        public static int SlidingMenu_viewAbove = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.R.attr#viewBehind}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib:viewBehind
+        */
+        public static int SlidingMenu_viewBehind = 2;
+    };
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-fi/values-fi.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-fi/values-fi.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-fi/values-fi.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-fi/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_from_bottom_pull_label">Päivitä vetämällä ylös…</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_pull_label">Päivitä vetämällä alas…</string>
+    <string name="pull_to_refresh_refreshing_label">Päivitetään…</string>
+    <string name="pull_to_refresh_release_label">Päivitä vapauttamalla…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pt/values-pt.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pt/values-pt.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pt/values-pt.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt/values-pt.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">A carregar…</string>
+    <string name="pull_to_refresh_release_label">Liberação para atualizar…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-es/values-es.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-es/values-es.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-es/values-es.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-es/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tirar para actualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">Cargando…</string>
+    <string name="pull_to_refresh_release_label">Soltar para actualizar…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/extras/PullToRefreshWebView2.java	(revision )
@@ -0,0 +1,132 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.extras;
+
+import java.util.concurrent.atomic.AtomicBoolean;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.webkit.WebView;
+
+import com.handmark.pulltorefresh.library.PullToRefreshWebView;
+
+/**
+ * An advanced version of {@link PullToRefreshWebView} which delegates the
+ * triggering of the PullToRefresh gesture to the Javascript running within the
+ * WebView. This means that you should only use this class if:
+ * <p/>
+ * <ul>
+ * <li>{@link PullToRefreshWebView} doesn't work correctly because you're using
+ * <code>overflow:scroll</code> or something else which means
+ * {@link WebView#getScrollY()} doesn't return correct values.</li>
+ * <li>You control the web content being displayed, as you need to write some
+ * Javascript callbacks.</li>
+ * </ul>
+ * <p/>
+ * <p/>
+ * The way this call works is that when a PullToRefresh gesture is in action,
+ * the following Javascript methods will be called:
+ * <code>isReadyForPullDown()</code> and <code>isReadyForPullUp()</code>, it is
+ * your job to calculate whether the view is in a state where a PullToRefresh
+ * can happen, and return the result via the callback mechanism. An example can
+ * be seen below:
+ * <p/>
+ * 
+ * <pre>
+ * function isReadyForPullDown() {
+ *   var result = ...  // Probably using the .scrollTop DOM attribute
+ *   ptr.isReadyForPullDownResponse(result);
+ * }
+ * 
+ * function isReadyForPullUp() {
+ *   var result = ...  // Probably using the .scrollBottom DOM attribute
+ *   ptr.isReadyForPullUpResponse(result);
+ * }
+ * </pre>
+ * 
+ * @author Chris Banes
+ */
+public class PullToRefreshWebView2 extends PullToRefreshWebView {
+
+	static final String JS_INTERFACE_PKG = "ptr";
+	static final String DEF_JS_READY_PULL_DOWN_CALL = "javascript:isReadyForPullDown();";
+	static final String DEF_JS_READY_PULL_UP_CALL = "javascript:isReadyForPullUp();";
+
+	public PullToRefreshWebView2(Context context) {
+		super(context);
+	}
+
+	public PullToRefreshWebView2(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public PullToRefreshWebView2(Context context, Mode mode) {
+		super(context, mode);
+	}
+
+	private JsValueCallback mJsCallback;
+	private final AtomicBoolean mIsReadyForPullDown = new AtomicBoolean(false);
+	private final AtomicBoolean mIsReadyForPullUp = new AtomicBoolean(false);
+
+	@Override
+	protected WebView createRefreshableView(Context context, AttributeSet attrs) {
+		WebView webView = super.createRefreshableView(context, attrs);
+
+		// Need to add JS Interface so we can get the response back
+		mJsCallback = new JsValueCallback();
+		webView.addJavascriptInterface(mJsCallback, JS_INTERFACE_PKG);
+
+		return webView;
+	}
+
+	@Override
+	protected boolean isReadyForPullStart() {
+		// Call Javascript...
+		getRefreshableView().loadUrl(DEF_JS_READY_PULL_DOWN_CALL);
+
+		// Response will be given to JsValueCallback, which will update
+		// mIsReadyForPullDown
+
+		return mIsReadyForPullDown.get();
+	}
+
+	@Override
+	protected boolean isReadyForPullEnd() {
+		// Call Javascript...
+		getRefreshableView().loadUrl(DEF_JS_READY_PULL_UP_CALL);
+
+		// Response will be given to JsValueCallback, which will update
+		// mIsReadyForPullUp
+
+		return mIsReadyForPullUp.get();
+	}
+
+	/**
+	 * Used for response from Javascript
+	 * 
+	 * @author Chris Banes
+	 */
+	final class JsValueCallback {
+
+		public void isReadyForPullUpResponse(boolean response) {
+			mIsReadyForPullUp.set(response);
+		}
+
+		public void isReadyForPullDownResponse(boolean response) {
+			mIsReadyForPullDown.set(response);
+		}
+	}
+}
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision )
+++ app/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="zhu.com.sortingdata">
+
+    <application
+        android:name=".util.MyApplication"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name"
+            android:theme="@style/AppTheme.NoActionBar">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <!-- Include next permission if you want to allow UIL to cache images on SD card -->
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values/values.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values/values.xml	(revision )
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="PullToRefresh"><attr format="reference|color" name="ptrRefreshableViewBackground"/><attr format="reference|color" name="ptrHeaderBackground"/><attr format="reference|color" name="ptrHeaderTextColor"/><attr format="reference|color" name="ptrHeaderSubTextColor"/><attr name="ptrMode"><flag name="disabled" value="0x0"/><flag name="pullFromStart" value="0x1"/><flag name="pullFromEnd" value="0x2"/><flag name="both" value="0x3"/><flag name="manualOnly" value="0x4"/><flag name="pullDownFromTop" value="0x1"/><flag name="pullUpFromBottom" value="0x2"/></attr><attr format="reference|boolean" name="ptrShowIndicator"/><attr format="reference" name="ptrDrawable"/><attr format="reference" name="ptrDrawableStart"/><attr format="reference" name="ptrDrawableEnd"/><attr format="reference|boolean" name="ptrOverScroll"/><attr format="reference" name="ptrHeaderTextAppearance"/><attr format="reference" name="ptrSubHeaderTextAppearance"/><attr name="ptrAnimationStyle"><flag name="rotate" value="0x0"/><flag name="flip" value="0x1"/></attr><attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/><attr format="reference|boolean" name="ptrListViewExtrasEnabled"/><attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/><attr format="reference|color" name="ptrAdapterViewBackground"/><attr format="reference" name="ptrDrawableTop"/><attr format="reference" name="ptrDrawableBottom"/></declare-styleable>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values/dimens.xml -->
+    <eat-comment/>
+    <dimen name="header_footer_left_right_padding">24dp</dimen>
+    <dimen name="header_footer_top_bottom_padding">12dp</dimen>
+    <dimen name="indicator_corner_radius">12dp</dimen>
+    <dimen name="indicator_internal_padding">4dp</dimen>
+    <dimen name="indicator_right_padding">10dp</dimen>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values/ids.xml -->
+    <eat-comment/>
+    <item name="gridview" type="id"/>
+    <item name="scrollview" type="id"/>
+    <item name="webview" type="id"/>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_from_bottom_pull_label">@string/pull_to_refresh_pull_label</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_pull_label">Pull to refresh…</string>
+    <string name="pull_to_refresh_refreshing_label">Loading…</string>
+    <string name="pull_to_refresh_release_label">Release to refresh…</string>
+</resources>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandlerHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandlerHook.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandlerHook.java	(revision )
@@ -0,0 +1,56 @@
+package in.srain.cube.views.ptr;
+
+/**
+ * Run a hook runnable, the runnable will run only once.
+ * After the runnable is done, call resume to resume.
+ * Once run, call takeover will directory call the resume action
+ */
+public abstract class PtrUIHandlerHook implements Runnable {
+
+    private Runnable mResumeAction;
+    private static final byte STATUS_PREPARE = 0;
+    private static final byte STATUS_IN_HOOK = 1;
+    private static final byte STATUS_RESUMED = 2;
+    private byte mStatus = STATUS_PREPARE;
+
+    public void takeOver() {
+        takeOver(null);
+    }
+
+    public void takeOver(Runnable resumeAction) {
+        if (resumeAction != null) {
+            mResumeAction = resumeAction;
+        }
+        switch (mStatus) {
+            case STATUS_PREPARE:
+                mStatus = STATUS_IN_HOOK;
+                run();
+                break;
+            case STATUS_IN_HOOK:
+                break;
+            case STATUS_RESUMED:
+                resume();
+                break;
+        }
+    }
+
+    public void reset() {
+        mStatus = STATUS_PREPARE;
+    }
+
+    public void resume() {
+        if (mResumeAction != null) {
+            mResumeAction.run();
+        }
+        mStatus = STATUS_RESUMED;
+    }
+
+    /**
+     * Hook should always have a resume action, which is hooked by this hook.
+     *
+     * @param runnable
+     */
+    public void setResumeAction(Runnable runnable) {
+        mResumeAction = runnable;
+    }
+}
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-it/values-it.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-it/values-it.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-it/values-it.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-it/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tira per aggiornare…</string>
+    <string name="pull_to_refresh_refreshing_label">Caricamento…</string>
+    <string name="pull_to_refresh_release_label">Rilascia per aggionare…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-he/values-he.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-he/values-he.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-he/values-he.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-he/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+    <string name="pull_to_refresh_refreshing_label">טוען…</string>
+    <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pt-rBR/values-pt-rBR.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pt-rBR/values-pt-rBR.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pt-rBR/values-pt-rBR.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-pt-rBR/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">Carregando…</string>
+    <string name="pull_to_refresh_release_label">Libere para atualizar…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/.classpath
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/.classpath	(revision )
+++ SlidingMeunlibrary/.classpath	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivityBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivityBase.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivityBase.java	(revision )
@@ -0,0 +1,74 @@
+package com.jeremyfeinstein.slidingmenu.lib.app;
+
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
+
+public interface SlidingActivityBase {
+	
+	/**
+	 * Set the behind view content to an explicit view. This view is placed directly into the behind view 's view hierarchy.
+	 * It can itself be a complex view hierarchy.
+	 *
+	 * @param view The desired content to display.
+	 * @param layoutParams Layout parameters for the view.
+	 */
+	public void setBehindContentView(View view, LayoutParams layoutParams);
+
+	/**
+	 * Set the behind view content to an explicit view. This view is placed directly into the behind view 's view hierarchy.
+	 * It can itself be a complex view hierarchy. When calling this method, the layout parameters of the specified
+	 * view are ignored. Both the width and the height of the view are set by default to MATCH_PARENT. To use your
+	 * own layout parameters, invoke setContentView(android.view.View, android.view.ViewGroup.LayoutParams) instead.
+	 *
+	 * @param view The desired content to display.
+	 */
+	public void setBehindContentView(View view);
+
+	/**
+	 * Set the behind view content from a layout resource. The resource will be inflated, adding all top-level views
+	 * to the behind view.
+	 *
+	 * @param layoutResID Resource ID to be inflated.
+	 */
+	public void setBehindContentView(int layoutResID);
+
+	/**
+	 * Gets the SlidingMenu associated with this activity.
+	 *
+	 * @return the SlidingMenu associated with this activity.
+	 */
+	public SlidingMenu getSlidingMenu();
+		
+	/**
+	 * Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.
+	 */
+	public void toggle();
+	
+	/**
+	 * Close the SlidingMenu and show the content view.
+	 */
+	public void showContent();
+	
+	/**
+	 * Open the SlidingMenu and show the menu view.
+	 */
+	public void showMenu();
+
+	/**
+	 * Open the SlidingMenu and show the secondary (right) menu view. Will default to the regular menu
+	 * if there is only one.
+	 */
+	public void showSecondaryMenu();
+	
+	/**
+	 * Controls whether the ActionBar slides along with the above view when the menu is opened,
+	 * or if it stays in place.
+	 *
+	 * @param slidingActionBarEnabled True if you want the ActionBar to slide along with the SlidingMenu,
+	 * false if you want the ActionBar to stay in place
+	 */
+	public void setSlidingActionBarEnabled(boolean slidingActionBarEnabled);
+	
+}
Index: PullToRefreshLibrary/build/intermediates/incremental/mergeResources/androidTest/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/incremental/mergeResources/androidTest/debug/merger.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/incremental/mergeResources/androidTest/debug/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res"><file name="slide_in_from_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\anim\slide_in_from_bottom.xml" qualifiers="" type="anim"/><file name="slide_in_from_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\anim\slide_in_from_top.xml" qualifiers="" type="anim"/><file name="slide_out_to_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\anim\slide_out_to_bottom.xml" qualifiers="" type="anim"/><file name="slide_out_to_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\anim\slide_out_to_top.xml" qualifiers="" type="anim"/><file name="indicator_bg_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable\indicator_bg_bottom.xml" qualifiers="" type="drawable"/><file name="indicator_bg_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable\indicator_bg_top.xml" qualifiers="" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-hdpi\default_ptr_flip.png" qualifiers="hdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-hdpi\default_ptr_rotate.png" qualifiers="hdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-hdpi\indicator_arrow.png" qualifiers="hdpi" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-mdpi\default_ptr_flip.png" qualifiers="mdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-mdpi\default_ptr_rotate.png" qualifiers="mdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-mdpi\indicator_arrow.png" qualifiers="mdpi" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-xhdpi\default_ptr_flip.png" qualifiers="xhdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-xhdpi\default_ptr_rotate.png" qualifiers="xhdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\drawable-xhdpi\indicator_arrow.png" qualifiers="xhdpi" type="drawable"/><file name="pull_to_refresh_header_horizontal" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\layout\pull_to_refresh_header_horizontal.xml" qualifiers="" type="layout"/><file name="pull_to_refresh_header_vertical" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\layout\pull_to_refresh_header_vertical.xml" qualifiers="" type="layout"/><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values\values.xml" qualifiers=""><dimen name="indicator_corner_radius">12dp</dimen><string name="pull_to_refresh_from_bottom_pull_label">@string/pull_to_refresh_pull_label</string><dimen name="indicator_right_padding">10dp</dimen><item name="scrollview" type="id"/><declare-styleable name="PullToRefresh"><attr format="reference|color" name="ptrRefreshableViewBackground"/><attr format="reference|color" name="ptrHeaderBackground"/><attr format="reference|color" name="ptrHeaderTextColor"/><attr format="reference|color" name="ptrHeaderSubTextColor"/><attr name="ptrMode"><flag name="disabled" value="0x0"/><flag name="pullFromStart" value="0x1"/><flag name="pullFromEnd" value="0x2"/><flag name="both" value="0x3"/><flag name="manualOnly" value="0x4"/><flag name="pullDownFromTop" value="0x1"/><flag name="pullUpFromBottom" value="0x2"/></attr><attr format="reference|boolean" name="ptrShowIndicator"/><attr format="reference" name="ptrDrawable"/><attr format="reference" name="ptrDrawableStart"/><attr format="reference" name="ptrDrawableEnd"/><attr format="reference|boolean" name="ptrOverScroll"/><attr format="reference" name="ptrHeaderTextAppearance"/><attr format="reference" name="ptrSubHeaderTextAppearance"/><attr name="ptrAnimationStyle"><flag name="rotate" value="0x0"/><flag name="flip" value="0x1"/></attr><attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/><attr format="reference|boolean" name="ptrListViewExtrasEnabled"/><attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/><attr format="reference|color" name="ptrAdapterViewBackground"/><attr format="reference" name="ptrDrawableTop"/><attr format="reference" name="ptrDrawableBottom"/></declare-styleable><item name="gridview" type="id"/><string name="pull_to_refresh_release_label">Release to refresh…</string><string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string><string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string><dimen name="header_footer_top_bottom_padding">12dp</dimen><item name="webview" type="id"/><dimen name="indicator_internal_padding">4dp</dimen><string name="pull_to_refresh_refreshing_label">Loading…</string><string name="pull_to_refresh_pull_label">Pull to refresh…</string><dimen name="header_footer_left_right_padding">24dp</dimen></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-ar\values-ar.xml" qualifiers="ar"><string name="pull_to_refresh_release_label">اترك للتحديث…</string><string name="pull_to_refresh_refreshing_label">تحميل…</string><string name="pull_to_refresh_pull_label">اسحب للتحديث…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-cs\values-cs.xml" qualifiers="cs"><string name="pull_to_refresh_refreshing_label">Načítání…</string><string name="pull_to_refresh_pull_label">Tažením aktualizujete…</string><string name="pull_to_refresh_release_label">Uvolněním aktualizujete…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-de\values-de.xml" qualifiers="de"><string name="pull_to_refresh_release_label">Loslassen zum Aktualisieren…</string><string name="pull_to_refresh_refreshing_label">Laden…</string><string name="pull_to_refresh_pull_label">Ziehen zum Aktualisieren…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-es\values-es.xml" qualifiers="es"><string name="pull_to_refresh_refreshing_label">Cargando…</string><string name="pull_to_refresh_pull_label">Tirar para actualizar…</string><string name="pull_to_refresh_release_label">Soltar para actualizar…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-fi\values-fi.xml" qualifiers="fi"><string name="pull_to_refresh_release_label">Päivitä vapauttamalla…</string><string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string><string name="pull_to_refresh_pull_label">Päivitä vetämällä alas…</string><string name="pull_to_refresh_from_bottom_pull_label">Päivitä vetämällä ylös…</string><string name="pull_to_refresh_refreshing_label">Päivitetään…</string><string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-fr\values-fr.xml" qualifiers="fr"><string name="pull_to_refresh_refreshing_label">Chargement…</string><string name="pull_to_refresh_release_label">Relâcher pour rafraîchir…</string><string name="pull_to_refresh_pull_label">Tirez pour rafraîchir…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-he\values-he.xml" qualifiers="he"><string name="pull_to_refresh_release_label">שחרר לרענון…</string><string name="pull_to_refresh_pull_label">משוך לרענון…</string><string name="pull_to_refresh_refreshing_label">טוען…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-it\values-it.xml" qualifiers="it"><string name="pull_to_refresh_pull_label">Tira per aggiornare…</string><string name="pull_to_refresh_release_label">Rilascia per aggionare…</string><string name="pull_to_refresh_refreshing_label">Caricamento…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-iw\values-iw.xml" qualifiers="iw"><string name="pull_to_refresh_refreshing_label">טוען…</string><string name="pull_to_refresh_release_label">שחרר לרענון…</string><string name="pull_to_refresh_pull_label">משוך לרענון…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-ja\values-ja.xml" qualifiers="ja"><string name="pull_to_refresh_pull_label">画面を引っ張って…</string><string name="pull_to_refresh_refreshing_label">読み込み中…</string><string name="pull_to_refresh_release_label">指を離して更新…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-ko\values-ko.xml" qualifiers="ko"><string name="pull_to_refresh_pull_label">당겨서 새로 고침…</string><string name="pull_to_refresh_refreshing_label">로드 중…</string><string name="pull_to_refresh_release_label">놓아서 새로 고침…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-nl\values-nl.xml" qualifiers="nl"><string name="pull_to_refresh_pull_label">Sleep om te vernieuwen…</string><string name="pull_to_refresh_release_label">Loslaten om te vernieuwen…</string><string name="pull_to_refresh_refreshing_label">Laden…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-pl\values-pl.xml" qualifiers="pl"><string name="pull_to_refresh_pull_label">Pociągnij, aby odświeżyć…</string><string name="pull_to_refresh_release_label">Puść, aby odświeżyć…</string><string name="pull_to_refresh_refreshing_label">Wczytywanie…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-pt\values-pt.xml" qualifiers="pt"><string name="pull_to_refresh_pull_label">Puxe para atualizar…</string><string name="pull_to_refresh_refreshing_label">A carregar…</string><string name="pull_to_refresh_release_label">Liberação para atualizar…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-pt-rBR\values-pt-rBR.xml" qualifiers="pt-rBR"><string name="pull_to_refresh_pull_label">Puxe para atualizar…</string><string name="pull_to_refresh_release_label">Libere para atualizar…</string><string name="pull_to_refresh_refreshing_label">Carregando…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-ro\values-ro.xml" qualifiers="ro"><string name="pull_to_refresh_pull_label">Trage pentru a reîmprospăta…</string><string name="pull_to_refresh_refreshing_label">Încărcare…</string><string name="pull_to_refresh_release_label">Eliberează pentru a reîmprospăta…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-ru\values-ru.xml" qualifiers="ru"><string name="pull_to_refresh_release_label">Отпустите для обновления…</string><string name="pull_to_refresh_refreshing_label">Загрузка…</string><string name="pull_to_refresh_pull_label">Потяните для обновления…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\res\values-zh\values-zh.xml" qualifiers="zh"><string name="pull_to_refresh_release_label">放开以刷新…</string><string name="pull_to_refresh_pull_label">下拉刷新…</string><string name="pull_to_refresh_refreshing_label">正在载入…</string></file></source></dataSet><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\androidTest\res"/><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\generated\res\rs\androidTest\debug"/><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\generated\res\generated\androidTest\debug"/></dataSet><mergedItems><configuration qualifiers=""><declare-styleable name="PullToRefresh"><attr format="reference|color" name="ptrRefreshableViewBackground"/><attr format="reference|color" name="ptrHeaderBackground"/><attr format="reference|color" name="ptrHeaderTextColor"/><attr format="reference|color" name="ptrHeaderSubTextColor"/><attr name="ptrMode"><flag name="disabled" value="0x0"/><flag name="pullFromStart" value="0x1"/><flag name="pullFromEnd" value="0x2"/><flag name="both" value="0x3"/><flag name="manualOnly" value="0x4"/><flag name="pullDownFromTop" value="0x1"/><flag name="pullUpFromBottom" value="0x2"/></attr><attr format="reference|boolean" name="ptrShowIndicator"/><attr format="reference" name="ptrDrawable"/><attr format="reference" name="ptrDrawableStart"/><attr format="reference" name="ptrDrawableEnd"/><attr format="reference|boolean" name="ptrOverScroll"/><attr format="reference" name="ptrHeaderTextAppearance"/><attr format="reference" name="ptrSubHeaderTextAppearance"/><attr name="ptrAnimationStyle"><flag name="rotate" value="0x0"/><flag name="flip" value="0x1"/></attr><attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/><attr format="reference|boolean" name="ptrListViewExtrasEnabled"/><attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/><attr format="reference|color" name="ptrAdapterViewBackground"/><attr format="reference" name="ptrDrawableTop"/><attr format="reference" name="ptrDrawableBottom"/></declare-styleable></configuration></mergedItems></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-de/values-de.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-de/values-de.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-de/values-de.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-de/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Ziehen zum Aktualisieren…</string>
+    <string name="pull_to_refresh_refreshing_label">Laden…</string>
+    <string name="pull_to_refresh_release_label">Loslassen zum Aktualisieren…</string>
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/dimens.xml	(revision )
+++ app/src/main/res/values/dimens.xml	(revision )
@@ -0,0 +1,10 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="fab_margin">16dp</dimen>
+    <dimen name="slidingmenu_offset">60dp</dimen>
+    <dimen name="shadow_width">15dp</dimen>
+    <dimen name="slidingmenu_height">60dp</dimen>
+
+</resources>
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java	(revision )
@@ -0,0 +1,475 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewParent;
+import android.widget.AbsListView;
+import android.widget.AbsListView.OnScrollListener;
+import android.widget.Adapter;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.ListAdapter;
+
+import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;
+import com.handmark.pulltorefresh.library.internal.IndicatorLayout;
+
+public abstract class PullToRefreshAdapterViewBase<T extends AbsListView> extends PullToRefreshBase<T> implements
+		OnScrollListener {
+
+	private static FrameLayout.LayoutParams convertEmptyViewLayoutParams(ViewGroup.LayoutParams lp) {
+		FrameLayout.LayoutParams newLp = null;
+
+		if (null != lp) {
+			newLp = new FrameLayout.LayoutParams(lp);
+
+			if (lp instanceof LinearLayout.LayoutParams) {
+				newLp.gravity = ((LinearLayout.LayoutParams) lp).gravity;
+			} else {
+				newLp.gravity = Gravity.CENTER;
+			}
+		}
+
+		return newLp;
+	}
+
+	private boolean mLastItemVisible;
+	private OnScrollListener mOnScrollListener;
+	private OnLastItemVisibleListener mOnLastItemVisibleListener;
+	private View mEmptyView;
+
+	private IndicatorLayout mIndicatorIvTop;
+	private IndicatorLayout mIndicatorIvBottom;
+
+	private boolean mShowIndicator;
+	private boolean mScrollEmptyView = true;
+
+	public PullToRefreshAdapterViewBase(Context context) {
+		super(context);
+		mRefreshableView.setOnScrollListener(this);
+	}
+
+	public PullToRefreshAdapterViewBase(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		mRefreshableView.setOnScrollListener(this);
+	}
+
+	public PullToRefreshAdapterViewBase(Context context, Mode mode) {
+		super(context, mode);
+		mRefreshableView.setOnScrollListener(this);
+	}
+
+	public PullToRefreshAdapterViewBase(Context context, Mode mode, AnimationStyle animStyle) {
+		super(context, mode, animStyle);
+		mRefreshableView.setOnScrollListener(this);
+	}
+
+	/**
+	 * Gets whether an indicator graphic should be displayed when the View is in
+	 * a state where a Pull-to-Refresh can happen. An example of this state is
+	 * when the Adapter View is scrolled to the top and the mode is set to
+	 * {@link Mode#PULL_FROM_START}. The default value is <var>true</var> if
+	 * {@link PullToRefreshBase#isPullToRefreshOverScrollEnabled()
+	 * isPullToRefreshOverScrollEnabled()} returns false.
+	 * 
+	 * @return true if the indicators will be shown
+	 */
+	public boolean getShowIndicator() {
+		return mShowIndicator;
+	}
+
+	public final void onScroll(final AbsListView view, final int firstVisibleItem, final int visibleItemCount,
+			final int totalItemCount) {
+
+		if (DEBUG) {
+			Log.d(LOG_TAG, "First Visible: " + firstVisibleItem + ". Visible Count: " + visibleItemCount
+					+ ". Total Items:" + totalItemCount);
+		}
+
+		/**
+		 * Set whether the Last Item is Visible. lastVisibleItemIndex is a
+		 * zero-based index, so we minus one totalItemCount to check
+		 */
+		if (null != mOnLastItemVisibleListener) {
+			mLastItemVisible = (totalItemCount > 0) && (firstVisibleItem + visibleItemCount >= totalItemCount - 1);
+		}
+
+		// If we're showing the indicator, check positions...
+		if (getShowIndicatorInternal()) {
+			updateIndicatorViewsVisibility();
+		}
+
+		// Finally call OnScrollListener if we have one
+		if (null != mOnScrollListener) {
+			mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
+		}
+	}
+
+	public final void onScrollStateChanged(final AbsListView view, final int state) {
+		/**
+		 * Check that the scrolling has stopped, and that the last item is
+		 * visible.
+		 */
+		if (state == OnScrollListener.SCROLL_STATE_IDLE && null != mOnLastItemVisibleListener && mLastItemVisible) {
+			mOnLastItemVisibleListener.onLastItemVisible();
+		}
+
+		if (null != mOnScrollListener) {
+			mOnScrollListener.onScrollStateChanged(view, state);
+		}
+	}
+
+	/**
+	 * Pass-through method for {@link PullToRefreshBase#getRefreshableView()
+	 * getRefreshableView()}.
+	 * {@link AdapterView#setAdapter(android.widget.Adapter)}
+	 * setAdapter(adapter)}. This is just for convenience!
+	 * 
+	 * @param adapter - Adapter to set
+	 */
+	public void setAdapter(ListAdapter adapter) {
+		((AdapterView<ListAdapter>) mRefreshableView).setAdapter(adapter);
+	}
+
+	/**
+	 * Sets the Empty View to be used by the Adapter View.
+	 * <p/>
+	 * We need it handle it ourselves so that we can Pull-to-Refresh when the
+	 * Empty View is shown.
+	 * <p/>
+	 * Please note, you do <strong>not</strong> usually need to call this method
+	 * yourself. Calling setEmptyView on the AdapterView will automatically call
+	 * this method and set everything up. This includes when the Android
+	 * Framework automatically sets the Empty View based on it's ID.
+	 * 
+	 * @param newEmptyView - Empty View to be used
+	 */
+	public final void setEmptyView(View newEmptyView) {
+		FrameLayout refreshableViewWrapper = getRefreshableViewWrapper();
+
+		if (null != newEmptyView) {
+			// New view needs to be clickable so that Android recognizes it as a
+			// target for Touch Events
+			newEmptyView.setClickable(true);
+
+			ViewParent newEmptyViewParent = newEmptyView.getParent();
+			if (null != newEmptyViewParent && newEmptyViewParent instanceof ViewGroup) {
+				((ViewGroup) newEmptyViewParent).removeView(newEmptyView);
+			}
+
+			// We need to convert any LayoutParams so that it works in our
+			// FrameLayout
+			FrameLayout.LayoutParams lp = convertEmptyViewLayoutParams(newEmptyView.getLayoutParams());
+			if (null != lp) {
+				refreshableViewWrapper.addView(newEmptyView, lp);
+			} else {
+				refreshableViewWrapper.addView(newEmptyView);
+			}
+		}
+
+		if (mRefreshableView instanceof EmptyViewMethodAccessor) {
+			((EmptyViewMethodAccessor) mRefreshableView).setEmptyViewInternal(newEmptyView);
+		} else {
+			mRefreshableView.setEmptyView(newEmptyView);
+		}
+		mEmptyView = newEmptyView;
+	}
+
+	/**
+	 * Pass-through method for {@link PullToRefreshBase#getRefreshableView()
+	 * getRefreshableView()}.
+	 * {@link AdapterView#setOnItemClickListener(OnItemClickListener)
+	 * setOnItemClickListener(listener)}. This is just for convenience!
+	 * 
+	 * @param listener - OnItemClickListener to use
+	 */
+	public void setOnItemClickListener(OnItemClickListener listener) {
+		mRefreshableView.setOnItemClickListener(listener);
+	}
+
+	public final void setOnLastItemVisibleListener(OnLastItemVisibleListener listener) {
+		mOnLastItemVisibleListener = listener;
+	}
+
+	public final void setOnScrollListener(OnScrollListener listener) {
+		mOnScrollListener = listener;
+	}
+
+	public final void setScrollEmptyView(boolean doScroll) {
+		mScrollEmptyView = doScroll;
+	}
+
+	/**
+	 * Sets whether an indicator graphic should be displayed when the View is in
+	 * a state where a Pull-to-Refresh can happen. An example of this state is
+	 * when the Adapter View is scrolled to the top and the mode is set to
+	 * {@link Mode#PULL_FROM_START}
+	 * 
+	 * @param showIndicator - true if the indicators should be shown.
+	 */
+	public void setShowIndicator(boolean showIndicator) {
+		mShowIndicator = showIndicator;
+
+		if (getShowIndicatorInternal()) {
+			// If we're set to Show Indicator, add/update them
+			addIndicatorViews();
+		} else {
+			// If not, then remove then
+			removeIndicatorViews();
+		}
+	}
+
+	;
+
+	@Override
+	protected void onPullToRefresh() {
+		super.onPullToRefresh();
+
+		if (getShowIndicatorInternal()) {
+			switch (getCurrentMode()) {
+				case PULL_FROM_END:
+					mIndicatorIvBottom.pullToRefresh();
+					break;
+				case PULL_FROM_START:
+					mIndicatorIvTop.pullToRefresh();
+					break;
+				default:
+					// NO-OP
+					break;
+			}
+		}
+	}
+
+	protected void onRefreshing(boolean doScroll) {
+		super.onRefreshing(doScroll);
+
+		if (getShowIndicatorInternal()) {
+			updateIndicatorViewsVisibility();
+		}
+	}
+
+	@Override
+	protected void onReleaseToRefresh() {
+		super.onReleaseToRefresh();
+
+		if (getShowIndicatorInternal()) {
+			switch (getCurrentMode()) {
+				case PULL_FROM_END:
+					mIndicatorIvBottom.releaseToRefresh();
+					break;
+				case PULL_FROM_START:
+					mIndicatorIvTop.releaseToRefresh();
+					break;
+				default:
+					// NO-OP
+					break;
+			}
+		}
+	}
+
+	@Override
+	protected void onReset() {
+		super.onReset();
+
+		if (getShowIndicatorInternal()) {
+			updateIndicatorViewsVisibility();
+		}
+	}
+
+	@Override
+	protected void handleStyledAttributes(TypedArray a) {
+		// Set Show Indicator to the XML value, or default value
+		mShowIndicator = a.getBoolean(R.styleable.PullToRefresh_ptrShowIndicator, !isPullToRefreshOverScrollEnabled());
+	}
+
+	protected boolean isReadyForPullStart() {
+		return isFirstItemVisible();
+	}
+
+	protected boolean isReadyForPullEnd() {
+		return isLastItemVisible();
+	}
+
+	@Override
+	protected void onScrollChanged(int l, int t, int oldl, int oldt) {
+		super.onScrollChanged(l, t, oldl, oldt);
+		if (null != mEmptyView && !mScrollEmptyView) {
+			mEmptyView.scrollTo(-l, -t);
+		}
+	}
+
+	@Override
+	protected void updateUIForMode() {
+		super.updateUIForMode();
+
+		// Check Indicator Views consistent with new Mode
+		if (getShowIndicatorInternal()) {
+			addIndicatorViews();
+		} else {
+			removeIndicatorViews();
+		}
+	}
+
+	private void addIndicatorViews() {
+		Mode mode = getMode();
+		FrameLayout refreshableViewWrapper = getRefreshableViewWrapper();
+
+		if (mode.showHeaderLoadingLayout() && null == mIndicatorIvTop) {
+			// If the mode can pull down, and we don't have one set already
+			mIndicatorIvTop = new IndicatorLayout(getContext(), Mode.PULL_FROM_START);
+			FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
+					ViewGroup.LayoutParams.WRAP_CONTENT);
+			params.rightMargin = getResources().getDimensionPixelSize(R.dimen.indicator_right_padding);
+			params.gravity = Gravity.TOP | Gravity.RIGHT;
+			refreshableViewWrapper.addView(mIndicatorIvTop, params);
+
+		} else if (!mode.showHeaderLoadingLayout() && null != mIndicatorIvTop) {
+			// If we can't pull down, but have a View then remove it
+			refreshableViewWrapper.removeView(mIndicatorIvTop);
+			mIndicatorIvTop = null;
+		}
+
+		if (mode.showFooterLoadingLayout() && null == mIndicatorIvBottom) {
+			// If the mode can pull down, and we don't have one set already
+			mIndicatorIvBottom = new IndicatorLayout(getContext(), Mode.PULL_FROM_END);
+			FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
+					ViewGroup.LayoutParams.WRAP_CONTENT);
+			params.rightMargin = getResources().getDimensionPixelSize(R.dimen.indicator_right_padding);
+			params.gravity = Gravity.BOTTOM | Gravity.RIGHT;
+			refreshableViewWrapper.addView(mIndicatorIvBottom, params);
+
+		} else if (!mode.showFooterLoadingLayout() && null != mIndicatorIvBottom) {
+			// If we can't pull down, but have a View then remove it
+			refreshableViewWrapper.removeView(mIndicatorIvBottom);
+			mIndicatorIvBottom = null;
+		}
+	}
+
+	private boolean getShowIndicatorInternal() {
+		return mShowIndicator && isPullToRefreshEnabled();
+	}
+
+	private boolean isFirstItemVisible() {
+		final Adapter adapter = mRefreshableView.getAdapter();
+
+		if (null == adapter || adapter.isEmpty()) {
+			if (DEBUG) {
+				Log.d(LOG_TAG, "isFirstItemVisible. Empty View.");
+			}
+			return true;
+
+		} else {
+
+			/**
+			 * This check should really just be:
+			 * mRefreshableView.getFirstVisiblePosition() == 0, but PtRListView
+			 * internally use a HeaderView which messes the positions up. For
+			 * now we'll just add one to account for it and rely on the inner
+			 * condition which checks getTop().
+			 */
+			if (mRefreshableView.getFirstVisiblePosition() <= 1) {
+				final View firstVisibleChild = mRefreshableView.getChildAt(0);
+				if (firstVisibleChild != null) {
+					return firstVisibleChild.getTop() >= mRefreshableView.getTop();
+				}
+			}
+		}
+
+		return false;
+	}
+
+	private boolean isLastItemVisible() {
+		final Adapter adapter = mRefreshableView.getAdapter();
+
+		if (null == adapter || adapter.isEmpty()) {
+			if (DEBUG) {
+				Log.d(LOG_TAG, "isLastItemVisible. Empty View.");
+			}
+			return true;
+		} else {
+			final int lastItemPosition = mRefreshableView.getCount() - 1;
+			final int lastVisiblePosition = mRefreshableView.getLastVisiblePosition();
+
+			if (DEBUG) {
+				Log.d(LOG_TAG, "isLastItemVisible. Last Item Position: " + lastItemPosition + " Last Visible Pos: "
+						+ lastVisiblePosition);
+			}
+
+			/**
+			 * This check should really just be: lastVisiblePosition ==
+			 * lastItemPosition, but PtRListView internally uses a FooterView
+			 * which messes the positions up. For me we'll just subtract one to
+			 * account for it and rely on the inner condition which checks
+			 * getBottom().
+			 */
+			if (lastVisiblePosition >= lastItemPosition - 1) {
+				final int childIndex = lastVisiblePosition - mRefreshableView.getFirstVisiblePosition();
+				final View lastVisibleChild = mRefreshableView.getChildAt(childIndex);
+				if (lastVisibleChild != null) {
+					return lastVisibleChild.getBottom() <= mRefreshableView.getBottom();
+				}
+			}
+		}
+
+		return false;
+	}
+
+	private void removeIndicatorViews() {
+		if (null != mIndicatorIvTop) {
+			getRefreshableViewWrapper().removeView(mIndicatorIvTop);
+			mIndicatorIvTop = null;
+		}
+
+		if (null != mIndicatorIvBottom) {
+			getRefreshableViewWrapper().removeView(mIndicatorIvBottom);
+			mIndicatorIvBottom = null;
+		}
+	}
+
+	private void updateIndicatorViewsVisibility() {
+		if (null != mIndicatorIvTop) {
+			if (!isRefreshing() && isReadyForPullStart()) {
+				if (!mIndicatorIvTop.isVisible()) {
+					mIndicatorIvTop.show();
+				}
+			} else {
+				if (mIndicatorIvTop.isVisible()) {
+					mIndicatorIvTop.hide();
+				}
+			}
+		}
+
+		if (null != mIndicatorIvBottom) {
+			if (!isRefreshing() && isReadyForPullEnd()) {
+				if (!mIndicatorIvBottom.isVisible()) {
+					mIndicatorIvBottom.show();
+				}
+			} else {
+				if (mIndicatorIvBottom.isVisible()) {
+					mIndicatorIvBottom.hide();
+				}
+			}
+		}
+	}
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pt/values-pt.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pt/values-pt.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pt/values-pt.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-pt/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">A carregar…</string>
+    <string name="pull_to_refresh_release_label">Liberação para atualizar…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/layout/pull_to_refresh_header_vertical.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/layout/pull_to_refresh_header_vertical.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/layout/pull_to_refresh_header_vertical.xml	(revision )
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="left|center_vertical" >
+
+            <ImageView
+                android:id="@+id/pull_to_refresh_image"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center" />
+
+            <ProgressBar
+                android:id="@+id/pull_to_refresh_progress"
+                style="?android:attr/progressBarStyleSmall"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:indeterminate="true"
+                android:visibility="gone" />
+        </FrameLayout>
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:gravity="center_horizontal"
+            android:orientation="vertical" >
+
+            <TextView
+                android:id="@+id/pull_to_refresh_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearance"
+                android:textStyle="bold" />
+
+            <TextView
+                android:id="@+id/pull_to_refresh_sub_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:visibility="gone" />
+        </LinearLayout>
+    </FrameLayout>
+
+</merge><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_vertical.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_vertical.xml -->
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/indicator/PtrTensionIndicator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/indicator/PtrTensionIndicator.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/indicator/PtrTensionIndicator.java	(revision )
@@ -0,0 +1,119 @@
+package in.srain.cube.views.ptr.indicator;
+
+public class PtrTensionIndicator extends PtrIndicator {
+
+    private float DRAG_RATE = 0.5f;
+    private float mDownY;
+    private float mDownPos;
+    private float mOneHeight = 0;
+
+    private float mCurrentDragPercent;
+
+    private int mReleasePos;
+    private float mReleasePercent = -1;
+
+    @Override
+    public void onPressDown(float x, float y) {
+        super.onPressDown(x, y);
+        mDownY = y;
+        mDownPos = getCurrentPosY();
+    }
+
+    @Override
+    public void onRelease() {
+        super.onRelease();
+        mReleasePos = getCurrentPosY();
+        mReleasePercent = mCurrentDragPercent;
+    }
+
+    @Override
+    public void onUIRefreshComplete() {
+        mReleasePos = getCurrentPosY();
+        mReleasePercent = getOverDragPercent();
+    }
+
+    @Override
+    public void setHeaderHeight(int height) {
+        super.setHeaderHeight(height);
+        mOneHeight = height * 4f / 5;
+    }
+
+    @Override
+    protected void processOnMove(float currentX, float currentY, float offsetX, float offsetY) {
+
+        if (currentY < mDownY) {
+            super.processOnMove(currentX, currentY, offsetX, offsetY);
+            return;
+        }
+
+        // distance from top
+        final float scrollTop = (currentY - mDownY) * DRAG_RATE + mDownPos;
+        final float currentDragPercent = scrollTop / mOneHeight;
+
+        if (currentDragPercent < 0) {
+            setOffset(offsetX, 0);
+            return;
+        }
+
+        mCurrentDragPercent = currentDragPercent;
+
+        // 0 ~ 1
+        float boundedDragPercent = Math.min(1f, Math.abs(currentDragPercent));
+        float extraOS = scrollTop - mOneHeight;
+
+        // 0 ~ 2
+        // if extraOS lower than 0, which means scrollTop lower than onHeight, tensionSlingshotPercent will be 0.
+        float tensionSlingshotPercent = Math.max(0, Math.min(extraOS, mOneHeight * 2) / mOneHeight);
+
+        float tensionPercent = (float) ((tensionSlingshotPercent / 4) - Math.pow((tensionSlingshotPercent / 4), 2)) * 2f;
+        float extraMove = (mOneHeight) * tensionPercent / 2;
+        int targetY = (int) ((mOneHeight * boundedDragPercent) + extraMove);
+        int change = targetY - getCurrentPosY();
+
+        setOffset(currentX, change);
+    }
+
+    private float offsetToTarget(float scrollTop) {
+
+        // distance from top
+        final float currentDragPercent = scrollTop / mOneHeight;
+
+        mCurrentDragPercent = currentDragPercent;
+
+        // 0 ~ 1
+        float boundedDragPercent = Math.min(1f, Math.abs(currentDragPercent));
+        float extraOS = scrollTop - mOneHeight;
+
+        // 0 ~ 2
+        // if extraOS lower than 0, which means scrollTop lower than mOneHeight, tensionSlingshotPercent will be 0.
+        float tensionSlingshotPercent = Math.max(0, Math.min(extraOS, mOneHeight * 2) / mOneHeight);
+
+        float tensionPercent = (float) ((tensionSlingshotPercent / 4) - Math.pow((tensionSlingshotPercent / 4), 2)) * 2f;
+        float extraMove = (mOneHeight) * tensionPercent / 2;
+        int targetY = (int) ((mOneHeight * boundedDragPercent) + extraMove);
+
+        return 0;
+    }
+
+    @Override
+    public int getOffsetToKeepHeaderWhileLoading() {
+        return getOffsetToRefresh();
+    }
+
+    @Override
+    public int getOffsetToRefresh() {
+        return (int) mOneHeight;
+    }
+
+    public float getOverDragPercent() {
+        if (isUnderTouch()) {
+            return mCurrentDragPercent;
+        } else {
+            if (mReleasePercent <= 0) {
+                return 1.0f * getCurrentPosY() / getOffsetToKeepHeaderWhileLoading();
+            }
+            // after release
+            return mReleasePercent * getCurrentPosY() / mReleasePos;
+        }
+    }
+}
Index: PullToRefreshLibrary/src/main/res/values/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="pull_to_refresh_pull_label">Pull to refresh…</string>
+    <string name="pull_to_refresh_release_label">Release to refresh…</string>
+    <string name="pull_to_refresh_refreshing_label">Loading…</string>
+
+    <!-- Just use standard Pull Down String when pulling up. These can be set for languages which require it -->
+    <string name="pull_to_refresh_from_bottom_pull_label">@string/pull_to_refresh_pull_label</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/res/androidTest/debug/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/res/androidTest/debug/values/values.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/res/androidTest/debug/values/values.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="SlidingMenu"><attr name="mode"><enum name="left" value="0"/><enum name="right" value="1"/></attr><attr format="reference" name="viewAbove"/><attr format="reference" name="viewBehind"/><attr format="dimension" name="behindOffset"/><attr format="dimension" name="behindWidth"/><attr format="float" name="behindScrollScale"/><attr name="touchModeAbove"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr name="touchModeBehind"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr format="reference" name="shadowDrawable"/><attr format="dimension" name="shadowWidth"/><attr format="boolean" name="fadeEnabled"/><attr format="float" name="fadeDegree"/><attr format="boolean" name="selectorEnabled"/><attr format="reference" name="selectorDrawable"/></declare-styleable>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/SlidingMeunlibrary/build/intermediates/bundles/debug/res/values/values.xml -->
+    <eat-comment/>
+    <item name="selected_view" type="id"/>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/generated/source/r/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/test/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/generated/source/r/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/test/R.java	(revision )
+++ SlidingMeunlibrary/build/generated/source/r/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/test/R.java	(revision )
@@ -0,0 +1,379 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+
+package com.jeremyfeinstein.slidingmenu.lib.test;
+
+public final class R {
+    public static final class attr {
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int behindOffset=0x7f010003;
+        /** <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int behindScrollScale=0x7f010005;
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int behindWidth=0x7f010004;
+        /** <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int fadeDegree=0x7f01000b;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int fadeEnabled=0x7f01000a;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>left</code></td><td>0</td><td></td></tr>
+<tr><td><code>right</code></td><td>1</td><td></td></tr>
+</table>
+         */
+        public static final int mode=0x7f010000;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int selectorDrawable=0x7f01000d;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int selectorEnabled=0x7f01000c;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int shadowDrawable=0x7f010008;
+        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int shadowWidth=0x7f010009;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+         */
+        public static final int touchModeAbove=0x7f010006;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+         */
+        public static final int touchModeBehind=0x7f010007;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int viewAbove=0x7f010001;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int viewBehind=0x7f010002;
+    }
+    public static final class id {
+        public static final int fullscreen=0x7f030003;
+        public static final int left=0x7f030001;
+        public static final int margin=0x7f030004;
+        public static final int none=0x7f030005;
+        public static final int right=0x7f030002;
+        public static final int selected_view=0x7f030000;
+        public static final int slidingmenumain=0x7f030006;
+    }
+    public static final class layout {
+        public static final int slidingmenumain=0x7f020000;
+    }
+    public static final class styleable {
+        /** Attributes that can be used with a SlidingMenu.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #SlidingMenu_behindOffset com.jeremyfeinstein.slidingmenu.lib.test:behindOffset}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_behindScrollScale com.jeremyfeinstein.slidingmenu.lib.test:behindScrollScale}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_behindWidth com.jeremyfeinstein.slidingmenu.lib.test:behindWidth}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_fadeDegree com.jeremyfeinstein.slidingmenu.lib.test:fadeDegree}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_fadeEnabled com.jeremyfeinstein.slidingmenu.lib.test:fadeEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_mode com.jeremyfeinstein.slidingmenu.lib.test:mode}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_selectorDrawable com.jeremyfeinstein.slidingmenu.lib.test:selectorDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_selectorEnabled com.jeremyfeinstein.slidingmenu.lib.test:selectorEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_shadowDrawable com.jeremyfeinstein.slidingmenu.lib.test:shadowDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_shadowWidth com.jeremyfeinstein.slidingmenu.lib.test:shadowWidth}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_touchModeAbove com.jeremyfeinstein.slidingmenu.lib.test:touchModeAbove}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_touchModeBehind com.jeremyfeinstein.slidingmenu.lib.test:touchModeBehind}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_viewAbove com.jeremyfeinstein.slidingmenu.lib.test:viewAbove}</code></td><td></td></tr>
+           <tr><td><code>{@link #SlidingMenu_viewBehind com.jeremyfeinstein.slidingmenu.lib.test:viewBehind}</code></td><td></td></tr>
+           </table>
+           @see #SlidingMenu_behindOffset
+           @see #SlidingMenu_behindScrollScale
+           @see #SlidingMenu_behindWidth
+           @see #SlidingMenu_fadeDegree
+           @see #SlidingMenu_fadeEnabled
+           @see #SlidingMenu_mode
+           @see #SlidingMenu_selectorDrawable
+           @see #SlidingMenu_selectorEnabled
+           @see #SlidingMenu_shadowDrawable
+           @see #SlidingMenu_shadowWidth
+           @see #SlidingMenu_touchModeAbove
+           @see #SlidingMenu_touchModeBehind
+           @see #SlidingMenu_viewAbove
+           @see #SlidingMenu_viewBehind
+         */
+        public static final int[] SlidingMenu = {
+            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
+            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
+            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
+            0x7f01000c, 0x7f01000d
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#behindOffset}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:behindOffset
+        */
+        public static final int SlidingMenu_behindOffset = 3;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#behindScrollScale}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:behindScrollScale
+        */
+        public static final int SlidingMenu_behindScrollScale = 5;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#behindWidth}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:behindWidth
+        */
+        public static final int SlidingMenu_behindWidth = 4;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#fadeDegree}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a floating point value, such as "<code>1.2</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:fadeDegree
+        */
+        public static final int SlidingMenu_fadeDegree = 11;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#fadeEnabled}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:fadeEnabled
+        */
+        public static final int SlidingMenu_fadeEnabled = 10;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#mode}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>left</code></td><td>0</td><td></td></tr>
+<tr><td><code>right</code></td><td>1</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:mode
+        */
+        public static final int SlidingMenu_mode = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#selectorDrawable}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:selectorDrawable
+        */
+        public static final int SlidingMenu_selectorDrawable = 13;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#selectorEnabled}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:selectorEnabled
+        */
+        public static final int SlidingMenu_selectorEnabled = 12;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#shadowDrawable}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:shadowDrawable
+        */
+        public static final int SlidingMenu_shadowDrawable = 8;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#shadowWidth}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
+Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
+in (inches), mm (millimeters).
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:shadowWidth
+        */
+        public static final int SlidingMenu_shadowWidth = 9;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#touchModeAbove}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:touchModeAbove
+        */
+        public static final int SlidingMenu_touchModeAbove = 6;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#touchModeBehind}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>margin</code></td><td>0</td><td></td></tr>
+<tr><td><code>fullscreen</code></td><td>1</td><td></td></tr>
+<tr><td><code>none</code></td><td>2</td><td></td></tr>
+</table>
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:touchModeBehind
+        */
+        public static final int SlidingMenu_touchModeBehind = 7;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#viewAbove}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:viewAbove
+        */
+        public static final int SlidingMenu_viewAbove = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.jeremyfeinstein.slidingmenu.lib.test.R.attr#viewBehind}
+          attribute's value can be found in the {@link #SlidingMenu} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.jeremyfeinstein.slidingmenu.lib.test:viewBehind
+        */
+        public static final int SlidingMenu_viewBehind = 2;
+    };
+}
Index: PullToRefreshLibrary/src/main/res/drawable/indicator_bg_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/drawable/indicator_bg_bottom.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/drawable/indicator_bg_bottom.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="0dp"
+        android:bottomRightRadius="0dp"
+        android:radius="1dp"
+        android:topLeftRadius="@dimen/indicator_corner_radius"
+        android:topRightRadius="@dimen/indicator_corner_radius" />
+
+</shape>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/bundles/debug/R.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/debug/R.txt	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/debug/R.txt	(revision )
@@ -0,0 +1,37 @@
+int attr behindOffset 0x7f010003
+int attr behindScrollScale 0x7f010005
+int attr behindWidth 0x7f010004
+int attr fadeDegree 0x7f01000b
+int attr fadeEnabled 0x7f01000a
+int attr mode 0x7f010000
+int attr selectorDrawable 0x7f01000d
+int attr selectorEnabled 0x7f01000c
+int attr shadowDrawable 0x7f010008
+int attr shadowWidth 0x7f010009
+int attr touchModeAbove 0x7f010006
+int attr touchModeBehind 0x7f010007
+int attr viewAbove 0x7f010001
+int attr viewBehind 0x7f010002
+int id fullscreen 0x7f030003
+int id left 0x7f030001
+int id margin 0x7f030004
+int id none 0x7f030005
+int id right 0x7f030002
+int id selected_view 0x7f030000
+int id slidingmenumain 0x7f030006
+int layout slidingmenumain 0x7f020000
+int[] styleable SlidingMenu { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d }
+int styleable SlidingMenu_behindOffset 3
+int styleable SlidingMenu_behindScrollScale 5
+int styleable SlidingMenu_behindWidth 4
+int styleable SlidingMenu_fadeDegree 11
+int styleable SlidingMenu_fadeEnabled 10
+int styleable SlidingMenu_mode 0
+int styleable SlidingMenu_selectorDrawable 13
+int styleable SlidingMenu_selectorEnabled 12
+int styleable SlidingMenu_shadowDrawable 8
+int styleable SlidingMenu_shadowWidth 9
+int styleable SlidingMenu_touchModeAbove 6
+int styleable SlidingMenu_touchModeBehind 7
+int styleable SlidingMenu_viewAbove 1
+int styleable SlidingMenu_viewBehind 2
Index: app/src/main/res/layout/layout_left_nemu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/layout_left_nemu.xml	(revision )
+++ app/src/main/res/layout/layout_left_nemu.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    android:id="@+id/ll_left_menu"
+    android:orientation="vertical">
+
+</LinearLayout>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-de/values-de.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-de/values-de.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-de/values-de.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-de/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Ziehen zum Aktualisieren…</string>
+    <string name="pull_to_refresh_refreshing_label">Laden…</string>
+    <string name="pull_to_refresh_release_label">Loslassen zum Aktualisieren…</string>
+</resources>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/res/values/cube_ptr_attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/res/values/cube_ptr_attrs.xml	(revision )
+++ ultrapulltorefreshlibrary/src/main/res/values/cube_ptr_attrs.xml	(revision )
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <declare-styleable name="PtrFrameLayout">
+        <!-- Optional. If you put header and content in xml, you can you these to specify them. -->
+        <attr name="ptr_header" format="reference" />
+        <attr name="ptr_content" format="reference" />
+
+        <!-- the resistance when you are moving the frame -->
+        <attr name="ptr_resistance" format="float" />
+
+        <!-- the ration of the height of the header to trigger refresh -->
+        <attr name="ptr_ratio_of_header_height_to_refresh" format="float" />
+
+        <attr name="ptr_duration_to_close" format="integer" />
+        <attr name="ptr_duration_to_close_header" format="integer" />
+
+        <!-- pull to refresh, otherwise release to refresh, default is release to refresh -->
+        <attr name="ptr_pull_to_fresh" format="boolean" />
+
+        <!-- keep header when refreshing-->
+        <attr name="ptr_keep_header_when_refresh" format="boolean" />
+    </declare-styleable>
+
+    <declare-styleable name="PtrClassicHeader">
+        <attr name="ptr_rotate_ani_time" format="integer" />
+    </declare-styleable>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/drawable/indicator_bg_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/drawable/indicator_bg_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/drawable/indicator_bg_bottom.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="0dp"
+        android:bottomRightRadius="0dp"
+        android:radius="1dp"
+        android:topLeftRadius="@dimen/indicator_corner_radius"
+        android:topRightRadius="@dimen/indicator_corner_radius" />
+
+</shape><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/drawable/indicator_bg_bottom.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_bottom.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ru/values-ru.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ru/values-ru.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ru/values-ru.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ru/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Потяните для обновления…</string>
+    <string name="pull_to_refresh_refreshing_label">Загрузка…</string>
+    <string name="pull_to_refresh_release_label">Отпустите для обновления…</string>
+</resources>
\ No newline at end of file
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/Handle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/Handle.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/Handle.java	(revision )
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.cropwindow.handle;
+
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.cropwindow.edge.Edge;
+
+/**
+ * Enum representing a pressable, draggable Handle on the crop window.
+ */
+public enum Handle {
+
+    TOP_LEFT(new CornerHandleHelper(Edge.TOP, Edge.LEFT)),
+    TOP_RIGHT(new CornerHandleHelper(Edge.TOP, Edge.RIGHT)),
+    BOTTOM_LEFT(new CornerHandleHelper(Edge.BOTTOM, Edge.LEFT)),
+    BOTTOM_RIGHT(new CornerHandleHelper(Edge.BOTTOM, Edge.RIGHT)),
+    LEFT(new VerticalHandleHelper(Edge.LEFT)),
+    TOP(new HorizontalHandleHelper(Edge.TOP)),
+    RIGHT(new VerticalHandleHelper(Edge.RIGHT)),
+    BOTTOM(new HorizontalHandleHelper(Edge.BOTTOM)),
+    CENTER(new CenterHandleHelper());
+
+    // Member Variables ////////////////////////////////////////////////////////////////////////////
+
+    private HandleHelper mHelper;
+
+    // Constructors ////////////////////////////////////////////////////////////////////////////////
+
+    Handle(HandleHelper helper) {
+        mHelper = helper;
+    }
+
+    // Public Methods //////////////////////////////////////////////////////////
+
+    public void updateCropWindow(float x,
+                                 float y,
+                                 @NonNull RectF imageRect,
+                                 float snapRadius) {
+
+        mHelper.updateCropWindow(x, y, imageRect, snapRadius);
+    }
+
+    public void updateCropWindow(float x,
+                                 float y,
+                                 float targetAspectRatio,
+                                 @NonNull RectF imageRect,
+                                 float snapRadius) {
+
+        mHelper.updateCropWindow(x, y, targetAspectRatio, imageRect, snapRadius);
+    }
+}
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CustomViewAbove.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CustomViewAbove.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/CustomViewAbove.java	(revision )
@@ -0,0 +1,1007 @@
+package com.jeremyfeinstein.slidingmenu.lib;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.os.Build;
+import android.support.v4.view.KeyEventCompat;
+import android.support.v4.view.MotionEventCompat;
+import android.support.v4.view.VelocityTrackerCompat;
+import android.support.v4.view.ViewCompat;
+import android.support.v4.view.ViewConfigurationCompat;
+import android.util.AttributeSet;
+import android.util.FloatMath;
+import android.util.Log;
+import android.view.FocusFinder;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.ViewGroup;
+import android.view.animation.Interpolator;
+import android.widget.Scroller;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu.OnClosedListener;
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu.OnOpenedListener;
+//import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu.OnCloseListener;
+//import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu.OnOpenListener;
+
+public class CustomViewAbove extends ViewGroup {
+
+	private static final String TAG = "CustomViewAbove";
+	private static final boolean DEBUG = false;
+
+	private static final boolean USE_CACHE = false;
+
+	private static final int MAX_SETTLE_DURATION = 600; // ms
+	private static final int MIN_DISTANCE_FOR_FLING = 25; // dips
+
+	private static final Interpolator sInterpolator = new Interpolator() {
+		public float getInterpolation(float t) {
+			t -= 1.0f;
+			return t * t * t * t * t + 1.0f;
+		}
+	};
+
+	private View mContent;
+
+	private int mCurItem;
+	private Scroller mScroller;
+
+	private boolean mScrollingCacheEnabled;
+
+	private boolean mScrolling;
+
+	private boolean mIsBeingDragged;
+	private boolean mIsUnableToDrag;
+	private int mTouchSlop;
+	private float mInitialMotionX;
+	/**
+	 * Position of the last motion event.
+	 */
+	private float mLastMotionX;
+	private float mLastMotionY;
+	/**
+	 * ID of the active pointer. This is used to retain consistency during
+	 * drags/flings if multiple pointers are used.
+	 */
+	protected int mActivePointerId = INVALID_POINTER;
+	/**
+	 * Sentinel value for no current active pointer.
+	 * Used by {@link #mActivePointerId}.
+	 */
+	private static final int INVALID_POINTER = -1;
+
+	/**
+	 * Determines speed during touch scrolling
+	 */
+	protected VelocityTracker mVelocityTracker;
+	private int mMinimumVelocity;
+	protected int mMaximumVelocity;
+	private int mFlingDistance;
+
+	private CustomViewBehind mViewBehind;
+	//	private int mMode;
+	private boolean mEnabled = true;
+
+	private OnPageChangeListener mOnPageChangeListener;
+	private OnPageChangeListener mInternalPageChangeListener;
+
+	//	private OnCloseListener mCloseListener;
+	//	private OnOpenListener mOpenListener;
+	private OnClosedListener mClosedListener;
+	private OnOpenedListener mOpenedListener;
+
+	private List<View> mIgnoredViews = new ArrayList<View>();
+
+	//	private int mScrollState = SCROLL_STATE_IDLE;
+
+	/**
+	 * Callback interface for responding to changing state of the selected page.
+	 */
+	public interface OnPageChangeListener {
+
+		/**
+		 * This method will be invoked when the current page is scrolled, either as part
+		 * of a programmatically initiated smooth scroll or a user initiated touch scroll.
+		 *
+		 * @param position Position index of the first page currently being displayed.
+		 *                 Page position+1 will be visible if positionOffset is nonzero.
+		 * @param positionOffset Value from [0, 1) indicating the offset from the page at position.
+		 * @param positionOffsetPixels Value in pixels indicating the offset from position.
+		 */
+		public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);
+
+		/**
+		 * This method will be invoked when a new page becomes selected. Animation is not
+		 * necessarily complete.
+		 *
+		 * @param position Position index of the new selected page.
+		 */
+		public void onPageSelected(int position);
+
+	}
+
+	/**
+	 * Simple implementation of the {@link OnPageChangeListener} interface with stub
+	 * implementations of each method. Extend this if you do not intend to override
+	 * every method of {@link OnPageChangeListener}.
+	 */
+	public static class SimpleOnPageChangeListener implements OnPageChangeListener {
+
+		public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+			// This space for rent
+		}
+
+		public void onPageSelected(int position) {
+			// This space for rent
+		}
+
+		public void onPageScrollStateChanged(int state) {
+			// This space for rent
+		}
+
+	}
+
+	public CustomViewAbove(Context context) {
+		this(context, null);
+	}
+
+	public CustomViewAbove(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		initCustomViewAbove();
+	}
+
+	void initCustomViewAbove() {
+		setWillNotDraw(false);
+		setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);
+		setFocusable(true);
+		final Context context = getContext();
+		mScroller = new Scroller(context, sInterpolator);
+		final ViewConfiguration configuration = ViewConfiguration.get(context);
+		mTouchSlop = ViewConfigurationCompat.getScaledPagingTouchSlop(configuration);
+		mMinimumVelocity = configuration.getScaledMinimumFlingVelocity();
+		mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();
+		setInternalPageChangeListener(new SimpleOnPageChangeListener() {
+			public void onPageSelected(int position) {
+				if (mViewBehind != null) {
+					switch (position) {
+					case 0:
+					case 2:
+						mViewBehind.setChildrenEnabled(true);
+						break;
+					case 1:
+						mViewBehind.setChildrenEnabled(false);
+						break;
+					}
+				}
+			}
+		});
+
+		final float density = context.getResources().getDisplayMetrics().density;
+		mFlingDistance = (int) (MIN_DISTANCE_FOR_FLING * density);
+	}
+
+	/**
+	 * Set the currently selected page. If the CustomViewPager has already been through its first
+	 * layout there will be a smooth animated transition between the current item and the
+	 * specified item.
+	 *
+	 * @param item Item index to select
+	 */
+	public void setCurrentItem(int item) {
+		setCurrentItemInternal(item, true, false);
+	}
+
+	/**
+	 * Set the currently selected page.
+	 *
+	 * @param item Item index to select
+	 * @param smoothScroll True to smoothly scroll to the new item, false to transition immediately
+	 */
+	public void setCurrentItem(int item, boolean smoothScroll) {
+		setCurrentItemInternal(item, smoothScroll, false);
+	}
+
+	public int getCurrentItem() {
+		return mCurItem;
+	}
+
+	void setCurrentItemInternal(int item, boolean smoothScroll, boolean always) {
+		setCurrentItemInternal(item, smoothScroll, always, 0);
+	}
+
+	void setCurrentItemInternal(int item, boolean smoothScroll, boolean always, int velocity) {
+		if (!always && mCurItem == item) {
+			setScrollingCacheEnabled(false);
+			return;
+		}
+
+		item = mViewBehind.getMenuPage(item);
+
+		final boolean dispatchSelected = mCurItem != item;
+		mCurItem = item;
+		final int destX = getDestScrollX(mCurItem);
+		if (dispatchSelected && mOnPageChangeListener != null) {
+			mOnPageChangeListener.onPageSelected(item);
+		}
+		if (dispatchSelected && mInternalPageChangeListener != null) {
+			mInternalPageChangeListener.onPageSelected(item);
+		}
+		if (smoothScroll) {
+			smoothScrollTo(destX, 0, velocity);
+		} else {
+			completeScroll();
+			scrollTo(destX, 0);
+		}
+	}
+
+	/**
+	 * Set a listener that will be invoked whenever the page changes or is incrementally
+	 * scrolled. See {@link OnPageChangeListener}.
+	 *
+	 * @param listener Listener to set
+	 */
+	public void setOnPageChangeListener(OnPageChangeListener listener) {
+		mOnPageChangeListener = listener;
+	}
+	/*
+	public void setOnOpenListener(OnOpenListener l) {
+		mOpenListener = l;
+	}
+
+	public void setOnCloseListener(OnCloseListener l) {
+		mCloseListener = l;
+	}
+	 */
+	public void setOnOpenedListener(OnOpenedListener l) {
+		mOpenedListener = l;
+	}
+
+	public void setOnClosedListener(OnClosedListener l) {
+		mClosedListener = l;
+	}
+
+	/**
+	 * Set a separate OnPageChangeListener for internal use by the support library.
+	 *
+	 * @param listener Listener to set
+	 * @return The old listener that was set, if any.
+	 */
+	OnPageChangeListener setInternalPageChangeListener(OnPageChangeListener listener) {
+		OnPageChangeListener oldListener = mInternalPageChangeListener;
+		mInternalPageChangeListener = listener;
+		return oldListener;
+	}
+
+	public void addIgnoredView(View v) {
+		if (!mIgnoredViews.contains(v)) {
+			mIgnoredViews.add(v);
+		}
+	}
+
+	public void removeIgnoredView(View v) {
+		mIgnoredViews.remove(v);
+	}
+
+	public void clearIgnoredViews() {
+		mIgnoredViews.clear();
+	}
+
+	// We want the duration of the page snap animation to be influenced by the distance that
+	// the screen has to travel, however, we don't want this duration to be effected in a
+	// purely linear fashion. Instead, we use this method to moderate the effect that the distance
+	// of travel has on the overall snap duration.
+	float distanceInfluenceForSnapDuration(float f) {
+		f -= 0.5f; // center the values about 0.
+		f *= 0.3f * Math.PI / 2.0f;
+		return (float) Math.sin(f);
+	}
+
+	public int getDestScrollX(int page) {
+		switch (page) {
+		case 0:
+		case 2:
+			return mViewBehind.getMenuLeft(mContent, page);
+		case 1:
+			return mContent.getLeft();
+		}
+		return 0;
+	}
+
+	private int getLeftBound() {
+		return mViewBehind.getAbsLeftBound(mContent);
+	}
+
+	private int getRightBound() {
+		return mViewBehind.getAbsRightBound(mContent);
+	}
+
+	public int getContentLeft() {
+		return mContent.getLeft() + mContent.getPaddingLeft();
+	}
+
+	public boolean isMenuOpen() {
+		return mCurItem == 0 || mCurItem == 2;
+	}
+
+	private boolean isInIgnoredView(MotionEvent ev) {
+		Rect rect = new Rect();
+		for (View v : mIgnoredViews) {
+			v.getHitRect(rect);
+			if (rect.contains((int)ev.getX(), (int)ev.getY())) return true;
+		}
+		return false;
+	}
+
+	public int getBehindWidth() {
+		if (mViewBehind == null) {
+			return 0;
+		} else {
+			return mViewBehind.getBehindWidth();
+		}
+	}
+
+	public int getChildWidth(int i) {
+		switch (i) {
+		case 0:
+			return getBehindWidth();
+		case 1:
+			return mContent.getWidth();
+		default:
+			return 0;
+		}
+	}
+
+	public boolean isSlidingEnabled() {
+		return mEnabled;
+	}
+
+	public void setSlidingEnabled(boolean b) {
+		mEnabled = b;
+	}
+
+	/**
+	 * Like {@link View#scrollBy}, but scroll smoothly instead of immediately.
+	 *
+	 * @param x the number of pixels to scroll by on the X axis
+	 * @param y the number of pixels to scroll by on the Y axis
+	 */
+	void smoothScrollTo(int x, int y) {
+		smoothScrollTo(x, y, 0);
+	}
+
+	/**
+	 * Like {@link View#scrollBy}, but scroll smoothly instead of immediately.
+	 *
+	 * @param x the number of pixels to scroll by on the X axis
+	 * @param y the number of pixels to scroll by on the Y axis
+	 * @param velocity the velocity associated with a fling, if applicable. (0 otherwise)
+	 */
+	void smoothScrollTo(int x, int y, int velocity) {
+		if (getChildCount() == 0) {
+			// Nothing to do.
+			setScrollingCacheEnabled(false);
+			return;
+		}
+		int sx = getScrollX();
+		int sy = getScrollY();
+		int dx = x - sx;
+		int dy = y - sy;
+		if (dx == 0 && dy == 0) {
+			completeScroll();
+			if (isMenuOpen()) {
+				if (mOpenedListener != null)
+					mOpenedListener.onOpened();
+			} else {
+				if (mClosedListener != null)
+					mClosedListener.onClosed();
+			}
+			return;
+		}
+
+		setScrollingCacheEnabled(true);
+		mScrolling = true;
+
+		final int width = getBehindWidth();
+		final int halfWidth = width / 2;
+		final float distanceRatio = Math.min(1f, 1.0f * Math.abs(dx) / width);
+		final float distance = halfWidth + halfWidth *
+				distanceInfluenceForSnapDuration(distanceRatio);
+
+		int duration = 0;
+		velocity = Math.abs(velocity);
+		if (velocity > 0) {
+			duration = 4 * Math.round(1000 * Math.abs(distance / velocity));
+		} else {
+			final float pageDelta = (float) Math.abs(dx) / width;
+			duration = (int) ((pageDelta + 1) * 100);
+			duration = MAX_SETTLE_DURATION;
+		}
+		duration = Math.min(duration, MAX_SETTLE_DURATION);
+
+		mScroller.startScroll(sx, sy, dx, dy, duration);
+		invalidate();
+	}
+
+	public void setContent(View v) {
+		if (mContent != null) 
+			this.removeView(mContent);
+		mContent = v;
+		addView(mContent);
+	}
+
+	public View getContent() {
+		return mContent;
+	}
+
+	public void setCustomViewBehind(CustomViewBehind cvb) {
+		mViewBehind = cvb;
+	}
+
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+
+		int width = getDefaultSize(0, widthMeasureSpec);
+		int height = getDefaultSize(0, heightMeasureSpec);
+		setMeasuredDimension(width, height);
+
+		final int contentWidth = getChildMeasureSpec(widthMeasureSpec, 0, width);
+		final int contentHeight = getChildMeasureSpec(heightMeasureSpec, 0, height);
+		mContent.measure(contentWidth, contentHeight);
+	}
+
+	@Override
+	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+		super.onSizeChanged(w, h, oldw, oldh);
+		// Make sure scroll position is set correctly.
+		if (w != oldw) {
+			// [ChrisJ] - This fixes the onConfiguration change for orientation issue..
+			// maybe worth having a look why the recomputeScroll pos is screwing
+			// up?
+			completeScroll();
+			scrollTo(getDestScrollX(mCurItem), getScrollY());
+		}
+	}
+
+	@Override
+	protected void onLayout(boolean changed, int l, int t, int r, int b) {
+		final int width = r - l;
+		final int height = b - t;
+		mContent.layout(0, 0, width, height);
+	}
+
+	public void setAboveOffset(int i) {
+		//		RelativeLayout.LayoutParams params = ((RelativeLayout.LayoutParams)mContent.getLayoutParams());
+		//		params.setMargins(i, params.topMargin, params.rightMargin, params.bottomMargin);
+		mContent.setPadding(i, mContent.getPaddingTop(), 
+				mContent.getPaddingRight(), mContent.getPaddingBottom());
+	}
+
+
+	@Override
+	public void computeScroll() {
+		if (!mScroller.isFinished()) {
+			if (mScroller.computeScrollOffset()) {
+				int oldX = getScrollX();
+				int oldY = getScrollY();
+				int x = mScroller.getCurrX();
+				int y = mScroller.getCurrY();
+
+				if (oldX != x || oldY != y) {
+					scrollTo(x, y);
+					pageScrolled(x);
+				}
+
+				// Keep on drawing until the animation has finished.
+				invalidate();
+				return;
+			}
+		}
+
+		// Done with scroll, clean up state.
+		completeScroll();
+	}
+
+	private void pageScrolled(int xpos) {
+		final int widthWithMargin = getWidth();
+		final int position = xpos / widthWithMargin;
+		final int offsetPixels = xpos % widthWithMargin;
+		final float offset = (float) offsetPixels / widthWithMargin;
+
+		onPageScrolled(position, offset, offsetPixels);
+	}
+
+	/**
+	 * This method will be invoked when the current page is scrolled, either as part
+	 * of a programmatically initiated smooth scroll or a user initiated touch scroll.
+	 * If you override this method you must call through to the superclass implementation
+	 * (e.g. super.onPageScrolled(position, offset, offsetPixels)) before onPageScrolled
+	 * returns.
+	 *
+	 * @param position Position index of the first page currently being displayed.
+	 *                 Page position+1 will be visible if positionOffset is nonzero.
+	 * @param offset Value from [0, 1) indicating the offset from the page at position.
+	 * @param offsetPixels Value in pixels indicating the offset from position.
+	 */
+	protected void onPageScrolled(int position, float offset, int offsetPixels) {
+		if (mOnPageChangeListener != null) {
+			mOnPageChangeListener.onPageScrolled(position, offset, offsetPixels);
+		}
+		if (mInternalPageChangeListener != null) {
+			mInternalPageChangeListener.onPageScrolled(position, offset, offsetPixels);
+		}
+	}
+
+	private void completeScroll() {
+		boolean needPopulate = mScrolling;
+		if (needPopulate) {
+			// Done with scroll, no longer want to cache view drawing.
+			setScrollingCacheEnabled(false);
+			mScroller.abortAnimation();
+			int oldX = getScrollX();
+			int oldY = getScrollY();
+			int x = mScroller.getCurrX();
+			int y = mScroller.getCurrY();
+			if (oldX != x || oldY != y) {
+				scrollTo(x, y);
+			}
+			if (isMenuOpen()) {
+				if (mOpenedListener != null)
+					mOpenedListener.onOpened();
+			} else {
+				if (mClosedListener != null)
+					mClosedListener.onClosed();
+			}
+		}
+		mScrolling = false;
+	}
+
+	protected int mTouchMode = SlidingMenu.TOUCHMODE_MARGIN;
+
+	public void setTouchMode(int i) {
+		mTouchMode = i;
+	}
+
+	public int getTouchMode() {
+		return mTouchMode;
+	}
+
+	private boolean thisTouchAllowed(MotionEvent ev) {
+		int x = (int) (ev.getX() + mScrollX);
+		if (isMenuOpen()) {
+			return mViewBehind.menuOpenTouchAllowed(mContent, mCurItem, x);
+		} else {
+			switch (mTouchMode) {
+			case SlidingMenu.TOUCHMODE_FULLSCREEN:
+				return !isInIgnoredView(ev);
+			case SlidingMenu.TOUCHMODE_NONE:
+				return false;
+			case SlidingMenu.TOUCHMODE_MARGIN:
+				return mViewBehind.marginTouchAllowed(mContent, x);
+			}
+		}
+		return false;
+	}
+
+	private boolean thisSlideAllowed(float dx) {
+		boolean allowed = false;
+		if (isMenuOpen()) {
+			allowed = mViewBehind.menuOpenSlideAllowed(dx);
+		} else {
+			allowed = mViewBehind.menuClosedSlideAllowed(dx);
+		}
+		if (DEBUG)
+			Log.v(TAG, "this slide allowed " + allowed + " dx: " + dx);
+		return allowed;
+	}
+
+	private int getPointerIndex(MotionEvent ev, int id) {
+		int activePointerIndex = MotionEventCompat.findPointerIndex(ev, id);
+		if (activePointerIndex == -1)
+			mActivePointerId = INVALID_POINTER;
+		return activePointerIndex;
+	}
+
+	private boolean mQuickReturn = false;
+
+	@Override
+	public boolean onInterceptTouchEvent(MotionEvent ev) {
+
+		if (!mEnabled)
+			return false;
+
+		final int action = ev.getAction() & MotionEventCompat.ACTION_MASK;
+
+		if (DEBUG)
+			if (action == MotionEvent.ACTION_DOWN)
+				Log.v(TAG, "Received ACTION_DOWN");
+
+		if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP
+				|| (action != MotionEvent.ACTION_DOWN && mIsUnableToDrag)) {
+			endDrag();
+			return false;
+		}
+
+		switch (action) {
+		case MotionEvent.ACTION_MOVE:
+			determineDrag(ev);
+			break;
+		case MotionEvent.ACTION_DOWN:
+			int index = MotionEventCompat.getActionIndex(ev);
+			mActivePointerId = MotionEventCompat.getPointerId(ev, index);
+			if (mActivePointerId == INVALID_POINTER)
+				break;
+			mLastMotionX = mInitialMotionX = MotionEventCompat.getX(ev, index);
+			mLastMotionY = MotionEventCompat.getY(ev, index);
+			if (thisTouchAllowed(ev)) {
+				mIsBeingDragged = false;
+				mIsUnableToDrag = false;
+				if (isMenuOpen() && mViewBehind.menuTouchInQuickReturn(mContent, mCurItem, ev.getX() + mScrollX)) {
+					mQuickReturn = true;
+				}
+			} else {
+				mIsUnableToDrag = true;
+			}
+			break;
+		case MotionEventCompat.ACTION_POINTER_UP:
+			onSecondaryPointerUp(ev);
+			break;
+		}
+
+		if (!mIsBeingDragged) {
+			if (mVelocityTracker == null) {
+				mVelocityTracker = VelocityTracker.obtain();
+			}
+			mVelocityTracker.addMovement(ev);
+		}
+		return mIsBeingDragged || mQuickReturn;
+	}
+
+
+	@Override
+	public boolean onTouchEvent(MotionEvent ev) {
+
+		if (!mEnabled)
+			return false;
+
+		if (!mIsBeingDragged && !thisTouchAllowed(ev))
+			return false;
+
+		//		if (!mIsBeingDragged && !mQuickReturn)
+		//			return false;
+
+		final int action = ev.getAction();
+
+		if (mVelocityTracker == null) {
+			mVelocityTracker = VelocityTracker.obtain();
+		}
+		mVelocityTracker.addMovement(ev);
+
+		switch (action & MotionEventCompat.ACTION_MASK) {
+		case MotionEvent.ACTION_DOWN:
+			/*
+			 * If being flinged and user touches, stop the fling. isFinished
+			 * will be false if being flinged.
+			 */
+			completeScroll();
+
+			// Remember where the motion event started
+			int index = MotionEventCompat.getActionIndex(ev);
+			mActivePointerId = MotionEventCompat.getPointerId(ev, index);
+			mLastMotionX = mInitialMotionX = ev.getX();
+			break;
+		case MotionEvent.ACTION_MOVE:
+			if (!mIsBeingDragged) {	
+				determineDrag(ev);
+				if (mIsUnableToDrag)
+					return false;
+			}
+			if (mIsBeingDragged) {
+				// Scroll to follow the motion event
+				final int activePointerIndex = getPointerIndex(ev, mActivePointerId);
+				if (mActivePointerId == INVALID_POINTER)
+					break;
+				final float x = MotionEventCompat.getX(ev, activePointerIndex);
+				final float deltaX = mLastMotionX - x;
+				mLastMotionX = x;
+				float oldScrollX = getScrollX();
+				float scrollX = oldScrollX + deltaX;
+				final float leftBound = getLeftBound();
+				final float rightBound = getRightBound();
+				if (scrollX < leftBound) {
+					scrollX = leftBound;
+				} else if (scrollX > rightBound) {
+					scrollX = rightBound;
+				}
+				// Don't lose the rounded component
+				mLastMotionX += scrollX - (int) scrollX;
+				scrollTo((int) scrollX, getScrollY());
+				pageScrolled((int) scrollX);
+			}
+			break;
+		case MotionEvent.ACTION_UP:
+			if (mIsBeingDragged) {
+				final VelocityTracker velocityTracker = mVelocityTracker;
+				velocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);
+				int initialVelocity = (int) VelocityTrackerCompat.getXVelocity(
+						velocityTracker, mActivePointerId);
+				final int scrollX = getScrollX();
+				final float pageOffset = (float) (scrollX - getDestScrollX(mCurItem)) / getBehindWidth();
+				final int activePointerIndex = getPointerIndex(ev, mActivePointerId);
+				if (mActivePointerId != INVALID_POINTER) {
+					final float x = MotionEventCompat.getX(ev, activePointerIndex);
+					final int totalDelta = (int) (x - mInitialMotionX);
+					int nextPage = determineTargetPage(pageOffset, initialVelocity, totalDelta);
+					setCurrentItemInternal(nextPage, true, true, initialVelocity);
+				} else {	
+					setCurrentItemInternal(mCurItem, true, true, initialVelocity);
+				}
+				mActivePointerId = INVALID_POINTER;
+				endDrag();
+			} else if (mQuickReturn && mViewBehind.menuTouchInQuickReturn(mContent, mCurItem, ev.getX() + mScrollX)) {
+				// close the menu
+				setCurrentItem(1);
+				endDrag();
+			}
+			break;
+		case MotionEvent.ACTION_CANCEL:
+			if (mIsBeingDragged) {
+				setCurrentItemInternal(mCurItem, true, true);
+				mActivePointerId = INVALID_POINTER;
+				endDrag();
+			}
+			break;
+		case MotionEventCompat.ACTION_POINTER_DOWN: {
+			final int indexx = MotionEventCompat.getActionIndex(ev);
+			mLastMotionX = MotionEventCompat.getX(ev, indexx);
+			mActivePointerId = MotionEventCompat.getPointerId(ev, indexx);
+			break;
+		}
+		case MotionEventCompat.ACTION_POINTER_UP:
+			onSecondaryPointerUp(ev);
+			int pointerIndex = getPointerIndex(ev, mActivePointerId);
+			if (mActivePointerId == INVALID_POINTER)
+				break;
+			mLastMotionX = MotionEventCompat.getX(ev, pointerIndex);
+			break;
+		}
+		return true;
+	}
+	
+	private void determineDrag(MotionEvent ev) {
+		final int activePointerId = mActivePointerId;
+		final int pointerIndex = getPointerIndex(ev, activePointerId);
+		if (activePointerId == INVALID_POINTER || pointerIndex == INVALID_POINTER)
+			return;
+		final float x = MotionEventCompat.getX(ev, pointerIndex);
+		final float dx = x - mLastMotionX;
+		final float xDiff = Math.abs(dx);
+		final float y = MotionEventCompat.getY(ev, pointerIndex);
+		final float dy = y - mLastMotionY;
+		final float yDiff = Math.abs(dy);
+		if (xDiff > (isMenuOpen()?mTouchSlop/2:mTouchSlop) && xDiff > yDiff && thisSlideAllowed(dx)) {		
+			startDrag();
+			mLastMotionX = x;
+			mLastMotionY = y;
+			setScrollingCacheEnabled(true);
+			// TODO add back in touch slop check
+		} else if (xDiff > mTouchSlop) {
+			mIsUnableToDrag = true;
+		}
+	}
+
+	@Override
+	public void scrollTo(int x, int y) {
+		super.scrollTo(x, y);
+		mScrollX = x;
+		mViewBehind.scrollBehindTo(mContent, x, y);	
+		((SlidingMenu)getParent()).manageLayers(getPercentOpen());
+	}
+
+	private int determineTargetPage(float pageOffset, int velocity, int deltaX) {
+		int targetPage = mCurItem;
+		if (Math.abs(deltaX) > mFlingDistance && Math.abs(velocity) > mMinimumVelocity) {
+			if (velocity > 0 && deltaX > 0) {
+				targetPage -= 1;
+			} else if (velocity < 0 && deltaX < 0){
+				targetPage += 1;
+			}
+		} else {
+			targetPage = (int) Math.round(mCurItem + pageOffset);
+		}
+		return targetPage;
+	}
+
+	protected float getPercentOpen() {
+		return Math.abs(mScrollX-mContent.getLeft()) / getBehindWidth();
+	}
+
+	@Override
+	protected void dispatchDraw(Canvas canvas) {
+		super.dispatchDraw(canvas);
+		// Draw the margin drawable if needed.
+		mViewBehind.drawShadow(mContent, canvas);
+		mViewBehind.drawFade(mContent, canvas, getPercentOpen());
+		mViewBehind.drawSelector(mContent, canvas, getPercentOpen());
+	}
+
+	// variables for drawing
+	private float mScrollX = 0.0f;
+
+	private void onSecondaryPointerUp(MotionEvent ev) {
+		if (DEBUG) Log.v(TAG, "onSecondaryPointerUp called");
+		final int pointerIndex = MotionEventCompat.getActionIndex(ev);
+		final int pointerId = MotionEventCompat.getPointerId(ev, pointerIndex);
+		if (pointerId == mActivePointerId) {
+			// This was our active pointer going up. Choose a new
+			// active pointer and adjust accordingly.
+			final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
+			mLastMotionX = MotionEventCompat.getX(ev, newPointerIndex);
+			mActivePointerId = MotionEventCompat.getPointerId(ev, newPointerIndex);
+			if (mVelocityTracker != null) {
+				mVelocityTracker.clear();
+			}
+		}
+	}
+
+	private void startDrag() {
+		mIsBeingDragged = true;
+		mQuickReturn = false;
+	}
+
+	private void endDrag() {
+		mQuickReturn = false;
+		mIsBeingDragged = false;
+		mIsUnableToDrag = false;
+		mActivePointerId = INVALID_POINTER;
+
+		if (mVelocityTracker != null) {
+			mVelocityTracker.recycle();
+			mVelocityTracker = null;
+		}
+	}
+
+	private void setScrollingCacheEnabled(boolean enabled) {
+		if (mScrollingCacheEnabled != enabled) {
+			mScrollingCacheEnabled = enabled;
+			if (USE_CACHE) {
+				final int size = getChildCount();
+				for (int i = 0; i < size; ++i) {
+					final View child = getChildAt(i);
+					if (child.getVisibility() != GONE) {
+						child.setDrawingCacheEnabled(enabled);
+					}
+				}
+			}
+		}
+	}
+
+	/**
+	 * Tests scrollability within child views of v given a delta of dx.
+	 *
+	 * @param v View to test for horizontal scrollability
+	 * @param checkV Whether the view v passed should itself be checked for scrollability (true),
+	 *               or just its children (false).
+	 * @param dx Delta scrolled in pixels
+	 * @param x X coordinate of the active touch point
+	 * @param y Y coordinate of the active touch point
+	 * @return true if child views of v can be scrolled by delta of dx.
+	 */
+	protected boolean canScroll(View v, boolean checkV, int dx, int x, int y) {
+		if (v instanceof ViewGroup) {
+			final ViewGroup group = (ViewGroup) v;
+			final int scrollX = v.getScrollX();
+			final int scrollY = v.getScrollY();
+			final int count = group.getChildCount();
+			// Count backwards - let topmost views consume scroll distance first.
+			for (int i = count - 1; i >= 0; i--) {
+				final View child = group.getChildAt(i);
+				if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() &&
+						y + scrollY >= child.getTop() && y + scrollY < child.getBottom() &&
+						canScroll(child, true, dx, x + scrollX - child.getLeft(),
+								y + scrollY - child.getTop())) {
+					return true;
+				}
+			}
+		}
+
+		return checkV && ViewCompat.canScrollHorizontally(v, -dx);
+	}
+
+
+	@Override
+	public boolean dispatchKeyEvent(KeyEvent event) {
+		// Let the focused view and/or our descendants get the key first
+		return super.dispatchKeyEvent(event) || executeKeyEvent(event);
+	}
+
+	/**
+	 * You can call this function yourself to have the scroll view perform
+	 * scrolling from a key event, just as if the event had been dispatched to
+	 * it by the view hierarchy.
+	 *
+	 * @param event The key event to execute.
+	 * @return Return true if the event was handled, else false.
+	 */
+	public boolean executeKeyEvent(KeyEvent event) {
+		boolean handled = false;
+		if (event.getAction() == KeyEvent.ACTION_DOWN) {
+			switch (event.getKeyCode()) {
+			case KeyEvent.KEYCODE_DPAD_LEFT:
+				handled = arrowScroll(FOCUS_LEFT);
+				break;
+			case KeyEvent.KEYCODE_DPAD_RIGHT:
+				handled = arrowScroll(FOCUS_RIGHT);
+				break;
+			case KeyEvent.KEYCODE_TAB:
+				if (Build.VERSION.SDK_INT >= 11) {
+					// The focus finder had a bug handling FOCUS_FORWARD and FOCUS_BACKWARD
+					// before Android 3.0. Ignore the tab key on those devices.
+					if (KeyEventCompat.hasNoModifiers(event)) {
+						handled = arrowScroll(FOCUS_FORWARD);
+					} else if (KeyEventCompat.hasModifiers(event, KeyEvent.META_SHIFT_ON)) {
+						handled = arrowScroll(FOCUS_BACKWARD);
+					}
+				}
+				break;
+			}
+		}
+		return handled;
+	}
+
+	public boolean arrowScroll(int direction) {
+		View currentFocused = findFocus();
+		if (currentFocused == this) currentFocused = null;
+
+		boolean handled = false;
+
+		View nextFocused = FocusFinder.getInstance().findNextFocus(this, currentFocused,
+				direction);
+		if (nextFocused != null && nextFocused != currentFocused) {
+			if (direction == View.FOCUS_LEFT) {
+				handled = nextFocused.requestFocus();
+			} else if (direction == View.FOCUS_RIGHT) {
+				// If there is nothing to the right, or this is causing us to
+				// jump to the left, then what we really want to do is page right.
+				if (currentFocused != null && nextFocused.getLeft() <= currentFocused.getLeft()) {
+					handled = pageRight();
+				} else {
+					handled = nextFocused.requestFocus();
+				}
+			}
+		} else if (direction == FOCUS_LEFT || direction == FOCUS_BACKWARD) {
+			// Trying to move left and nothing there; try to page.
+			handled = pageLeft();
+		} else if (direction == FOCUS_RIGHT || direction == FOCUS_FORWARD) {
+			// Trying to move right and nothing there; try to page.
+			handled = pageRight();
+		}
+		if (handled) {
+			playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));
+		}
+		return handled;
+	}
+
+	boolean pageLeft() {
+		if (mCurItem > 0) {
+			setCurrentItem(mCurItem-1, true);
+			return true;
+		}
+		return false;
+	}
+
+	boolean pageRight() {
+		if (mCurItem < 1) {
+			setCurrentItem(mCurItem+1, true);
+			return true;
+		}
+		return false;
+	}
+
+}
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrHandler.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrHandler.java	(revision )
@@ -0,0 +1,20 @@
+package in.srain.cube.views.ptr;
+
+import android.view.View;
+
+public interface PtrHandler {
+
+    /**
+     * Check can do refresh or not. For example the content is empty or the first child is in view.
+     * <p/>
+     * {@link in.srain.cube.views.ptr.PtrDefaultHandler#checkContentCanBePulledDown}
+     */
+    public boolean checkCanDoRefresh(final PtrFrameLayout frame, final View content, final View header);
+
+    /**
+     * When refresh begin
+     *
+     * @param frame
+     */
+    public void onRefreshBegin(final PtrFrameLayout frame);
+}
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/aapt/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/aapt/AndroidManifest.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/aapt/AndroidManifest.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.handmark.pulltorefresh.library"
+    android:versionCode="2110"
+    android:versionName="2.1.1" >
+
+    <uses-sdk
+        android:minSdkVersion="4"
+        android:targetSdkVersion="4" />
+
+    <application />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java	(revision )
@@ -0,0 +1,110 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.HorizontalScrollView;
+
+public class PullToRefreshHorizontalScrollView extends PullToRefreshBase<HorizontalScrollView> {
+
+	public PullToRefreshHorizontalScrollView(Context context) {
+		super(context);
+	}
+
+	public PullToRefreshHorizontalScrollView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public PullToRefreshHorizontalScrollView(Context context, Mode mode) {
+		super(context, mode);
+	}
+
+	public PullToRefreshHorizontalScrollView(Context context, Mode mode, AnimationStyle style) {
+		super(context, mode, style);
+	}
+
+	@Override
+	public final Orientation getPullToRefreshScrollDirection() {
+		return Orientation.HORIZONTAL;
+	}
+
+	@Override
+	protected HorizontalScrollView createRefreshableView(Context context, AttributeSet attrs) {
+		HorizontalScrollView scrollView;
+
+		if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {
+			scrollView = new InternalHorizontalScrollViewSDK9(context, attrs);
+		} else {
+			scrollView = new HorizontalScrollView(context, attrs);
+		}
+
+		scrollView.setId(R.id.scrollview);
+		return scrollView;
+	}
+
+	@Override
+	protected boolean isReadyForPullStart() {
+		return mRefreshableView.getScrollX() == 0;
+	}
+
+	@Override
+	protected boolean isReadyForPullEnd() {
+		View scrollViewChild = mRefreshableView.getChildAt(0);
+		if (null != scrollViewChild) {
+			return mRefreshableView.getScrollX() >= (scrollViewChild.getWidth() - getWidth());
+		}
+		return false;
+	}
+
+	@TargetApi(9)
+	final class InternalHorizontalScrollViewSDK9 extends HorizontalScrollView {
+
+		public InternalHorizontalScrollViewSDK9(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
+				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
+
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
+
+			// Does all of the hard work...
+			OverscrollHelper.overScrollBy(PullToRefreshHorizontalScrollView.this, deltaX, scrollX, deltaY, scrollY,
+					getScrollRange(), isTouchEvent);
+
+			return returnValue;
+		}
+
+		/**
+		 * Taken from the AOSP ScrollView source
+		 */
+		private int getScrollRange() {
+			int scrollRange = 0;
+			if (getChildCount() > 0) {
+				View child = getChildAt(0);
+				scrollRange = Math.max(0, child.getWidth() - (getWidth() - getPaddingLeft() - getPaddingRight()));
+			}
+			return scrollRange;
+		}
+	}
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/CornerHandleHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/CornerHandleHelper.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/CornerHandleHelper.java	(revision )
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.cropwindow.handle;
+
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.cropwindow.edge.Edge;
+import com.edmodo.cropper.cropwindow.edge.EdgePair;
+
+/**
+ * HandleHelper class to handle corner Handles (i.e. top-left, top-right, bottom-left, and
+ * bottom-right handles).
+ */
+class CornerHandleHelper extends HandleHelper {
+
+    // Constructor /////////////////////////////////////////////////////////////////////////////////
+
+    CornerHandleHelper(Edge horizontalEdge, Edge verticalEdge) {
+        super(horizontalEdge, verticalEdge);
+    }
+
+    // HandleHelper Methods ////////////////////////////////////////////////////////////////////////
+
+    @Override
+    void updateCropWindow(float x,
+                          float y,
+                          float targetAspectRatio,
+                          @NonNull RectF imageRect,
+                          float snapRadius) {
+
+        final EdgePair activeEdges = getActiveEdges(x, y, targetAspectRatio);
+        final Edge primaryEdge = activeEdges.primary;
+        final Edge secondaryEdge = activeEdges.secondary;
+
+        primaryEdge.adjustCoordinate(x, y, imageRect, snapRadius, targetAspectRatio);
+        secondaryEdge.adjustCoordinate(targetAspectRatio);
+
+        if (secondaryEdge.isOutsideMargin(imageRect, snapRadius)) {
+            secondaryEdge.snapToRect(imageRect);
+            primaryEdge.adjustCoordinate(targetAspectRatio);
+        }
+    }
+}
Index: SlidingMeunlibrary/build/intermediates/incremental/packageResources/release/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/incremental/packageResources/release/merger.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/incremental/packageResources/release/merger.xml	(revision )
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res"><file name="slidingmenumain" path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res\layout\slidingmenumain.xml" qualifiers="" type="layout"/><file path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res\values\attrs.xml" qualifiers=""><declare-styleable name="SlidingMenu">
+        <attr name="mode">
+            <enum name="left" value="0"/>
+            <enum name="right" value="1"/>
+        </attr>
+        <attr format="reference" name="viewAbove"/>
+        <attr format="reference" name="viewBehind"/>
+        <attr format="dimension" name="behindOffset"/>
+        <attr format="dimension" name="behindWidth"/>
+        <attr format="float" name="behindScrollScale"/>
+        <attr name="touchModeAbove">
+            <enum name="margin" value="0"/>
+            <enum name="fullscreen" value="1"/>
+            <enum name="none" value="2"/>
+        </attr>
+        <attr name="touchModeBehind">
+            <enum name="margin" value="0"/>
+            <enum name="fullscreen" value="1"/>
+            <enum name="none" value="2"/>
+        </attr>
+        <attr format="reference" name="shadowDrawable"/>
+        <attr format="dimension" name="shadowWidth"/>
+        <attr format="boolean" name="fadeEnabled"/>
+        <attr format="float" name="fadeDegree"/>
+        <attr format="boolean" name="selectorEnabled"/>
+        <attr format="reference" name="selectorDrawable"/>
+    </declare-styleable></file><file path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res\values\ids.xml" qualifiers=""><item name="selected_view" type="id"/></file></source><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\generated\res\rs\release"/><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\generated\res\generated\release"/></dataSet><dataSet config="release"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\src\release\res"/></dataSet><mergedItems><configuration qualifiers=""><declare-styleable name="SlidingMenu"><attr name="mode"><enum name="left" value="0"/><enum name="right" value="1"/></attr><attr format="reference" name="viewAbove"/><attr format="reference" name="viewBehind"/><attr format="dimension" name="behindOffset"/><attr format="dimension" name="behindWidth"/><attr format="float" name="behindScrollScale"/><attr name="touchModeAbove"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr name="touchModeBehind"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr format="reference" name="shadowDrawable"/><attr format="dimension" name="shadowWidth"/><attr format="boolean" name="fadeEnabled"/><attr format="float" name="fadeDegree"/><attr format="boolean" name="selectorEnabled"/><attr format="reference" name="selectorDrawable"/></declare-styleable></configuration></mergedItems></merger>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrClassicFrameLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrClassicFrameLayout.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrClassicFrameLayout.java	(revision )
@@ -0,0 +1,56 @@
+package in.srain.cube.views.ptr;
+
+import android.content.Context;
+import android.util.AttributeSet;
+
+public class PtrClassicFrameLayout extends PtrFrameLayout {
+
+    private PtrClassicDefaultHeader mPtrClassicHeader;
+
+    public PtrClassicFrameLayout(Context context) {
+        super(context);
+        initViews();
+    }
+
+    public PtrClassicFrameLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initViews();
+    }
+
+    public PtrClassicFrameLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        initViews();
+    }
+
+    private void initViews() {
+        mPtrClassicHeader = new PtrClassicDefaultHeader(getContext());
+        setHeaderView(mPtrClassicHeader);
+        addPtrUIHandler(mPtrClassicHeader);
+    }
+
+    public PtrClassicDefaultHeader getHeader() {
+        return mPtrClassicHeader;
+    }
+
+    /**
+     * Specify the last update time by this key string
+     *
+     * @param key
+     */
+    public void setLastUpdateTimeKey(String key) {
+        if (mPtrClassicHeader != null) {
+            mPtrClassicHeader.setLastUpdateTimeKey(key);
+        }
+    }
+
+    /**
+     * Using an object to specify the last update time.
+     *
+     * @param object
+     */
+    public void setLastUpdateTimeRelateObject(Object object) {
+        if (mPtrClassicHeader != null) {
+            mPtrClassicHeader.setLastUpdateTimeRelateObject(object);
+        }
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_top.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="-100%p" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_out_to_top.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_in_from_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_in_from_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_in_from_bottom.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="100%p"
+    android:toYDelta="0" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_in_from_bottom.xml -->
\ No newline at end of file
Index: cropperimagelibrary/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/AndroidManifest.xml	(revision )
+++ cropperimagelibrary/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,8 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.edmodo.cropper">
+
+    <application android:allowBackup="true" android:label="@string/app_name"
+        android:supportsRtl="true">
+
+    </application>
+
+</manifest>
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-fi/values-fi.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-fi/values-fi.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-fi/values-fi.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fi/values-fi.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_from_bottom_pull_label">Päivitä vetämällä ylös…</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_pull_label">Päivitä vetämällä alas…</string>
+    <string name="pull_to_refresh_refreshing_label">Päivitetään…</string>
+    <string name="pull_to_refresh_release_label">Päivitä vapauttamalla…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-fi/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-fi/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-fi/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="pull_to_refresh_pull_label">Päivitä vetämällä alas…</string>
+    <string name="pull_to_refresh_release_label">Päivitä vapauttamalla…</string>
+    <string name="pull_to_refresh_refreshing_label">Päivitetään…</string>
+
+    <!-- Just use standard Pull Down String when pulling up. These can be set for languages which require it -->
+    <string name="pull_to_refresh_from_bottom_pull_label">Päivitä vetämällä ylös…</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ru/values-ru.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ru/values-ru.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ru/values-ru.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ru/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Потяните для обновления…</string>
+    <string name="pull_to_refresh_refreshing_label">Загрузка…</string>
+    <string name="pull_to_refresh_release_label">Отпустите для обновления…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/androidTest/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/androidTest/debug/merger.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/androidTest/debug/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\intermediates\bundles\debug\assets"/></dataSet><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\src\androidTest\assets"/></dataSet></merger>
\ No newline at end of file
Index: app/src/main/java/zhu/com/sortingdata/fragment/FragmentLeftMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/fragment/FragmentLeftMenu.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/fragment/FragmentLeftMenu.java	(revision )
@@ -0,0 +1,81 @@
+package zhu.com.sortingdata.fragment;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import zhu.com.sortingdata.MainActivity;
+import zhu.com.sortingdata.R;
+
+import static zhu.com.sortingdata.R.id.bt_menu_show;
+import static zhu.com.sortingdata.R.id.textView;
+
+/**
+ * Created by Administrator on 2017/5/12.
+ */
+
+public class FragmentLeftMenu extends BaseFragment {
+    private View view;
+    private Button bt_menu_show ; 
+    private TextView textView1,textView2,textView3,textView4 ;
+    MainActivity parentActivity ;
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        parentActivity = (MainActivity) getActivity();
+
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater,
+                             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+
+        view = inflater.inflate(R.layout.menu_layout, null);
+        initView();
+        initClick();
+        return view;
+    }
+
+    private void initClick() {
+
+        textView1.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                parentActivity.menuOrContent(0);
+            }
+        });
+        textView2.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                parentActivity.menuOrContent(1);
+            }
+        });
+        textView3.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                parentActivity.menuOrContent(2);
+            }
+        });
+
+        bt_menu_show.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+            }
+        });
+    }
+
+    private void initView() {
+        bt_menu_show = (Button) view.findViewById(R.id.bt_menu_show);
+        textView1 = (TextView) view.findViewById(R.id.textView);
+        textView2 = (TextView) view.findViewById(R.id.textView2);
+        textView3 = (TextView) view.findViewById(R.id.textView3);
+    }
+
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-he/values-he.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-he/values-he.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-he/values-he.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-he/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+    <string name="pull_to_refresh_refreshing_label">טוען…</string>
+    <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_bottom.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="100%p"
+    android:toYDelta="0" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_in_from_bottom.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/manifests/androidTest/debug/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/manifests/androidTest/debug/AndroidManifest.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/manifests/androidTest/debug/AndroidManifest.xml	(revision )
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.handmark.pulltorefresh.library.test" >
+
+    <uses-sdk
+        android:minSdkVersion="4"
+        android:targetSdkVersion="4" />
+
+    <instrumentation
+        android:name="android.test.InstrumentationTestRunner"
+        android:functionalTest="false"
+        android:handleProfiling="false"
+        android:label="Tests for com.handmark.pulltorefresh.library.test"
+        android:targetPackage="com.handmark.pulltorefresh.library.test" />
+
+    <application>
+        <uses-library android:name="android.test.runner" />
+    </application>
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values/values.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values/values.xml	(revision )
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="PullToRefresh"><attr format="reference|color" name="ptrRefreshableViewBackground"/><attr format="reference|color" name="ptrHeaderBackground"/><attr format="reference|color" name="ptrHeaderTextColor"/><attr format="reference|color" name="ptrHeaderSubTextColor"/><attr name="ptrMode"><flag name="disabled" value="0x0"/><flag name="pullFromStart" value="0x1"/><flag name="pullFromEnd" value="0x2"/><flag name="both" value="0x3"/><flag name="manualOnly" value="0x4"/><flag name="pullDownFromTop" value="0x1"/><flag name="pullUpFromBottom" value="0x2"/></attr><attr format="reference|boolean" name="ptrShowIndicator"/><attr format="reference" name="ptrDrawable"/><attr format="reference" name="ptrDrawableStart"/><attr format="reference" name="ptrDrawableEnd"/><attr format="reference|boolean" name="ptrOverScroll"/><attr format="reference" name="ptrHeaderTextAppearance"/><attr format="reference" name="ptrSubHeaderTextAppearance"/><attr name="ptrAnimationStyle"><flag name="rotate" value="0x0"/><flag name="flip" value="0x1"/></attr><attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/><attr format="reference|boolean" name="ptrListViewExtrasEnabled"/><attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/><attr format="reference|color" name="ptrAdapterViewBackground"/><attr format="reference" name="ptrDrawableTop"/><attr format="reference" name="ptrDrawableBottom"/></declare-styleable>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values/values.xml -->
+    <eat-comment/>
+    <dimen name="header_footer_left_right_padding">24dp</dimen>
+    <dimen name="header_footer_top_bottom_padding">12dp</dimen>
+    <dimen name="indicator_corner_radius">12dp</dimen>
+    <dimen name="indicator_internal_padding">4dp</dimen>
+    <dimen name="indicator_right_padding">10dp</dimen>
+    <item name="gridview" type="id"/>
+    <item name="scrollview" type="id"/>
+    <item name="webview" type="id"/>
+    <string name="pull_to_refresh_from_bottom_pull_label">@string/pull_to_refresh_pull_label</string>
+    <string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string>
+    <string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string>
+    <string name="pull_to_refresh_pull_label">Pull to refresh…</string>
+    <string name="pull_to_refresh_refreshing_label">Loading…</string>
+    <string name="pull_to_refresh_release_label">Release to refresh…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/pom.xml	(revision )
+++ SlidingMeunlibrary/pom.xml	(revision )
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<artifactId>slidingmenu</artifactId>
+	<name>SlidingMenu</name>
+	<packaging>apklib</packaging>
+
+	<parent>
+		<groupId>com.jeremyfeinstein.slidingmenu</groupId>
+		<artifactId>parent</artifactId>
+		<version>1.3-SNAPSHOT</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<dependencies>
+		<dependency>
+			<groupId>com.google.android</groupId>
+			<artifactId>android</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>com.google.android</groupId>
+			<artifactId>support-v4</artifactId>
+		</dependency>
+	</dependencies>
+
+	<build>
+    <sourceDirectory>src</sourceDirectory>
+
+		<plugins>
+			<plugin>
+				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
+				<artifactId>android-maven-plugin</artifactId>
+				<extensions>true</extensions>
+				<configuration>
+					<nativeLibrariesDirectory>ignored</nativeLibrariesDirectory>
+				</configuration>
+			</plugin>
+
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>build-helper-maven-plugin</artifactId>
+                <version>1.7</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>attach-artifact</goal>
+                        </goals>
+                        <configuration>
+                            <artifacts>
+                                <artifact>
+                                    <type>jar</type>
+                                    <file>${project.build.directory}/${project.build.finalName}.jar</file>
+                                </artifact>
+                            </artifacts>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+		</plugins>
+	</build>
+</project>
Index: PullToRefreshLibrary/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values/dimens.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values/dimens.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <dimen name="indicator_right_padding">10dp</dimen>
+    <dimen name="indicator_corner_radius">12dp</dimen>
+    <dimen name="indicator_internal_padding">4dp</dimen>
+    <dimen name="header_footer_left_right_padding">24dp</dimen>
+    <dimen name="header_footer_top_bottom_padding">12dp</dimen>
+
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-he/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-he/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-he/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+  <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+  <string name="pull_to_refresh_refreshing_label">טוען…</string>
+</resources>
Index: PullToRefreshLibrary/src/main/res/values-pl/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-pl/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-pl/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Pociągnij, aby odświeżyć…</string>
+  <string name="pull_to_refresh_release_label">Puść, aby odświeżyć…</string>
+  <string name="pull_to_refresh_refreshing_label">Wczytywanie…</string>
+</resources>
Index: PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_horizontal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_horizontal.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_horizontal.xml	(revision )
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <ImageView
+            android:id="@+id/pull_to_refresh_image"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center" />
+
+        <ProgressBar
+            android:id="@+id/pull_to_refresh_progress"
+            style="?android:attr/progressBarStyleSmall"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:indeterminate="true"
+            android:visibility="gone" />
+    </FrameLayout>
+
+</merge>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-pt-rBR/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-pt-rBR/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-pt-rBR/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+  <string name="pull_to_refresh_release_label">Libere para atualizar…</string>
+  <string name="pull_to_refresh_refreshing_label">Carregando…</string>
+</resources>
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-zh/values-zh.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-zh/values-zh.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-zh/values-zh.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-zh/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">下拉刷新…</string>
+    <string name="pull_to_refresh_refreshing_label">正在载入…</string>
+    <string name="pull_to_refresh_release_label">放开以刷新…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-cs/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-cs/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-cs/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Tažením aktualizujete…</string>
+  <string name="pull_to_refresh_release_label">Uvolněním aktualizujete…</string>
+  <string name="pull_to_refresh_refreshing_label">Načítání…</string>
+</resources>
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-it/values-it.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-it/values-it.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-it/values-it.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-it/values-it.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tira per aggiornare…</string>
+    <string name="pull_to_refresh_refreshing_label">Caricamento…</string>
+    <string name="pull_to_refresh_release_label">Rilascia per aggionare…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-ja/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-ja/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-ja/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">画面を引っ張って…</string>
+  <string name="pull_to_refresh_release_label">指を離して更新…</string>
+  <string name="pull_to_refresh_refreshing_label">読み込み中…</string>
+</resources>
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/util/HandleUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/util/HandleUtil.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/util/HandleUtil.java	(revision )
@@ -0,0 +1,223 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.util;
+
+
+import android.graphics.PointF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.cropwindow.handle.Handle;
+
+/**
+ * Utility class to perform basic operations with Handles.
+ */
+public class HandleUtil {
+
+    // Public Methods //////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Determines which, if any, of the handles are pressed given the touch coordinates, the
+     * bounding box, and the touch radius.
+     *
+     * @param x            the x-coordinate of the touch point
+     * @param y            the y-coordinate of the touch point
+     * @param left         the x-coordinate of the left bound
+     * @param top          the y-coordinate of the top bound
+     * @param right        the x-coordinate of the right bound
+     * @param bottom       the y-coordinate of the bottom bound
+     * @param targetRadius the target radius in pixels
+     *
+     * @return the Handle that was pressed; null if no Handle was pressed
+     */
+    public static Handle getPressedHandle(float x,
+                                          float y,
+                                          float left,
+                                          float top,
+                                          float right,
+                                          float bottom,
+                                          float targetRadius) {
+
+        // Find the closest corner handle to the touch point.
+        // If the touch point is in the target zone of this closest handle, then this is the pressed handle.
+        // Else, check if any of the edges are in the target zone of the touch point.
+        // Else, check if the touch point is within the crop window bounds; if so, then choose the center handle.
+
+        Handle closestHandle = null;
+        float closestDistance = Float.POSITIVE_INFINITY;
+
+        final float distanceToTopLeft = MathUtil.calculateDistance(x, y, left, top);
+        if (distanceToTopLeft < closestDistance) {
+            closestDistance = distanceToTopLeft;
+            closestHandle = Handle.TOP_LEFT;
+        }
+
+        final float distanceToTopRight = MathUtil.calculateDistance(x, y, right, top);
+        if (distanceToTopRight < closestDistance) {
+            closestDistance = distanceToTopRight;
+            closestHandle = Handle.TOP_RIGHT;
+        }
+
+        final float distanceToBottomLeft = MathUtil.calculateDistance(x, y, left, bottom);
+        if (distanceToBottomLeft < closestDistance) {
+            closestDistance = distanceToBottomLeft;
+            closestHandle = Handle.BOTTOM_LEFT;
+        }
+
+        final float distanceToBottomRight = MathUtil.calculateDistance(x, y, right, bottom);
+        if (distanceToBottomRight < closestDistance) {
+            closestDistance = distanceToBottomRight;
+            closestHandle = Handle.BOTTOM_RIGHT;
+        }
+
+        if (closestDistance <= targetRadius) {
+            return closestHandle;
+        }
+
+        // If we get to this point, none of the corner handles were in the touch target zone, so then we check the edges.
+        if (HandleUtil.isInHorizontalTargetZone(x, y, left, right, top, targetRadius)) {
+            return Handle.TOP;
+        } else if (HandleUtil.isInHorizontalTargetZone(x, y, left, right, bottom, targetRadius)) {
+            return Handle.BOTTOM;
+        } else if (HandleUtil.isInVerticalTargetZone(x, y, left, top, bottom, targetRadius)) {
+            return Handle.LEFT;
+        } else if (HandleUtil.isInVerticalTargetZone(x, y, right, top, bottom, targetRadius)) {
+            return Handle.RIGHT;
+        }
+
+        // If we get to this point, none of the corners or edges are in the touch target zone.
+        // Check to see if the touch point is within the bounds of the crop window. If so, choose the center handle.
+        if (isWithinBounds(x, y, left, top, right, bottom)) {
+            return Handle.CENTER;
+        }
+
+        return null;
+    }
+
+    /**
+     * Calculates the offset of the touch point from the precise location of the specified handle.
+     * <p/>
+     * The offset will be returned in the 'touchOffsetOutput' parameter; the x-offset will be the
+     * first value and the y-offset will be the second value.
+     */
+    public static void getOffset(@NonNull Handle handle,
+                                 float x,
+                                 float y,
+                                 float left,
+                                 float top,
+                                 float right,
+                                 float bottom,
+                                 @NonNull PointF touchOffsetOutput) {
+
+        float touchOffsetX = 0;
+        float touchOffsetY = 0;
+
+        // Calculate the offset from the appropriate handle.
+        switch (handle) {
+
+            case TOP_LEFT:
+                touchOffsetX = left - x;
+                touchOffsetY = top - y;
+                break;
+            case TOP_RIGHT:
+                touchOffsetX = right - x;
+                touchOffsetY = top - y;
+                break;
+            case BOTTOM_LEFT:
+                touchOffsetX = left - x;
+                touchOffsetY = bottom - y;
+                break;
+            case BOTTOM_RIGHT:
+                touchOffsetX = right - x;
+                touchOffsetY = bottom - y;
+                break;
+            case LEFT:
+                touchOffsetX = left - x;
+                touchOffsetY = 0;
+                break;
+            case TOP:
+                touchOffsetX = 0;
+                touchOffsetY = top - y;
+                break;
+            case RIGHT:
+                touchOffsetX = right - x;
+                touchOffsetY = 0;
+                break;
+            case BOTTOM:
+                touchOffsetX = 0;
+                touchOffsetY = bottom - y;
+                break;
+            case CENTER:
+                final float centerX = (right + left) / 2;
+                final float centerY = (top + bottom) / 2;
+                touchOffsetX = centerX - x;
+                touchOffsetY = centerY - y;
+                break;
+        }
+
+        touchOffsetOutput.x = touchOffsetX;
+        touchOffsetOutput.y = touchOffsetY;
+    }
+
+    // Private Methods /////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Determines if the specified coordinate is in the target touch zone for a horizontal bar
+     * handle.
+     *
+     * @param x            the x-coordinate of the touch point
+     * @param y            the y-coordinate of the touch point
+     * @param handleXStart the left x-coordinate of the horizontal bar handle
+     * @param handleXEnd   the right x-coordinate of the horizontal bar handle
+     * @param handleY      the y-coordinate of the horizontal bar handle
+     * @param targetRadius the target radius in pixels
+     *
+     * @return true if the touch point is in the target touch zone; false otherwise
+     */
+    private static boolean isInHorizontalTargetZone(float x,
+                                                    float y,
+                                                    float handleXStart,
+                                                    float handleXEnd,
+                                                    float handleY,
+                                                    float targetRadius) {
+
+        return (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius);
+    }
+
+    /**
+     * Determines if the specified coordinate is in the target touch zone for a vertical bar
+     * handle.
+     *
+     * @param x            the x-coordinate of the touch point
+     * @param y            the y-coordinate of the touch point
+     * @param handleX      the x-coordinate of the vertical bar handle
+     * @param handleYStart the top y-coordinate of the vertical bar handle
+     * @param handleYEnd   the bottom y-coordinate of the vertical bar handle
+     * @param targetRadius the target radius in pixels
+     *
+     * @return true if the touch point is in the target touch zone; false otherwise
+     */
+    private static boolean isInVerticalTargetZone(float x,
+                                                  float y,
+                                                  float handleX,
+                                                  float handleYStart,
+                                                  float handleYEnd,
+                                                  float targetRadius) {
+
+        return (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd);
+    }
+
+    private static boolean isWithinBounds(float x, float y, float left, float top, float right, float bottom) {
+        return x >= left && x <= right && y >= top && y <= bottom;
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-fr/values-fr.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-fr/values-fr.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-fr/values-fr.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-fr/values-fr.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tirez pour rafraîchir…</string>
+    <string name="pull_to_refresh_refreshing_label">Chargement…</string>
+    <string name="pull_to_refresh_release_label">Relâcher pour rafraîchir…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java	(revision )
@@ -0,0 +1,110 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.internal;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Matrix;
+import android.graphics.drawable.Drawable;
+import android.view.animation.Animation;
+import android.view.animation.RotateAnimation;
+import android.widget.ImageView.ScaleType;
+
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Orientation;
+import com.handmark.pulltorefresh.library.R;
+
+public class RotateLoadingLayout extends LoadingLayout {
+
+	static final int ROTATION_ANIMATION_DURATION = 1200;
+
+	private final Animation mRotateAnimation;
+	private final Matrix mHeaderImageMatrix;
+
+	private float mRotationPivotX, mRotationPivotY;
+
+	private final boolean mRotateDrawableWhilePulling;
+
+	public RotateLoadingLayout(Context context, Mode mode, Orientation scrollDirection, TypedArray attrs) {
+		super(context, mode, scrollDirection, attrs);
+
+		mRotateDrawableWhilePulling = attrs.getBoolean(R.styleable.PullToRefresh_ptrRotateDrawableWhilePulling, true);
+
+		mHeaderImage.setScaleType(ScaleType.MATRIX);
+		mHeaderImageMatrix = new Matrix();
+		mHeaderImage.setImageMatrix(mHeaderImageMatrix);
+
+		mRotateAnimation = new RotateAnimation(0, 720, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,
+				0.5f);
+		mRotateAnimation.setInterpolator(ANIMATION_INTERPOLATOR);
+		mRotateAnimation.setDuration(ROTATION_ANIMATION_DURATION);
+		mRotateAnimation.setRepeatCount(Animation.INFINITE);
+		mRotateAnimation.setRepeatMode(Animation.RESTART);
+	}
+
+	public void onLoadingDrawableSet(Drawable imageDrawable) {
+		if (null != imageDrawable) {
+			mRotationPivotX = Math.round(imageDrawable.getIntrinsicWidth() / 2f);
+			mRotationPivotY = Math.round(imageDrawable.getIntrinsicHeight() / 2f);
+		}
+	}
+
+	protected void onPullImpl(float scaleOfLayout) {
+		float angle;
+		if (mRotateDrawableWhilePulling) {
+			angle = scaleOfLayout * 90f;
+		} else {
+			angle = Math.max(0f, Math.min(180f, scaleOfLayout * 360f - 180f));
+		}
+
+		mHeaderImageMatrix.setRotate(angle, mRotationPivotX, mRotationPivotY);
+		mHeaderImage.setImageMatrix(mHeaderImageMatrix);
+	}
+
+	@Override
+	protected void refreshingImpl() {
+		mHeaderImage.startAnimation(mRotateAnimation);
+	}
+
+	@Override
+	protected void resetImpl() {
+		mHeaderImage.clearAnimation();
+		resetImageRotation();
+	}
+
+	private void resetImageRotation() {
+		if (null != mHeaderImageMatrix) {
+			mHeaderImageMatrix.reset();
+			mHeaderImage.setImageMatrix(mHeaderImageMatrix);
+		}
+	}
+
+	@Override
+	protected void pullToRefreshImpl() {
+		// NO-OP
+	}
+
+	@Override
+	protected void releaseToRefreshImpl() {
+		// NO-OP
+	}
+
+	@Override
+	protected int getDefaultDrawableResId() {
+		return R.drawable.default_ptr_rotate;
+	}
+
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-nl/values-nl.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-nl/values-nl.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-nl/values-nl.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-nl/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Sleep om te vernieuwen…</string>
+    <string name="pull_to_refresh_refreshing_label">Laden…</string>
+    <string name="pull_to_refresh_release_label">Loslaten om te vernieuwen…</string>
+</resources>
\ No newline at end of file
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/util/MathUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/util/MathUtil.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/util/MathUtil.java	(revision )
@@ -0,0 +1,15 @@
+package com.edmodo.cropper.util;
+
+public class MathUtil {
+
+    /**
+     * Calculates the distance between two points (x1, y1) and (x2, y2).
+     */
+    public static float calculateDistance(float x1, float y1, float x2, float y2) {
+
+        final float side1 = x2 - x1;
+        final float side2 = y2 - y1;
+
+        return (float) Math.sqrt(side1 * side1 + side2 * side2);
+    }
+}
Index: app/src/main/res/layout/leftmenu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/leftmenu.xml	(revision )
+++ app/src/main/res/layout/leftmenu.xml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ListView
+        android:background="#2c90c9"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    </ListView>
+</LinearLayout>
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_vertical.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_vertical.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_vertical.xml	(revision )
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="left|center_vertical" >
+
+            <ImageView
+                android:id="@+id/pull_to_refresh_image"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center" />
+
+            <ProgressBar
+                android:id="@+id/pull_to_refresh_progress"
+                style="?android:attr/progressBarStyleSmall"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:indeterminate="true"
+                android:visibility="gone" />
+        </FrameLayout>
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:gravity="center_horizontal"
+            android:orientation="vertical" >
+
+            <TextView
+                android:id="@+id/pull_to_refresh_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearance"
+                android:textStyle="bold" />
+
+            <TextView
+                android:id="@+id/pull_to_refresh_sub_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:visibility="gone" />
+        </LinearLayout>
+    </FrameLayout>
+
+</merge><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_vertical.xml -->
\ No newline at end of file
Index: ultrapulltorefreshlibrary/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/build.gradle	(revision )
+++ ultrapulltorefreshlibrary/build.gradle	(revision )
@@ -0,0 +1,31 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "26.0.0"
+
+    defaultConfig {
+        minSdkVersion 15
+        targetSdkVersion 25
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
+        exclude group: 'com.android.support', module: 'support-annotations'
+    })
+    compile 'com.android.support:appcompat-v7:25.3.1'
+    testCompile 'junit:junit:4.12'
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/aapt/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/aapt/AndroidManifest.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/aapt/AndroidManifest.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.handmark.pulltorefresh.library"
+    android:versionCode="2110"
+    android:versionName="2.1.1" >
+
+    <uses-sdk
+        android:minSdkVersion="4"
+        android:targetSdkVersion="4" />
+
+    <application />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-es/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-es/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-es/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Tirar para actualizar…</string>
+  <string name="pull_to_refresh_release_label">Soltar para actualizar…</string>
+  <string name="pull_to_refresh_refreshing_label">Cargando…</string>
+</resources>
Index: SlidingMeunlibrary/build/generated/source/buildConfig/release/com/jeremyfeinstein/slidingmenu/lib/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/generated/source/buildConfig/release/com/jeremyfeinstein/slidingmenu/lib/BuildConfig.java	(revision )
+++ SlidingMeunlibrary/build/generated/source/buildConfig/release/com/jeremyfeinstein/slidingmenu/lib/BuildConfig.java	(revision )
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.jeremyfeinstein.slidingmenu.lib;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = false;
+  public static final String APPLICATION_ID = "com.jeremyfeinstein.slidingmenu.lib";
+  public static final String BUILD_TYPE = "release";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = 1;
+  public static final String VERSION_NAME = "";
+}
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrFrameLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrFrameLayout.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrFrameLayout.java	(revision )
@@ -0,0 +1,1049 @@
+package in.srain.cube.views.ptr;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.util.AttributeSet;
+import android.view.*;
+import android.widget.Scroller;
+import android.widget.TextView;
+
+import com.zhu.ultrapulltorefreshlibrary.R;
+
+import in.srain.cube.views.ptr.indicator.PtrIndicator;
+import in.srain.cube.views.ptr.util.PtrCLog;
+
+/**
+ * This layout view for "Pull to Refresh(Ptr)" support all of the view, you can contain everything you want.
+ * support: pull to refresh / release to refresh / auto refresh / keep header view while refreshing / hide header view while refreshing
+ * It defines {@link in.srain.cube.views.ptr.PtrUIHandler}, which allows you customize the UI easily.
+ */
+public class PtrFrameLayout extends ViewGroup {
+
+    // status enum
+    public final static byte PTR_STATUS_INIT = 1;
+    private byte mStatus = PTR_STATUS_INIT;
+    public final static byte PTR_STATUS_PREPARE = 2;
+    public final static byte PTR_STATUS_LOADING = 3;
+    public final static byte PTR_STATUS_COMPLETE = 4;
+    private static final boolean DEBUG_LAYOUT = true;
+    public static boolean DEBUG = false;
+    private static int ID = 1;
+    protected final String LOG_TAG = "ptr-frame-" + ++ID;
+    // auto refresh status
+    private final static byte FLAG_AUTO_REFRESH_AT_ONCE = 0x01;
+    private final static byte FLAG_AUTO_REFRESH_BUT_LATER = 0x01 << 1;
+    private final static byte FLAG_ENABLE_NEXT_PTR_AT_ONCE = 0x01 << 2;
+    private final static byte FLAG_PIN_CONTENT = 0x01 << 3;
+    private final static byte MASK_AUTO_REFRESH = 0x03;
+    protected View mContent;
+    // optional config for define header and content in xml file
+    private int mHeaderId = 0;
+    private int mContainerId = 0;
+    // config
+    private int mDurationToClose = 200;
+    private int mDurationToCloseHeader = 1000;
+    private boolean mKeepHeaderWhenRefresh = true;
+    private boolean mPullToRefresh = false;
+    private View mHeaderView;
+    private PtrUIHandlerHolder mPtrUIHandlerHolder = PtrUIHandlerHolder.create();
+    private PtrHandler mPtrHandler;
+    // working parameters
+    private ScrollChecker mScrollChecker;
+    private int mPagingTouchSlop;
+    private int mHeaderHeight;
+    private boolean mDisableWhenHorizontalMove = false;
+    private int mFlag = 0x00;
+
+    // disable when detect moving horizontally
+    private boolean mPreventForHorizontal = false;
+
+    private MotionEvent mLastMoveEvent;
+
+    private PtrUIHandlerHook mRefreshCompleteHook;
+
+    private int mLoadingMinTime = 500;
+    private long mLoadingStartTime = 0;
+    private PtrIndicator mPtrIndicator;
+    private boolean mHasSendCancelEvent = false;
+    private Runnable mPerformRefreshCompleteDelay = new Runnable() {
+        @Override
+        public void run() {
+            performRefreshComplete();
+        }
+    };
+
+    public PtrFrameLayout(Context context) {
+        this(context, null);
+    }
+
+    public PtrFrameLayout(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public PtrFrameLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        mPtrIndicator = new PtrIndicator();
+
+        TypedArray arr = context.obtainStyledAttributes(attrs, R.styleable.PtrFrameLayout, 0, 0);
+        if (arr != null) {
+
+            mHeaderId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_header, mHeaderId);
+            mContainerId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_content, mContainerId);
+
+            mPtrIndicator.setResistance(
+                    arr.getFloat(R.styleable.PtrFrameLayout_ptr_resistance, mPtrIndicator.getResistance()));
+
+            mDurationToClose = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close, mDurationToClose);
+            mDurationToCloseHeader = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close_header, mDurationToCloseHeader);
+
+            float ratio = mPtrIndicator.getRatioOfHeaderToHeightRefresh();
+            ratio = arr.getFloat(R.styleable.PtrFrameLayout_ptr_ratio_of_header_height_to_refresh, ratio);
+            mPtrIndicator.setRatioOfHeaderHeightToRefresh(ratio);
+
+            mKeepHeaderWhenRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_keep_header_when_refresh, mKeepHeaderWhenRefresh);
+
+            mPullToRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_pull_to_fresh, mPullToRefresh);
+            arr.recycle();
+        }
+
+        mScrollChecker = new ScrollChecker();
+
+        final ViewConfiguration conf = ViewConfiguration.get(getContext());
+        mPagingTouchSlop = conf.getScaledTouchSlop() * 2;
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        final int childCount = getChildCount();
+        if (childCount > 2) {
+            throw new IllegalStateException("PtrFrameLayout can only contains 2 children");
+        } else if (childCount == 2) {
+            if (mHeaderId != 0 && mHeaderView == null) {
+                mHeaderView = findViewById(mHeaderId);
+            }
+            if (mContainerId != 0 && mContent == null) {
+                mContent = findViewById(mContainerId);
+            }
+
+            // not specify header or content
+            if (mContent == null || mHeaderView == null) {
+
+                View child1 = getChildAt(0);
+                View child2 = getChildAt(1);
+                if (child1 instanceof PtrUIHandler) {
+                    mHeaderView = child1;
+                    mContent = child2;
+                } else if (child2 instanceof PtrUIHandler) {
+                    mHeaderView = child2;
+                    mContent = child1;
+                } else {
+                    // both are not specified
+                    if (mContent == null && mHeaderView == null) {
+                        mHeaderView = child1;
+                        mContent = child2;
+                    }
+                    // only one is specified
+                    else {
+                        if (mHeaderView == null) {
+                            mHeaderView = mContent == child1 ? child2 : child1;
+                        } else {
+                            mContent = mHeaderView == child1 ? child2 : child1;
+                        }
+                    }
+                }
+            }
+        } else if (childCount == 1) {
+            mContent = getChildAt(0);
+        } else {
+            TextView errorView = new TextView(getContext());
+            errorView.setClickable(true);
+            errorView.setTextColor(0xffff6600);
+            errorView.setGravity(Gravity.CENTER);
+            errorView.setTextSize(20);
+            errorView.setText("The content view in PtrFrameLayout is empty. Do you forget to specify its id in xml layout file?");
+            mContent = errorView;
+            addView(mContent);
+        }
+        if (mHeaderView != null) {
+            mHeaderView.bringToFront();
+        }
+        super.onFinishInflate();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (mScrollChecker != null) {
+            mScrollChecker.destroy();
+        }
+
+        if (mPerformRefreshCompleteDelay != null) {
+            removeCallbacks(mPerformRefreshCompleteDelay);
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        if (isDebug()) {
+            PtrCLog.d(LOG_TAG, "onMeasure frame: width: %s, height: %s, padding: %s %s %s %s",
+                    getMeasuredHeight(), getMeasuredWidth(),
+                    getPaddingLeft(), getPaddingRight(), getPaddingTop(), getPaddingBottom());
+
+        }
+
+        if (mHeaderView != null) {
+            measureChildWithMargins(mHeaderView, widthMeasureSpec, 0, heightMeasureSpec, 0);
+            MarginLayoutParams lp = (MarginLayoutParams) mHeaderView.getLayoutParams();
+            mHeaderHeight = mHeaderView.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;
+            mPtrIndicator.setHeaderHeight(mHeaderHeight);
+        }
+
+        if (mContent != null) {
+            measureContentView(mContent, widthMeasureSpec, heightMeasureSpec);
+            if (isDebug()) {
+                ViewGroup.MarginLayoutParams lp = (MarginLayoutParams) mContent.getLayoutParams();
+                PtrCLog.d(LOG_TAG, "onMeasure content, width: %s, height: %s, margin: %s %s %s %s",
+                        getMeasuredWidth(), getMeasuredHeight(),
+                        lp.leftMargin, lp.topMargin, lp.rightMargin, lp.bottomMargin);
+                PtrCLog.d(LOG_TAG, "onMeasure, currentPos: %s, lastPos: %s, top: %s",
+                        mPtrIndicator.getCurrentPosY(), mPtrIndicator.getLastPosY(), mContent.getTop());
+            }
+        }
+    }
+
+    private void measureContentView(View child,
+                                    int parentWidthMeasureSpec,
+                                    int parentHeightMeasureSpec) {
+        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();
+
+        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,
+                getPaddingLeft() + getPaddingRight() + lp.leftMargin + lp.rightMargin, lp.width);
+        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,
+                getPaddingTop() + getPaddingBottom() + lp.topMargin, lp.height);
+
+        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
+    }
+
+    @Override
+    protected void onLayout(boolean flag, int i, int j, int k, int l) {
+        layoutChildren();
+    }
+
+    private void layoutChildren() {
+        int offset = mPtrIndicator.getCurrentPosY();
+        int paddingLeft = getPaddingLeft();
+        int paddingTop = getPaddingTop();
+
+        if (mHeaderView != null) {
+            MarginLayoutParams lp = (MarginLayoutParams) mHeaderView.getLayoutParams();
+            final int left = paddingLeft + lp.leftMargin;
+            // enhance readability(header is layout above screen when first init)
+            final int top = -(mHeaderHeight - paddingTop - lp.topMargin - offset);
+            final int right = left + mHeaderView.getMeasuredWidth();
+            final int bottom = top + mHeaderView.getMeasuredHeight();
+            mHeaderView.layout(left, top, right, bottom);
+            if (isDebug()) {
+                PtrCLog.d(LOG_TAG, "onLayout header: %s %s %s %s", left, top, right, bottom);
+            }
+        }
+        if (mContent != null) {
+            if (isPinContent()) {
+                offset = 0;
+            }
+            MarginLayoutParams lp = (MarginLayoutParams) mContent.getLayoutParams();
+            final int left = paddingLeft + lp.leftMargin;
+            final int top = paddingTop + lp.topMargin + offset;
+            final int right = left + mContent.getMeasuredWidth();
+            final int bottom = top + mContent.getMeasuredHeight();
+            if (isDebug()) {
+                PtrCLog.d(LOG_TAG, "onLayout content: %s %s %s %s", left, top, right, bottom);
+            }
+            mContent.layout(left, top, right, bottom);
+        }
+    }
+
+    @SuppressWarnings({"PointlessBooleanExpression", "ConstantConditions"})
+    private boolean isDebug() {
+        return DEBUG && DEBUG_LAYOUT;
+    }
+
+    public boolean dispatchTouchEventSupper(MotionEvent e) {
+        return super.dispatchTouchEvent(e);
+    }
+
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent e) {
+        if (!isEnabled() || mContent == null || mHeaderView == null) {
+            return dispatchTouchEventSupper(e);
+        }
+        int action = e.getAction();
+        switch (action) {
+            case MotionEvent.ACTION_UP:
+            case MotionEvent.ACTION_CANCEL:
+                mPtrIndicator.onRelease();
+                if (mPtrIndicator.hasLeftStartPosition()) {
+                    if (DEBUG) {
+                        PtrCLog.d(LOG_TAG, "call onRelease when user release");
+                    }
+                    onRelease(false);
+                    if (mPtrIndicator.hasMovedAfterPressedDown()) {
+                        sendCancelEvent();
+                        return true;
+                    }
+                    return dispatchTouchEventSupper(e);
+                } else {
+                    return dispatchTouchEventSupper(e);
+                }
+
+            case MotionEvent.ACTION_DOWN:
+                mHasSendCancelEvent = false;
+                mPtrIndicator.onPressDown(e.getX(), e.getY());
+
+                mScrollChecker.abortIfWorking();
+
+                mPreventForHorizontal = false;
+                // The cancel event will be sent once the position is moved.
+                // So let the event pass to children.
+                // fix #93, #102
+                dispatchTouchEventSupper(e);
+                return true;
+
+            case MotionEvent.ACTION_MOVE:
+                mLastMoveEvent = e;
+                mPtrIndicator.onMove(e.getX(), e.getY());
+                float offsetX = mPtrIndicator.getOffsetX();
+                float offsetY = mPtrIndicator.getOffsetY();
+
+                if (mDisableWhenHorizontalMove && !mPreventForHorizontal && (Math.abs(offsetX) > mPagingTouchSlop && Math.abs(offsetX) > Math.abs(offsetY))) {
+                    if (mPtrIndicator.isInStartPosition()) {
+                        mPreventForHorizontal = true;
+                    }
+                }
+                if (mPreventForHorizontal) {
+                    return dispatchTouchEventSupper(e);
+                }
+
+                boolean moveDown = offsetY > 0;
+                boolean moveUp = !moveDown;
+                boolean canMoveUp = mPtrIndicator.hasLeftStartPosition();
+
+                if (DEBUG) {
+                    boolean canMoveDown = mPtrHandler != null && mPtrHandler.checkCanDoRefresh(this, mContent, mHeaderView);
+                    PtrCLog.v(LOG_TAG, "ACTION_MOVE: offsetY:%s, currentPos: %s, moveUp: %s, canMoveUp: %s, moveDown: %s: canMoveDown: %s", offsetY, mPtrIndicator.getCurrentPosY(), moveUp, canMoveUp, moveDown, canMoveDown);
+                }
+
+                // disable move when header not reach top
+                if (moveDown && mPtrHandler != null && !mPtrHandler.checkCanDoRefresh(this, mContent, mHeaderView)) {
+                    return dispatchTouchEventSupper(e);
+                }
+
+                if ((moveUp && canMoveUp) || moveDown) {
+                    movePos(offsetY);
+                    return true;
+                }
+        }
+        return dispatchTouchEventSupper(e);
+    }
+
+    /**
+     * if deltaY > 0, move the content down
+     *
+     * @param deltaY
+     */
+    private void movePos(float deltaY) {
+        // has reached the top
+        if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {
+            if (DEBUG) {
+                PtrCLog.e(LOG_TAG, String.format("has reached the top"));
+            }
+            return;
+        }
+
+        int to = mPtrIndicator.getCurrentPosY() + (int) deltaY;
+
+        // over top
+        if (mPtrIndicator.willOverTop(to)) {
+            if (DEBUG) {
+                PtrCLog.e(LOG_TAG, String.format("over top"));
+            }
+            to = PtrIndicator.POS_START;
+        }
+
+        mPtrIndicator.setCurrentPos(to);
+        int change = to - mPtrIndicator.getLastPosY();
+        updatePos(change);
+    }
+
+    private void updatePos(int change) {
+        if (change == 0) {
+            return;
+        }
+
+        boolean isUnderTouch = mPtrIndicator.isUnderTouch();
+
+        // once moved, cancel event will be sent to child
+        if (isUnderTouch && !mHasSendCancelEvent && mPtrIndicator.hasMovedAfterPressedDown()) {
+            mHasSendCancelEvent = true;
+            sendCancelEvent();
+        }
+
+        // leave initiated position or just refresh complete
+        if ((mPtrIndicator.hasJustLeftStartPosition() && mStatus == PTR_STATUS_INIT) ||
+                (mPtrIndicator.goDownCrossFinishPosition() && mStatus == PTR_STATUS_COMPLETE && isEnabledNextPtrAtOnce())) {
+
+            mStatus = PTR_STATUS_PREPARE;
+            mPtrUIHandlerHolder.onUIRefreshPrepare(this);
+            if (DEBUG) {
+                PtrCLog.i(LOG_TAG, "PtrUIHandler: onUIRefreshPrepare, mFlag %s", mFlag);
+            }
+        }
+
+        // back to initiated position
+        if (mPtrIndicator.hasJustBackToStartPosition()) {
+            tryToNotifyReset();
+
+            // recover event to children
+            if (isUnderTouch) {
+                sendDownEvent();
+            }
+        }
+
+        // Pull to Refresh
+        if (mStatus == PTR_STATUS_PREPARE) {
+            // reach fresh height while moving from top to bottom
+            if (isUnderTouch && !isAutoRefresh() && mPullToRefresh
+                    && mPtrIndicator.crossRefreshLineFromTopToBottom()) {
+                tryToPerformRefresh();
+            }
+            // reach header height while auto refresh
+            if (performAutoRefreshButLater() && mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) {
+                tryToPerformRefresh();
+            }
+        }
+
+        if (DEBUG) {
+            PtrCLog.v(LOG_TAG, "updatePos: change: %s, current: %s last: %s, top: %s, headerHeight: %s",
+                    change, mPtrIndicator.getCurrentPosY(), mPtrIndicator.getLastPosY(), mContent.getTop(), mHeaderHeight);
+        }
+
+        mHeaderView.offsetTopAndBottom(change);
+        if (!isPinContent()) {
+            mContent.offsetTopAndBottom(change);
+        }
+        invalidate();
+
+        if (mPtrUIHandlerHolder.hasHandler()) {
+            mPtrUIHandlerHolder.onUIPositionChange(this, isUnderTouch, mStatus, mPtrIndicator);
+        }
+        onPositionChange(isUnderTouch, mStatus, mPtrIndicator);
+    }
+
+    protected void onPositionChange(boolean isInTouching, byte status, PtrIndicator mPtrIndicator) {
+    }
+
+    @SuppressWarnings("unused")
+    public int getHeaderHeight() {
+        return mHeaderHeight;
+    }
+
+    private void onRelease(boolean stayForLoading) {
+
+        tryToPerformRefresh();
+
+        if (mStatus == PTR_STATUS_LOADING) {
+            // keep header for fresh
+            if (mKeepHeaderWhenRefresh) {
+                // scroll header back
+                if (mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() && !stayForLoading) {
+                    mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToKeepHeaderWhileLoading(), mDurationToClose);
+                } else {
+                    // do nothing
+                }
+            } else {
+                tryScrollBackToTopWhileLoading();
+            }
+        } else {
+            if (mStatus == PTR_STATUS_COMPLETE) {
+                notifyUIRefreshComplete(false);
+            } else {
+                tryScrollBackToTopAbortRefresh();
+            }
+        }
+    }
+
+    /**
+     * please DO REMEMBER resume the hook
+     *
+     * @param hook
+     */
+
+    public void setRefreshCompleteHook(PtrUIHandlerHook hook) {
+        mRefreshCompleteHook = hook;
+        hook.setResumeAction(new Runnable() {
+            @Override
+            public void run() {
+                if (DEBUG) {
+                    PtrCLog.d(LOG_TAG, "mRefreshCompleteHook resume.");
+                }
+                notifyUIRefreshComplete(true);
+            }
+        });
+    }
+
+    /**
+     * Scroll back to to if is not under touch
+     */
+    private void tryScrollBackToTop() {
+        if (!mPtrIndicator.isUnderTouch()) {
+            mScrollChecker.tryToScrollTo(PtrIndicator.POS_START, mDurationToCloseHeader);
+        }
+    }
+
+    /**
+     * just make easier to understand
+     */
+    private void tryScrollBackToTopWhileLoading() {
+        tryScrollBackToTop();
+    }
+
+    /**
+     * just make easier to understand
+     */
+    private void tryScrollBackToTopAfterComplete() {
+        tryScrollBackToTop();
+    }
+
+    /**
+     * just make easier to understand
+     */
+    private void tryScrollBackToTopAbortRefresh() {
+        tryScrollBackToTop();
+    }
+
+    private boolean tryToPerformRefresh() {
+        if (mStatus != PTR_STATUS_PREPARE) {
+            return false;
+        }
+
+        //
+        if ((mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() && isAutoRefresh()) || mPtrIndicator.isOverOffsetToRefresh()) {
+            mStatus = PTR_STATUS_LOADING;
+            performRefresh();
+        }
+        return false;
+    }
+
+    private void performRefresh() {
+        mLoadingStartTime = System.currentTimeMillis();
+        if (mPtrUIHandlerHolder.hasHandler()) {
+            mPtrUIHandlerHolder.onUIRefreshBegin(this);
+            if (DEBUG) {
+                PtrCLog.i(LOG_TAG, "PtrUIHandler: onUIRefreshBegin");
+            }
+        }
+        if (mPtrHandler != null) {
+            mPtrHandler.onRefreshBegin(this);
+        }
+    }
+
+    /**
+     * If at the top and not in loading, reset
+     */
+    private boolean tryToNotifyReset() {
+        if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {
+            if (mPtrUIHandlerHolder.hasHandler()) {
+                mPtrUIHandlerHolder.onUIReset(this);
+                if (DEBUG) {
+                    PtrCLog.i(LOG_TAG, "PtrUIHandler: onUIReset");
+                }
+            }
+            mStatus = PTR_STATUS_INIT;
+            clearFlag();
+            return true;
+        }
+        return false;
+    }
+
+    protected void onPtrScrollAbort() {
+        if (mPtrIndicator.hasLeftStartPosition() && isAutoRefresh()) {
+            if (DEBUG) {
+                PtrCLog.d(LOG_TAG, "call onRelease after scroll abort");
+            }
+            onRelease(true);
+        }
+    }
+
+    protected void onPtrScrollFinish() {
+        if (mPtrIndicator.hasLeftStartPosition() && isAutoRefresh()) {
+            if (DEBUG) {
+                PtrCLog.d(LOG_TAG, "call onRelease after scroll finish");
+            }
+            onRelease(true);
+        }
+    }
+
+    /**
+     * Detect whether is refreshing.
+     *
+     * @return
+     */
+    public boolean isRefreshing() {
+        return mStatus == PTR_STATUS_LOADING;
+    }
+
+    /**
+     * Call this when data is loaded.
+     * The UI will perform complete at once or after a delay, depends on the time elapsed is greater then {@link #mLoadingMinTime} or not.
+     */
+    final public void refreshComplete() {
+        if (DEBUG) {
+            PtrCLog.i(LOG_TAG, "refreshComplete");
+        }
+
+        if (mRefreshCompleteHook != null) {
+            mRefreshCompleteHook.reset();
+        }
+
+        int delay = (int) (mLoadingMinTime - (System.currentTimeMillis() - mLoadingStartTime));
+        if (delay <= 0) {
+            if (DEBUG) {
+                PtrCLog.d(LOG_TAG, "performRefreshComplete at once");
+            }
+            performRefreshComplete();
+        } else {
+            postDelayed(mPerformRefreshCompleteDelay, delay);
+            if (DEBUG) {
+                PtrCLog.d(LOG_TAG, "performRefreshComplete after delay: %s", delay);
+            }
+        }
+    }
+
+    /**
+     * Do refresh complete work when time elapsed is greater than {@link #mLoadingMinTime}
+     */
+    private void performRefreshComplete() {
+        mStatus = PTR_STATUS_COMPLETE;
+
+        // if is auto refresh do nothing, wait scroller stop
+        if (mScrollChecker.mIsRunning && isAutoRefresh()) {
+            // do nothing
+            if (DEBUG) {
+                PtrCLog.d(LOG_TAG, "performRefreshComplete do nothing, scrolling: %s, auto refresh: %s",
+                        mScrollChecker.mIsRunning, mFlag);
+            }
+            return;
+        }
+
+        notifyUIRefreshComplete(false);
+    }
+
+    /**
+     * Do real refresh work. If there is a hook, execute the hook first.
+     *
+     * @param ignoreHook
+     */
+    private void notifyUIRefreshComplete(boolean ignoreHook) {
+        /**
+         * After hook operation is done, {@link #notifyUIRefreshComplete} will be call in resume action to ignore hook.
+         */
+        if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {
+            if (DEBUG) {
+                PtrCLog.d(LOG_TAG, "notifyUIRefreshComplete mRefreshCompleteHook run.");
+            }
+
+            mRefreshCompleteHook.takeOver();
+            return;
+        }
+        if (mPtrUIHandlerHolder.hasHandler()) {
+            if (DEBUG) {
+                PtrCLog.i(LOG_TAG, "PtrUIHandler: onUIRefreshComplete");
+            }
+            mPtrUIHandlerHolder.onUIRefreshComplete(this);
+        }
+        mPtrIndicator.onUIRefreshComplete();
+        tryScrollBackToTopAfterComplete();
+        tryToNotifyReset();
+    }
+
+    public void autoRefresh() {
+        autoRefresh(true, mDurationToCloseHeader);
+    }
+
+    public void autoRefresh(boolean atOnce) {
+        autoRefresh(atOnce, mDurationToCloseHeader);
+    }
+
+    private void clearFlag() {
+        // remove auto fresh flag
+        mFlag = mFlag & ~MASK_AUTO_REFRESH;
+    }
+
+    public void autoRefresh(boolean atOnce, int duration) {
+
+        if (mStatus != PTR_STATUS_INIT) {
+            return;
+        }
+
+        mFlag |= atOnce ? FLAG_AUTO_REFRESH_AT_ONCE : FLAG_AUTO_REFRESH_BUT_LATER;
+
+        mStatus = PTR_STATUS_PREPARE;
+        if (mPtrUIHandlerHolder.hasHandler()) {
+            mPtrUIHandlerHolder.onUIRefreshPrepare(this);
+            if (DEBUG) {
+                PtrCLog.i(LOG_TAG, "PtrUIHandler: onUIRefreshPrepare, mFlag %s", mFlag);
+            }
+        }
+        mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToRefresh(), duration);
+        if (atOnce) {
+            mStatus = PTR_STATUS_LOADING;
+            performRefresh();
+        }
+    }
+
+    public boolean isAutoRefresh() {
+        return (mFlag & MASK_AUTO_REFRESH) > 0;
+    }
+
+    private boolean performAutoRefreshButLater() {
+        return (mFlag & MASK_AUTO_REFRESH) == FLAG_AUTO_REFRESH_BUT_LATER;
+    }
+
+    public boolean isEnabledNextPtrAtOnce() {
+        return (mFlag & FLAG_ENABLE_NEXT_PTR_AT_ONCE) > 0;
+    }
+
+    /**
+     * If @param enable has been set to true. The user can perform next PTR at once.
+     *
+     * @param enable
+     */
+    public void setEnabledNextPtrAtOnce(boolean enable) {
+        if (enable) {
+            mFlag = mFlag | FLAG_ENABLE_NEXT_PTR_AT_ONCE;
+        } else {
+            mFlag = mFlag & ~FLAG_ENABLE_NEXT_PTR_AT_ONCE;
+        }
+    }
+
+    public boolean isPinContent() {
+        return (mFlag & FLAG_PIN_CONTENT) > 0;
+    }
+
+    /**
+     * The content view will now move when {@param pinContent} set to true.
+     *
+     * @param pinContent
+     */
+    public void setPinContent(boolean pinContent) {
+        if (pinContent) {
+            mFlag = mFlag | FLAG_PIN_CONTENT;
+        } else {
+            mFlag = mFlag & ~FLAG_PIN_CONTENT;
+        }
+    }
+
+    /**
+     * It's useful when working with viewpager.
+     *
+     * @param disable
+     */
+    public void disableWhenHorizontalMove(boolean disable) {
+        mDisableWhenHorizontalMove = disable;
+    }
+
+    /**
+     * loading will last at least for so long
+     *
+     * @param time
+     */
+    public void setLoadingMinTime(int time) {
+        mLoadingMinTime = time;
+    }
+
+    /**
+     * Not necessary any longer. Once moved, cancel event will be sent to child.
+     *
+     * @param yes
+     */
+    @Deprecated
+    public void setInterceptEventWhileWorking(boolean yes) {
+    }
+
+    @SuppressWarnings({"unused"})
+    public View getContentView() {
+        return mContent;
+    }
+
+    public void setPtrHandler(PtrHandler ptrHandler) {
+        mPtrHandler = ptrHandler;
+    }
+
+    public void addPtrUIHandler(PtrUIHandler ptrUIHandler) {
+        PtrUIHandlerHolder.addHandler(mPtrUIHandlerHolder, ptrUIHandler);
+    }
+
+    @SuppressWarnings({"unused"})
+    public void removePtrUIHandler(PtrUIHandler ptrUIHandler) {
+        mPtrUIHandlerHolder = PtrUIHandlerHolder.removeHandler(mPtrUIHandlerHolder, ptrUIHandler);
+    }
+
+    public void setPtrIndicator(PtrIndicator slider) {
+        if (mPtrIndicator != null && mPtrIndicator != slider) {
+            slider.convertFrom(mPtrIndicator);
+        }
+        mPtrIndicator = slider;
+    }
+
+    @SuppressWarnings({"unused"})
+    public float getResistance() {
+        return mPtrIndicator.getResistance();
+    }
+
+    public void setResistance(float resistance) {
+        mPtrIndicator.setResistance(resistance);
+    }
+
+    @SuppressWarnings({"unused"})
+    public float getDurationToClose() {
+        return mDurationToClose;
+    }
+
+    /**
+     * The duration to return back to the refresh position
+     *
+     * @param duration
+     */
+    public void setDurationToClose(int duration) {
+        mDurationToClose = duration;
+    }
+
+    @SuppressWarnings({"unused"})
+    public long getDurationToCloseHeader() {
+        return mDurationToCloseHeader;
+    }
+
+    /**
+     * The duration to close time
+     *
+     * @param duration
+     */
+    public void setDurationToCloseHeader(int duration) {
+        mDurationToCloseHeader = duration;
+    }
+
+    public void setRatioOfHeaderHeightToRefresh(float ratio) {
+        mPtrIndicator.setRatioOfHeaderHeightToRefresh(ratio);
+    }
+
+    public int getOffsetToRefresh() {
+        return mPtrIndicator.getOffsetToRefresh();
+    }
+
+    @SuppressWarnings({"unused"})
+    public void setOffsetToRefresh(int offset) {
+        mPtrIndicator.setOffsetToRefresh(offset);
+    }
+
+    @SuppressWarnings({"unused"})
+    public float getRatioOfHeaderToHeightRefresh() {
+        return mPtrIndicator.getRatioOfHeaderToHeightRefresh();
+    }
+
+    @SuppressWarnings({"unused"})
+    public int getOffsetToKeepHeaderWhileLoading() {
+        return mPtrIndicator.getOffsetToKeepHeaderWhileLoading();
+    }
+
+    @SuppressWarnings({"unused"})
+    public void setOffsetToKeepHeaderWhileLoading(int offset) {
+        mPtrIndicator.setOffsetToKeepHeaderWhileLoading(offset);
+    }
+
+    @SuppressWarnings({"unused"})
+    public boolean isKeepHeaderWhenRefresh() {
+        return mKeepHeaderWhenRefresh;
+    }
+
+    public void setKeepHeaderWhenRefresh(boolean keepOrNot) {
+        mKeepHeaderWhenRefresh = keepOrNot;
+    }
+
+    public boolean isPullToRefresh() {
+        return mPullToRefresh;
+    }
+
+    public void setPullToRefresh(boolean pullToRefresh) {
+        mPullToRefresh = pullToRefresh;
+    }
+
+    @SuppressWarnings({"unused"})
+    public View getHeaderView() {
+        return mHeaderView;
+    }
+
+    public void setHeaderView(View header) {
+        if (mHeaderView != null && header != null && mHeaderView != header) {
+            removeView(mHeaderView);
+        }
+        ViewGroup.LayoutParams lp = header.getLayoutParams();
+        if (lp == null) {
+            lp = new LayoutParams(-1, -2);
+            header.setLayoutParams(lp);
+        }
+        mHeaderView = header;
+        addView(header);
+    }
+
+    @Override
+    protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
+        return p != null && p instanceof LayoutParams;
+    }
+
+    @Override
+    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+        return new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+    }
+
+    @Override
+    protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {
+        return new LayoutParams(p);
+    }
+
+    @Override
+    public ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs) {
+        return new LayoutParams(getContext(), attrs);
+    }
+
+    private void sendCancelEvent() {
+        if (DEBUG) {
+            PtrCLog.d(LOG_TAG, "send cancel event");
+        }
+        // The ScrollChecker will update position and lead to send cancel event when mLastMoveEvent is null.
+        // fix #104, #80, #92
+        if (mLastMoveEvent == null) {
+            return;
+        }
+        MotionEvent last = mLastMoveEvent;
+        MotionEvent e = MotionEvent.obtain(last.getDownTime(), last.getEventTime() + ViewConfiguration.getLongPressTimeout(), MotionEvent.ACTION_CANCEL, last.getX(), last.getY(), last.getMetaState());
+        dispatchTouchEventSupper(e);
+    }
+
+    private void sendDownEvent() {
+        if (DEBUG) {
+            PtrCLog.d(LOG_TAG, "send down event");
+        }
+        final MotionEvent last = mLastMoveEvent;
+        MotionEvent e = MotionEvent.obtain(last.getDownTime(), last.getEventTime(), MotionEvent.ACTION_DOWN, last.getX(), last.getY(), last.getMetaState());
+        dispatchTouchEventSupper(e);
+    }
+
+    public static class LayoutParams extends MarginLayoutParams {
+
+        public LayoutParams(Context c, AttributeSet attrs) {
+            super(c, attrs);
+        }
+
+        public LayoutParams(int width, int height) {
+            super(width, height);
+        }
+
+        @SuppressWarnings({"unused"})
+        public LayoutParams(MarginLayoutParams source) {
+            super(source);
+        }
+
+        public LayoutParams(ViewGroup.LayoutParams source) {
+            super(source);
+        }
+    }
+
+    class ScrollChecker implements Runnable {
+
+        private int mLastFlingY;
+        private Scroller mScroller;
+        private boolean mIsRunning = false;
+        private int mStart;
+        private int mTo;
+
+        public ScrollChecker() {
+            mScroller = new Scroller(getContext());
+        }
+
+        public void run() {
+            boolean finish = !mScroller.computeScrollOffset() || mScroller.isFinished();
+            int curY = mScroller.getCurrY();
+            int deltaY = curY - mLastFlingY;
+            if (DEBUG) {
+                if (deltaY != 0) {
+                    PtrCLog.v(LOG_TAG,
+                            "scroll: %s, start: %s, to: %s, currentPos: %s, current :%s, last: %s, delta: %s",
+                            finish, mStart, mTo, mPtrIndicator.getCurrentPosY(), curY, mLastFlingY, deltaY);
+                }
+            }
+            if (!finish) {
+                mLastFlingY = curY;
+                movePos(deltaY);
+                post(this);
+            } else {
+                finish();
+            }
+        }
+
+        private void finish() {
+            if (DEBUG) {
+                PtrCLog.v(LOG_TAG, "finish, currentPos:%s", mPtrIndicator.getCurrentPosY());
+            }
+            reset();
+            onPtrScrollFinish();
+        }
+
+        private void reset() {
+            mIsRunning = false;
+            mLastFlingY = 0;
+            removeCallbacks(this);
+        }
+
+        private void destroy() {
+            reset();
+            if (!mScroller.isFinished()) {
+                mScroller.forceFinished(true);
+            }
+        }
+
+        public void abortIfWorking() {
+            if (mIsRunning) {
+                if (!mScroller.isFinished()) {
+                    mScroller.forceFinished(true);
+                }
+                onPtrScrollAbort();
+                reset();
+            }
+        }
+
+        public void tryToScrollTo(int to, int duration) {
+            if (mPtrIndicator.isAlreadyHere(to)) {
+                return;
+            }
+            mStart = mPtrIndicator.getCurrentPosY();
+            mTo = to;
+            int distance = to - mStart;
+            if (DEBUG) {
+                PtrCLog.d(LOG_TAG, "tryToScrollTo: start: %s, distance:%s, to:%s", mStart, distance, to);
+            }
+            removeCallbacks(this);
+
+            mLastFlingY = 0;
+
+            // fix #47: Scroller should be reused, https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/issues/47
+            if (!mScroller.isFinished()) {
+                mScroller.forceFinished(true);
+            }
+            mScroller.startScroll(0, 0, 0, distance, duration);
+            post(this);
+            mIsRunning = true;
+        }
+    }
+}
Index: PullToRefreshLibrary/build/generated/source/buildConfig/debug/com/handmark/pulltorefresh/library/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/generated/source/buildConfig/debug/com/handmark/pulltorefresh/library/BuildConfig.java	(revision )
+++ PullToRefreshLibrary/build/generated/source/buildConfig/debug/com/handmark/pulltorefresh/library/BuildConfig.java	(revision )
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.handmark.pulltorefresh.library;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String APPLICATION_ID = "com.handmark.pulltorefresh.library";
+  public static final String BUILD_TYPE = "debug";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = 2110;
+  public static final String VERSION_NAME = "";
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ar/values-ar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ar/values-ar.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ar/values-ar.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ar/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">اسحب للتحديث…</string>
+    <string name="pull_to_refresh_refreshing_label">تحميل…</string>
+    <string name="pull_to_refresh_release_label">اترك للتحديث…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java	(revision )
@@ -0,0 +1,146 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.internal;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Matrix;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.Animation;
+import android.view.animation.RotateAnimation;
+import android.widget.ImageView.ScaleType;
+
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Orientation;
+import com.handmark.pulltorefresh.library.R;
+
+@SuppressLint("ViewConstructor")
+public class FlipLoadingLayout extends LoadingLayout {
+
+	static final int FLIP_ANIMATION_DURATION = 150;
+
+	private final Animation mRotateAnimation, mResetRotateAnimation;
+
+	public FlipLoadingLayout(Context context, final Mode mode, final Orientation scrollDirection, TypedArray attrs) {
+		super(context, mode, scrollDirection, attrs);
+
+		final int rotateAngle = mode == Mode.PULL_FROM_START ? -180 : 180;
+
+		mRotateAnimation = new RotateAnimation(0, rotateAngle, Animation.RELATIVE_TO_SELF, 0.5f,
+				Animation.RELATIVE_TO_SELF, 0.5f);
+		mRotateAnimation.setInterpolator(ANIMATION_INTERPOLATOR);
+		mRotateAnimation.setDuration(FLIP_ANIMATION_DURATION);
+		mRotateAnimation.setFillAfter(true);
+
+		mResetRotateAnimation = new RotateAnimation(rotateAngle, 0, Animation.RELATIVE_TO_SELF, 0.5f,
+				Animation.RELATIVE_TO_SELF, 0.5f);
+		mResetRotateAnimation.setInterpolator(ANIMATION_INTERPOLATOR);
+		mResetRotateAnimation.setDuration(FLIP_ANIMATION_DURATION);
+		mResetRotateAnimation.setFillAfter(true);
+	}
+
+	@Override
+	protected void onLoadingDrawableSet(Drawable imageDrawable) {
+		if (null != imageDrawable) {
+			final int dHeight = imageDrawable.getIntrinsicHeight();
+			final int dWidth = imageDrawable.getIntrinsicWidth();
+
+			/**
+			 * We need to set the width/height of the ImageView so that it is
+			 * square with each side the size of the largest drawable dimension.
+			 * This is so that it doesn't clip when rotated.
+			 */
+			ViewGroup.LayoutParams lp = mHeaderImage.getLayoutParams();
+			lp.width = lp.height = Math.max(dHeight, dWidth);
+			mHeaderImage.requestLayout();
+
+			/**
+			 * We now rotate the Drawable so that is at the correct rotation,
+			 * and is centered.
+			 */
+			mHeaderImage.setScaleType(ScaleType.MATRIX);
+			Matrix matrix = new Matrix();
+			matrix.postTranslate((lp.width - dWidth) / 2f, (lp.height - dHeight) / 2f);
+			matrix.postRotate(getDrawableRotationAngle(), lp.width / 2f, lp.height / 2f);
+			mHeaderImage.setImageMatrix(matrix);
+		}
+	}
+
+	@Override
+	protected void onPullImpl(float scaleOfLayout) {
+		// NO-OP
+	}
+
+	@Override
+	protected void pullToRefreshImpl() {
+		// Only start reset Animation, we've previously show the rotate anim
+		if (mRotateAnimation == mHeaderImage.getAnimation()) {
+			mHeaderImage.startAnimation(mResetRotateAnimation);
+		}
+	}
+
+	@Override
+	protected void refreshingImpl() {
+		mHeaderImage.clearAnimation();
+		mHeaderImage.setVisibility(View.INVISIBLE);
+		mHeaderProgress.setVisibility(View.VISIBLE);
+	}
+
+	@Override
+	protected void releaseToRefreshImpl() {
+		mHeaderImage.startAnimation(mRotateAnimation);
+	}
+
+	@Override
+	protected void resetImpl() {
+		mHeaderImage.clearAnimation();
+		mHeaderProgress.setVisibility(View.GONE);
+		mHeaderImage.setVisibility(View.VISIBLE);
+	}
+
+	@Override
+	protected int getDefaultDrawableResId() {
+		return R.drawable.default_ptr_flip;
+	}
+
+	private float getDrawableRotationAngle() {
+		float angle = 0f;
+		switch (mMode) {
+			case PULL_FROM_END:
+				if (mScrollDirection == Orientation.HORIZONTAL) {
+					angle = 90f;
+				} else {
+					angle = 180f;
+				}
+				break;
+
+			case PULL_FROM_START:
+				if (mScrollDirection == Orientation.HORIZONTAL) {
+					angle = 270f;
+				}
+				break;
+
+			default:
+				break;
+		}
+
+		return angle;
+	}
+
+}
Index: PullToRefreshLibrary/src/main/res/values-iw/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-iw/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-iw/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+  <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+  <string name="pull_to_refresh_refreshing_label">טוען…</string>
+</resources>
Index: SlidingMeunlibrary/res/values/ids.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/res/values/ids.xml	(revision )
+++ SlidingMeunlibrary/res/values/ids.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item name="selected_view" type="id"/>
+    
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/incremental/packageResources/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/incremental/packageResources/debug/merger.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/incremental/packageResources/debug/merger.xml	(revision )
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res"><file name="slidingmenumain" path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res\layout\slidingmenumain.xml" qualifiers="" type="layout"/><file path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res\values\attrs.xml" qualifiers=""><declare-styleable name="SlidingMenu">
+        <attr name="mode">
+            <enum name="left" value="0"/>
+            <enum name="right" value="1"/>
+        </attr>
+        <attr format="reference" name="viewAbove"/>
+        <attr format="reference" name="viewBehind"/>
+        <attr format="dimension" name="behindOffset"/>
+        <attr format="dimension" name="behindWidth"/>
+        <attr format="float" name="behindScrollScale"/>
+        <attr name="touchModeAbove">
+            <enum name="margin" value="0"/>
+            <enum name="fullscreen" value="1"/>
+            <enum name="none" value="2"/>
+        </attr>
+        <attr name="touchModeBehind">
+            <enum name="margin" value="0"/>
+            <enum name="fullscreen" value="1"/>
+            <enum name="none" value="2"/>
+        </attr>
+        <attr format="reference" name="shadowDrawable"/>
+        <attr format="dimension" name="shadowWidth"/>
+        <attr format="boolean" name="fadeEnabled"/>
+        <attr format="float" name="fadeDegree"/>
+        <attr format="boolean" name="selectorEnabled"/>
+        <attr format="reference" name="selectorDrawable"/>
+    </declare-styleable></file><file path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\res\values\ids.xml" qualifiers=""><item name="selected_view" type="id"/></file></source><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\generated\res\rs\debug"/><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\build\generated\res\generated\debug"/></dataSet><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\src\debug\res"/></dataSet><mergedItems><configuration qualifiers=""><declare-styleable name="SlidingMenu"><attr name="mode"><enum name="left" value="0"/><enum name="right" value="1"/></attr><attr format="reference" name="viewAbove"/><attr format="reference" name="viewBehind"/><attr format="dimension" name="behindOffset"/><attr format="dimension" name="behindWidth"/><attr format="float" name="behindScrollScale"/><attr name="touchModeAbove"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr name="touchModeBehind"><enum name="margin" value="0"/><enum name="fullscreen" value="1"/><enum name="none" value="2"/></attr><attr format="reference" name="shadowDrawable"/><attr format="dimension" name="shadowWidth"/><attr format="boolean" name="fadeEnabled"/><attr format="float" name="fadeDegree"/><attr format="boolean" name="selectorEnabled"/><attr format="reference" name="selectorDrawable"/></declare-styleable></configuration></mergedItems></merger>
\ No newline at end of file
Index: SlidingMeunlibrary/build/generated/source/buildConfig/debug/com/jeremyfeinstein/slidingmenu/lib/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/generated/source/buildConfig/debug/com/jeremyfeinstein/slidingmenu/lib/BuildConfig.java	(revision )
+++ SlidingMeunlibrary/build/generated/source/buildConfig/debug/com/jeremyfeinstein/slidingmenu/lib/BuildConfig.java	(revision )
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.jeremyfeinstein.slidingmenu.lib;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String APPLICATION_ID = "com.jeremyfeinstein.slidingmenu.lib";
+  public static final String BUILD_TYPE = "debug";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = 1;
+  public static final String VERSION_NAME = "";
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-cs/values-cs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-cs/values-cs.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-cs/values-cs.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-cs/values-cs.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tažením aktualizujete…</string>
+    <string name="pull_to_refresh_refreshing_label">Načítání…</string>
+    <string name="pull_to_refresh_release_label">Uvolněním aktualizujete…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/generated/source/r/release/com/handmark/pulltorefresh/library/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/generated/source/r/release/com/handmark/pulltorefresh/library/R.java	(revision )
+++ PullToRefreshLibrary/build/generated/source/r/release/com/handmark/pulltorefresh/library/R.java	(revision )
@@ -0,0 +1,453 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+
+package com.handmark.pulltorefresh.library;
+
+public final class R {
+    public static final class anim {
+        public static int slide_in_from_bottom=0x7f040000;
+        public static int slide_in_from_top=0x7f040001;
+        public static int slide_out_to_bottom=0x7f040002;
+        public static int slide_out_to_top=0x7f040003;
+    }
+    public static final class attr {
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrAdapterViewBackground=0x7f010010;
+        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>rotate</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>flip</code></td><td>0x1</td><td></td></tr>
+</table>
+         */
+        public static int ptrAnimationStyle=0x7f01000c;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawable=0x7f010006;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableBottom=0x7f010012;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableEnd=0x7f010008;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableStart=0x7f010007;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrDrawableTop=0x7f010011;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrHeaderBackground=0x7f010001;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrHeaderSubTextColor=0x7f010003;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrHeaderTextAppearance=0x7f01000a;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrHeaderTextColor=0x7f010002;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrListViewExtrasEnabled=0x7f01000e;
+        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>disabled</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>pullFromStart</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullFromEnd</code></td><td>0x2</td><td></td></tr>
+<tr><td><code>both</code></td><td>0x3</td><td></td></tr>
+<tr><td><code>manualOnly</code></td><td>0x4</td><td></td></tr>
+<tr><td><code>pullDownFromTop</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullUpFromBottom</code></td><td>0x2</td><td></td></tr>
+</table>
+         */
+        public static int ptrMode=0x7f010004;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrOverScroll=0x7f010009;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static int ptrRefreshableViewBackground=0x7f010000;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrRotateDrawableWhilePulling=0x7f01000f;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrScrollingWhileRefreshingEnabled=0x7f01000d;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static int ptrShowIndicator=0x7f010005;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static int ptrSubHeaderTextAppearance=0x7f01000b;
+    }
+    public static final class dimen {
+        public static int header_footer_left_right_padding=0x7f060000;
+        public static int header_footer_top_bottom_padding=0x7f060001;
+        public static int indicator_corner_radius=0x7f060002;
+        public static int indicator_internal_padding=0x7f060003;
+        public static int indicator_right_padding=0x7f060004;
+    }
+    public static final class drawable {
+        public static int default_ptr_flip=0x7f020000;
+        public static int default_ptr_rotate=0x7f020001;
+        public static int indicator_arrow=0x7f020002;
+        public static int indicator_bg_bottom=0x7f020003;
+        public static int indicator_bg_top=0x7f020004;
+    }
+    public static final class id {
+        public static int both=0x7f070003;
+        public static int disabled=0x7f070004;
+        public static int fl_inner=0x7f07000c;
+        public static int flip=0x7f07000a;
+        public static int gridview=0x7f070000;
+        public static int manualOnly=0x7f070005;
+        public static int pullDownFromTop=0x7f070006;
+        public static int pullFromEnd=0x7f070007;
+        public static int pullFromStart=0x7f070008;
+        public static int pullUpFromBottom=0x7f070009;
+        public static int pull_to_refresh_image=0x7f07000d;
+        public static int pull_to_refresh_progress=0x7f07000e;
+        public static int pull_to_refresh_sub_text=0x7f070010;
+        public static int pull_to_refresh_text=0x7f07000f;
+        public static int rotate=0x7f07000b;
+        public static int scrollview=0x7f070001;
+        public static int webview=0x7f070002;
+    }
+    public static final class layout {
+        public static int pull_to_refresh_header_horizontal=0x7f030000;
+        public static int pull_to_refresh_header_vertical=0x7f030001;
+    }
+    public static final class string {
+        public static int pull_to_refresh_from_bottom_pull_label=0x7f050003;
+        public static int pull_to_refresh_from_bottom_refreshing_label=0x7f050004;
+        public static int pull_to_refresh_from_bottom_release_label=0x7f050005;
+        public static int pull_to_refresh_pull_label=0x7f050000;
+        public static int pull_to_refresh_refreshing_label=0x7f050001;
+        public static int pull_to_refresh_release_label=0x7f050002;
+    }
+    public static final class styleable {
+        /** Attributes that can be used with a PullToRefresh.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrAdapterViewBackground com.handmark.pulltorefresh.library:ptrAdapterViewBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrAnimationStyle com.handmark.pulltorefresh.library:ptrAnimationStyle}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawable com.handmark.pulltorefresh.library:ptrDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableBottom com.handmark.pulltorefresh.library:ptrDrawableBottom}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableEnd com.handmark.pulltorefresh.library:ptrDrawableEnd}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableStart com.handmark.pulltorefresh.library:ptrDrawableStart}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableTop com.handmark.pulltorefresh.library:ptrDrawableTop}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderBackground com.handmark.pulltorefresh.library:ptrHeaderBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderSubTextColor com.handmark.pulltorefresh.library:ptrHeaderSubTextColor}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderTextAppearance com.handmark.pulltorefresh.library:ptrHeaderTextAppearance}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderTextColor com.handmark.pulltorefresh.library:ptrHeaderTextColor}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrListViewExtrasEnabled com.handmark.pulltorefresh.library:ptrListViewExtrasEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrMode com.handmark.pulltorefresh.library:ptrMode}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrOverScroll com.handmark.pulltorefresh.library:ptrOverScroll}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrRefreshableViewBackground com.handmark.pulltorefresh.library:ptrRefreshableViewBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrRotateDrawableWhilePulling com.handmark.pulltorefresh.library:ptrRotateDrawableWhilePulling}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrScrollingWhileRefreshingEnabled com.handmark.pulltorefresh.library:ptrScrollingWhileRefreshingEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrShowIndicator com.handmark.pulltorefresh.library:ptrShowIndicator}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrSubHeaderTextAppearance com.handmark.pulltorefresh.library:ptrSubHeaderTextAppearance}</code></td><td></td></tr>
+           </table>
+           @see #PullToRefresh_ptrAdapterViewBackground
+           @see #PullToRefresh_ptrAnimationStyle
+           @see #PullToRefresh_ptrDrawable
+           @see #PullToRefresh_ptrDrawableBottom
+           @see #PullToRefresh_ptrDrawableEnd
+           @see #PullToRefresh_ptrDrawableStart
+           @see #PullToRefresh_ptrDrawableTop
+           @see #PullToRefresh_ptrHeaderBackground
+           @see #PullToRefresh_ptrHeaderSubTextColor
+           @see #PullToRefresh_ptrHeaderTextAppearance
+           @see #PullToRefresh_ptrHeaderTextColor
+           @see #PullToRefresh_ptrListViewExtrasEnabled
+           @see #PullToRefresh_ptrMode
+           @see #PullToRefresh_ptrOverScroll
+           @see #PullToRefresh_ptrRefreshableViewBackground
+           @see #PullToRefresh_ptrRotateDrawableWhilePulling
+           @see #PullToRefresh_ptrScrollingWhileRefreshingEnabled
+           @see #PullToRefresh_ptrShowIndicator
+           @see #PullToRefresh_ptrSubHeaderTextAppearance
+         */
+        public static final int[] PullToRefresh = {
+            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
+            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
+            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
+            0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f,
+            0x7f010010, 0x7f010011, 0x7f010012
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrAdapterViewBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrAdapterViewBackground
+        */
+        public static int PullToRefresh_ptrAdapterViewBackground = 16;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrAnimationStyle}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>rotate</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>flip</code></td><td>0x1</td><td></td></tr>
+</table>
+          @attr name com.handmark.pulltorefresh.library:ptrAnimationStyle
+        */
+        public static int PullToRefresh_ptrAnimationStyle = 12;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawable}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawable
+        */
+        public static int PullToRefresh_ptrDrawable = 6;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableBottom}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableBottom
+        */
+        public static int PullToRefresh_ptrDrawableBottom = 18;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableEnd}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableEnd
+        */
+        public static int PullToRefresh_ptrDrawableEnd = 8;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableStart}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableStart
+        */
+        public static int PullToRefresh_ptrDrawableStart = 7;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrDrawableTop}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrDrawableTop
+        */
+        public static int PullToRefresh_ptrDrawableTop = 17;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderBackground
+        */
+        public static int PullToRefresh_ptrHeaderBackground = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderSubTextColor}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderSubTextColor
+        */
+        public static int PullToRefresh_ptrHeaderSubTextColor = 3;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderTextAppearance}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderTextAppearance
+        */
+        public static int PullToRefresh_ptrHeaderTextAppearance = 10;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrHeaderTextColor}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrHeaderTextColor
+        */
+        public static int PullToRefresh_ptrHeaderTextColor = 2;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrListViewExtrasEnabled}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrListViewExtrasEnabled
+        */
+        public static int PullToRefresh_ptrListViewExtrasEnabled = 14;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrMode}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>disabled</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>pullFromStart</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullFromEnd</code></td><td>0x2</td><td></td></tr>
+<tr><td><code>both</code></td><td>0x3</td><td></td></tr>
+<tr><td><code>manualOnly</code></td><td>0x4</td><td></td></tr>
+<tr><td><code>pullDownFromTop</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullUpFromBottom</code></td><td>0x2</td><td></td></tr>
+</table>
+          @attr name com.handmark.pulltorefresh.library:ptrMode
+        */
+        public static int PullToRefresh_ptrMode = 4;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrOverScroll}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrOverScroll
+        */
+        public static int PullToRefresh_ptrOverScroll = 9;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrRefreshableViewBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrRefreshableViewBackground
+        */
+        public static int PullToRefresh_ptrRefreshableViewBackground = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrRotateDrawableWhilePulling}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrRotateDrawableWhilePulling
+        */
+        public static int PullToRefresh_ptrRotateDrawableWhilePulling = 15;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrScrollingWhileRefreshingEnabled}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrScrollingWhileRefreshingEnabled
+        */
+        public static int PullToRefresh_ptrScrollingWhileRefreshingEnabled = 13;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrShowIndicator}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library:ptrShowIndicator
+        */
+        public static int PullToRefresh_ptrShowIndicator = 5;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.R.attr#ptrSubHeaderTextAppearance}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library:ptrSubHeaderTextAppearance
+        */
+        public static int PullToRefresh_ptrSubHeaderTextAppearance = 11;
+    };
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ja/values-ja.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ja/values-ja.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ja/values-ja.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ja/values-ja.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">画面を引っ張って…</string>
+    <string name="pull_to_refresh_refreshing_label">読み込み中…</string>
+    <string name="pull_to_refresh_release_label">指を離して更新…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-it/values-it.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-it/values-it.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-it/values-it.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-it/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tira per aggiornare…</string>
+    <string name="pull_to_refresh_refreshing_label">Caricamento…</string>
+    <string name="pull_to_refresh_release_label">Rilascia per aggionare…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/manifests/tmp/manifestMerger519829658964629184.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/manifests/tmp/manifestMerger519829658964629184.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/manifests/tmp/manifestMerger519829658964629184.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.handmark.pulltorefresh.library.test">
+
+    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="4" />
+
+    <application>
+        <uses-library android:name="android.test.runner" />
+    </application>
+
+    <instrumentation android:name="android.test.InstrumentationTestRunner"
+                     android:targetPackage="com.handmark.pulltorefresh.library.test"
+                     android:handleProfiling="false"
+                     android:functionalTest="false"
+                     android:label="Tests for com.handmark.pulltorefresh.library.test"/>
+</manifest>
Index: app/src/main/res/layout/image_cycle_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/image_cycle_layout.xml	(revision )
+++ app/src/main/res/layout/image_cycle_layout.xml	(revision )
@@ -0,0 +1,22 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/ad_rl"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <zhu.com.sortingdata.imagecycle.CycleViewPager
+        android:id="@+id/pager_banner"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" >
+    </zhu.com.sortingdata.imagecycle.CycleViewPager>
+
+    <LinearLayout
+        android:id="@+id/viewGroup"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_marginBottom="8dp"
+        android:gravity="center"
+        android:orientation="horizontal" >
+    </LinearLayout>
+
+</RelativeLayout>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandler.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandler.java	(revision )
@@ -0,0 +1,35 @@
+package in.srain.cube.views.ptr;
+
+import in.srain.cube.views.ptr.indicator.PtrIndicator;
+
+/**
+ *
+ */
+public interface PtrUIHandler {
+
+    /**
+     * When the content view has reached top and refresh has been completed, view will be reset.
+     *
+     * @param frame
+     */
+    public void onUIReset(PtrFrameLayout frame);
+
+    /**
+     * prepare for loading
+     *
+     * @param frame
+     */
+    public void onUIRefreshPrepare(PtrFrameLayout frame);
+
+    /**
+     * perform refreshing UI
+     */
+    public void onUIRefreshBegin(PtrFrameLayout frame);
+
+    /**
+     * perform UI after refresh
+     */
+    public void onUIRefreshComplete(PtrFrameLayout frame);
+
+    public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator);
+}
Index: app/src/main/java/zhu/com/sortingdata/util/MyApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/util/MyApplication.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/util/MyApplication.java	(revision )
@@ -0,0 +1,52 @@
+package zhu.com.sortingdata.util;
+
+import java.io.File;
+
+import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiskCache;
+import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
+import com.nostra13.universalimageloader.core.ImageLoader;
+import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
+import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
+import com.nostra13.universalimageloader.core.download.BaseImageDownloader;
+import com.nostra13.universalimageloader.utils.StorageUtils;
+
+import android.app.Application;
+import android.content.Context;
+
+public class MyApplication extends Application {
+
+
+
+	public MyApplication() {
+	}
+
+	@Override
+	public void onCreate() {
+		// TODO Auto-generated method stub
+		super.onCreate();
+		initImageLoader(getApplicationContext()  );
+	}
+
+	public static void initImageLoader(Context context  ) {
+		File cacheDir = StorageUtils.getOwnCacheDirectory(context , "imageloader/Cache" );
+		// This configuration tuning is custom. You can tune every option, you may tune some of them,
+		// or you can create default configuration by
+		//  ImageLoaderConfiguration.createDefault(this);
+		// method.
+		ImageLoaderConfiguration.Builder config = new ImageLoaderConfiguration.Builder(context);
+		config.threadPriority(Thread.NORM_PRIORITY - 2);
+		config.denyCacheImageMultipleSizesInMemory();
+		config.diskCacheFileNameGenerator(new Md5FileNameGenerator());//将保存的时候的URI名称用MD5 加密
+		config.diskCacheSize(50 * 1024 * 1024); // 50 MiB
+		config.tasksProcessingOrder(QueueProcessingType.LIFO);
+		config.writeDebugLogs(); // Remove for release app
+
+		config.threadPoolSize(3);//线程池内加载的数量
+		config.memoryCacheExtraOptions(200, 200); // max width, max height，即保存的每个缓存文件的最大长宽
+		config.imageDownloader(new BaseImageDownloader(context, 5 * 1000, 30 * 1000)); // connectTimeout (5 s), readTimeout (30 s)超时时间
+		config.diskCache(new UnlimitedDiskCache(cacheDir)) ;//自定义缓存路径
+
+		// Initialize ImageLoader with configuration.
+		ImageLoader.getInstance().init(config.build());
+	}
+}
Index: SlidingMeunlibrary/build/generated/source/buildConfig/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/test/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/generated/source/buildConfig/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/test/BuildConfig.java	(revision )
+++ SlidingMeunlibrary/build/generated/source/buildConfig/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/test/BuildConfig.java	(revision )
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.jeremyfeinstein.slidingmenu.lib.test;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String APPLICATION_ID = "com.jeremyfeinstein.slidingmenu.lib.test";
+  public static final String BUILD_TYPE = "debug";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = -1;
+  public static final String VERSION_NAME = "";
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/AndroidManifest.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/AndroidManifest.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.handmark.pulltorefresh.library"
+    android:versionCode="2110"
+    android:versionName="2.1.1" >
+
+    <uses-sdk
+        android:minSdkVersion="4"
+        android:targetSdkVersion="4" />
+
+    <application />
+
+</manifest>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_tab02.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_tab02.xml	(revision )
+++ app/src/main/res/layout/fragment_tab02.xml	(revision )
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/bg_color"
+    android:orientation="vertical">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="1、LinearLayout下拉"
+        android:textColor="@color/black" />
+
+    <in.srain.cube.views.ptr.PtrFrameLayout xmlns:cube_ptr="http://schemas.android.com/apk/res-auto"
+        android:id="@+id/ptr"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        cube_ptr:ptr_duration_to_close="200"
+        cube_ptr:ptr_duration_to_close_header="1000"
+        cube_ptr:ptr_keep_header_when_refresh="true"
+        cube_ptr:ptr_pull_to_fresh="false"
+        cube_ptr:ptr_ratio_of_header_height_to_refresh="1.2"
+        cube_ptr:ptr_resistance="1.7">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="LinearLayout下拉" />
+
+        </LinearLayout>
+
+    </in.srain.cube.views.ptr.PtrFrameLayout>
+</LinearLayout>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt-rBR/values-pt-rBR.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt-rBR/values-pt-rBR.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pt-rBR/values-pt-rBR.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-pt-rBR/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">Carregando…</string>
+    <string name="pull_to_refresh_release_label">Libere para atualizar…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_out_to_bottom.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="100%p" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_out_to_bottom.xml -->
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/util/PtrLocalDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/util/PtrLocalDisplay.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/util/PtrLocalDisplay.java	(revision )
@@ -0,0 +1,45 @@
+package in.srain.cube.views.ptr.util;
+
+import android.content.Context;
+import android.util.DisplayMetrics;
+import android.view.View;
+import android.view.WindowManager;
+
+public class PtrLocalDisplay {
+
+    public static int SCREEN_WIDTH_PIXELS;
+    public static int SCREEN_HEIGHT_PIXELS;
+    public static float SCREEN_DENSITY;
+    public static int SCREEN_WIDTH_DP;
+    public static int SCREEN_HEIGHT_DP;
+
+    public static void init(Context context) {
+        if (context == null) {
+            return;
+        }
+        DisplayMetrics dm = new DisplayMetrics();
+        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        wm.getDefaultDisplay().getMetrics(dm);
+        SCREEN_WIDTH_PIXELS = dm.widthPixels;
+        SCREEN_HEIGHT_PIXELS = dm.heightPixels;
+        SCREEN_DENSITY = dm.density;
+        SCREEN_WIDTH_DP = (int) (SCREEN_WIDTH_PIXELS / dm.density);
+        SCREEN_HEIGHT_DP = (int) (SCREEN_HEIGHT_PIXELS / dm.density);
+    }
+
+    public static int dp2px(float dp) {
+        final float scale = SCREEN_DENSITY;
+        return (int) (dp * scale + 0.5f);
+    }
+
+    public static int designedDP2px(float designedDp) {
+        if (SCREEN_WIDTH_DP != 320) {
+            designedDp = designedDp * SCREEN_WIDTH_DP / 320f;
+        }
+        return dp2px(designedDp);
+    }
+
+    public static void setPadding(final View view, float left, float top, float right, float bottom) {
+        view.setPadding(designedDP2px(left), dp2px(top), designedDP2px(right), dp2px(bottom));
+    }
+}
Index: SlidingMeunlibrary/build/tmp/packageReleaseJar/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/tmp/packageReleaseJar/MANIFEST.MF	(revision )
+++ SlidingMeunlibrary/build/tmp/packageReleaseJar/MANIFEST.MF	(revision )
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
Index: PullToRefreshLibrary/build/intermediates/bundles/release/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/AndroidManifest.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/AndroidManifest.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.handmark.pulltorefresh.library"
+    android:versionCode="2110"
+    android:versionName="2.1.1" >
+
+    <uses-sdk
+        android:minSdkVersion="4"
+        android:targetSdkVersion="4" />
+
+    <application />
+
+</manifest>
\ No newline at end of file
Index: app/src/main/res/values-v21/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-v21/styles.xml	(revision )
+++ app/src/main/res/values-v21/styles.xml	(revision )
@@ -0,0 +1,9 @@
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+</resources>
Index: app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/.gitignore	(revision )
+++ app/.gitignore	(revision )
@@ -0,0 +1,1 @@
+/build
Index: PullToRefreshLibrary/src/main/res/values-pt/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-pt/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-pt/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Puxe para atualizar…</string>
+  <string name="pull_to_refresh_release_label">Liberação para atualizar…</string>
+  <string name="pull_to_refresh_refreshing_label">A carregar…</string>
+</resources>
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/layout/pull_to_refresh_header_horizontal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/layout/pull_to_refresh_header_horizontal.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/layout/pull_to_refresh_header_horizontal.xml	(revision )
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <ImageView
+            android:id="@+id/pull_to_refresh_image"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center" />
+
+        <ProgressBar
+            android:id="@+id/pull_to_refresh_progress"
+            style="?android:attr/progressBarStyleSmall"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:indeterminate="true"
+            android:visibility="gone" />
+    </FrameLayout>
+
+</merge><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_horizontal.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-ro/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-ro/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-ro/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Trage pentru a reîmprospăta…</string>
+  <string name="pull_to_refresh_release_label">Eliberează pentru a reîmprospăta…</string>
+  <string name="pull_to_refresh_refreshing_label">Încărcare…</string>
+</resources>
Index: PullToRefreshLibrary/src/main/res/values-zh/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-zh/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-zh/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">下拉刷新…</string>
+  <string name="pull_to_refresh_release_label">放开以刷新…</string>
+  <string name="pull_to_refresh_refreshing_label">正在载入…</string>
+</resources>
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java	(revision )
@@ -0,0 +1,96 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.extras;
+
+import java.util.HashMap;
+
+import android.content.Context;
+import android.media.MediaPlayer;
+import android.view.View;
+
+import com.handmark.pulltorefresh.library.PullToRefreshBase;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.State;
+
+public class SoundPullEventListener<V extends View> implements PullToRefreshBase.OnPullEventListener<V> {
+
+	private final Context mContext;
+	private final HashMap<State, Integer> mSoundMap;
+
+	private MediaPlayer mCurrentMediaPlayer;
+
+	/**
+	 * Constructor
+	 * 
+	 * @param context - Context
+	 */
+	public SoundPullEventListener(Context context) {
+		mContext = context;
+		mSoundMap = new HashMap<State, Integer>();
+	}
+
+	@Override
+	public final void onPullEvent(PullToRefreshBase<V> refreshView, State event, Mode direction) {
+		Integer soundResIdObj = mSoundMap.get(event);
+		if (null != soundResIdObj) {
+			playSound(soundResIdObj.intValue());
+		}
+	}
+
+	/**
+	 * Set the Sounds to be played when a Pull Event happens. You specify which
+	 * sound plays for which events by calling this method multiple times for
+	 * each event.
+	 * <p/>
+	 * If you've already set a sound for a certain event, and add another sound
+	 * for that event, only the new sound will be played.
+	 * 
+	 * @param event - The event for which the sound will be played.
+	 * @param resId - Resource Id of the sound file to be played (e.g.
+	 *            <var>R.raw.pull_sound</var>)
+	 */
+	public void addSoundEvent(State event, int resId) {
+		mSoundMap.put(event, resId);
+	}
+
+	/**
+	 * Clears all of the previously set sounds and events.
+	 */
+	public void clearSounds() {
+		mSoundMap.clear();
+	}
+
+	/**
+	 * Gets the current (or last) MediaPlayer instance.
+	 */
+	public MediaPlayer getCurrentMediaPlayer() {
+		return mCurrentMediaPlayer;
+	}
+
+	private void playSound(int resId) {
+		// Stop current player, if there's one playing
+		if (null != mCurrentMediaPlayer) {
+			mCurrentMediaPlayer.stop();
+			mCurrentMediaPlayer.release();
+		}
+
+		mCurrentMediaPlayer = MediaPlayer.create(mContext, resId);
+		if (null != mCurrentMediaPlayer) {
+			mCurrentMediaPlayer.start();
+		}
+	}
+
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-zh/values-zh.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-zh/values-zh.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-zh/values-zh.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-zh/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">下拉刷新…</string>
+    <string name="pull_to_refresh_refreshing_label">正在载入…</string>
+    <string name="pull_to_refresh_release_label">放开以刷新…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ko/values-ko.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ko/values-ko.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ko/values-ko.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ko/values-ko.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">당겨서 새로 고침…</string>
+    <string name="pull_to_refresh_refreshing_label">로드 중…</string>
+    <string name="pull_to_refresh_release_label">놓아서 새로 고침…</string>
+</resources>
\ No newline at end of file
Index: cropperimagelibrary/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/proguard-rules.pro	(revision )
+++ cropperimagelibrary/proguard-rules.pro	(revision )
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in F:\ZZT\Tools\AndroidStudio\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
Index: SlidingMeunlibrary/build/intermediates/bundles/release/R.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/release/R.txt	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/release/R.txt	(revision )
@@ -0,0 +1,37 @@
+int attr behindOffset 0x7f010003
+int attr behindScrollScale 0x7f010005
+int attr behindWidth 0x7f010004
+int attr fadeDegree 0x7f01000b
+int attr fadeEnabled 0x7f01000a
+int attr mode 0x7f010000
+int attr selectorDrawable 0x7f01000d
+int attr selectorEnabled 0x7f01000c
+int attr shadowDrawable 0x7f010008
+int attr shadowWidth 0x7f010009
+int attr touchModeAbove 0x7f010006
+int attr touchModeBehind 0x7f010007
+int attr viewAbove 0x7f010001
+int attr viewBehind 0x7f010002
+int id fullscreen 0x7f030003
+int id left 0x7f030001
+int id margin 0x7f030004
+int id none 0x7f030005
+int id right 0x7f030002
+int id selected_view 0x7f030000
+int id slidingmenumain 0x7f030006
+int layout slidingmenumain 0x7f020000
+int[] styleable SlidingMenu { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d }
+int styleable SlidingMenu_behindOffset 3
+int styleable SlidingMenu_behindScrollScale 5
+int styleable SlidingMenu_behindWidth 4
+int styleable SlidingMenu_fadeDegree 11
+int styleable SlidingMenu_fadeEnabled 10
+int styleable SlidingMenu_mode 0
+int styleable SlidingMenu_selectorDrawable 13
+int styleable SlidingMenu_selectorEnabled 12
+int styleable SlidingMenu_shadowDrawable 8
+int styleable SlidingMenu_shadowWidth 9
+int styleable SlidingMenu_touchModeAbove 6
+int styleable SlidingMenu_touchModeBehind 7
+int styleable SlidingMenu_viewAbove 1
+int styleable SlidingMenu_viewBehind 2
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_main.xml	(revision )
+++ app/src/main/res/layout/activity_main.xml	(revision )
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <LinearLayout
+        android:id="@+id/ll_top"
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="60dp"
+        android:background="@color/top_bg"
+        android:layout_alignParentTop="true"
+        android:gravity="center_vertical">
+
+        <Button
+            android:layout_width="50dp"
+            android:layout_height="50dp"
+            android:background="@mipmap/ic_menu_bg"
+            android:id="@+id/bt_menu"  />
+    </LinearLayout>
+
+    <zhu.com.sortingdata.widget.CustomBar
+        android:id="@+id/main_customBar"
+        android:layout_width="match_parent"
+        android:layout_height="60dp"
+        android:layout_alignParentBottom="true" />
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/main_viewPager"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_below="@+id/ll_top"
+        android:layout_above="@+id/main_customBar"
+        />
+
+
+</RelativeLayout>
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/R.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/R.txt	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/R.txt	(revision )
@@ -0,0 +1,78 @@
+int anim slide_in_from_bottom 0x7f040000
+int anim slide_in_from_top 0x7f040001
+int anim slide_out_to_bottom 0x7f040002
+int anim slide_out_to_top 0x7f040003
+int attr ptrAdapterViewBackground 0x7f010010
+int attr ptrAnimationStyle 0x7f01000c
+int attr ptrDrawable 0x7f010006
+int attr ptrDrawableBottom 0x7f010012
+int attr ptrDrawableEnd 0x7f010008
+int attr ptrDrawableStart 0x7f010007
+int attr ptrDrawableTop 0x7f010011
+int attr ptrHeaderBackground 0x7f010001
+int attr ptrHeaderSubTextColor 0x7f010003
+int attr ptrHeaderTextAppearance 0x7f01000a
+int attr ptrHeaderTextColor 0x7f010002
+int attr ptrListViewExtrasEnabled 0x7f01000e
+int attr ptrMode 0x7f010004
+int attr ptrOverScroll 0x7f010009
+int attr ptrRefreshableViewBackground 0x7f010000
+int attr ptrRotateDrawableWhilePulling 0x7f01000f
+int attr ptrScrollingWhileRefreshingEnabled 0x7f01000d
+int attr ptrShowIndicator 0x7f010005
+int attr ptrSubHeaderTextAppearance 0x7f01000b
+int dimen header_footer_left_right_padding 0x7f060000
+int dimen header_footer_top_bottom_padding 0x7f060001
+int dimen indicator_corner_radius 0x7f060002
+int dimen indicator_internal_padding 0x7f060003
+int dimen indicator_right_padding 0x7f060004
+int drawable default_ptr_flip 0x7f020000
+int drawable default_ptr_rotate 0x7f020001
+int drawable indicator_arrow 0x7f020002
+int drawable indicator_bg_bottom 0x7f020003
+int drawable indicator_bg_top 0x7f020004
+int id both 0x7f070003
+int id disabled 0x7f070004
+int id fl_inner 0x7f07000c
+int id flip 0x7f07000a
+int id gridview 0x7f070000
+int id manualOnly 0x7f070005
+int id pullDownFromTop 0x7f070006
+int id pullFromEnd 0x7f070007
+int id pullFromStart 0x7f070008
+int id pullUpFromBottom 0x7f070009
+int id pull_to_refresh_image 0x7f07000d
+int id pull_to_refresh_progress 0x7f07000e
+int id pull_to_refresh_sub_text 0x7f070010
+int id pull_to_refresh_text 0x7f07000f
+int id rotate 0x7f07000b
+int id scrollview 0x7f070001
+int id webview 0x7f070002
+int layout pull_to_refresh_header_horizontal 0x7f030000
+int layout pull_to_refresh_header_vertical 0x7f030001
+int string pull_to_refresh_from_bottom_pull_label 0x7f050003
+int string pull_to_refresh_from_bottom_refreshing_label 0x7f050004
+int string pull_to_refresh_from_bottom_release_label 0x7f050005
+int string pull_to_refresh_pull_label 0x7f050000
+int string pull_to_refresh_refreshing_label 0x7f050001
+int string pull_to_refresh_release_label 0x7f050002
+int[] styleable PullToRefresh { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f, 0x7f010010, 0x7f010011, 0x7f010012 }
+int styleable PullToRefresh_ptrAdapterViewBackground 16
+int styleable PullToRefresh_ptrAnimationStyle 12
+int styleable PullToRefresh_ptrDrawable 6
+int styleable PullToRefresh_ptrDrawableBottom 18
+int styleable PullToRefresh_ptrDrawableEnd 8
+int styleable PullToRefresh_ptrDrawableStart 7
+int styleable PullToRefresh_ptrDrawableTop 17
+int styleable PullToRefresh_ptrHeaderBackground 1
+int styleable PullToRefresh_ptrHeaderSubTextColor 3
+int styleable PullToRefresh_ptrHeaderTextAppearance 10
+int styleable PullToRefresh_ptrHeaderTextColor 2
+int styleable PullToRefresh_ptrListViewExtrasEnabled 14
+int styleable PullToRefresh_ptrMode 4
+int styleable PullToRefresh_ptrOverScroll 9
+int styleable PullToRefresh_ptrRefreshableViewBackground 0
+int styleable PullToRefresh_ptrRotateDrawableWhilePulling 15
+int styleable PullToRefresh_ptrScrollingWhileRefreshingEnabled 13
+int styleable PullToRefresh_ptrShowIndicator 5
+int styleable PullToRefresh_ptrSubHeaderTextAppearance 11
Index: PullToRefreshLibrary/build/intermediates/bundles/release/R.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/R.txt	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/R.txt	(revision )
@@ -0,0 +1,78 @@
+int anim slide_in_from_bottom 0x7f040000
+int anim slide_in_from_top 0x7f040001
+int anim slide_out_to_bottom 0x7f040002
+int anim slide_out_to_top 0x7f040003
+int attr ptrAdapterViewBackground 0x7f010010
+int attr ptrAnimationStyle 0x7f01000c
+int attr ptrDrawable 0x7f010006
+int attr ptrDrawableBottom 0x7f010012
+int attr ptrDrawableEnd 0x7f010008
+int attr ptrDrawableStart 0x7f010007
+int attr ptrDrawableTop 0x7f010011
+int attr ptrHeaderBackground 0x7f010001
+int attr ptrHeaderSubTextColor 0x7f010003
+int attr ptrHeaderTextAppearance 0x7f01000a
+int attr ptrHeaderTextColor 0x7f010002
+int attr ptrListViewExtrasEnabled 0x7f01000e
+int attr ptrMode 0x7f010004
+int attr ptrOverScroll 0x7f010009
+int attr ptrRefreshableViewBackground 0x7f010000
+int attr ptrRotateDrawableWhilePulling 0x7f01000f
+int attr ptrScrollingWhileRefreshingEnabled 0x7f01000d
+int attr ptrShowIndicator 0x7f010005
+int attr ptrSubHeaderTextAppearance 0x7f01000b
+int dimen header_footer_left_right_padding 0x7f060000
+int dimen header_footer_top_bottom_padding 0x7f060001
+int dimen indicator_corner_radius 0x7f060002
+int dimen indicator_internal_padding 0x7f060003
+int dimen indicator_right_padding 0x7f060004
+int drawable default_ptr_flip 0x7f020000
+int drawable default_ptr_rotate 0x7f020001
+int drawable indicator_arrow 0x7f020002
+int drawable indicator_bg_bottom 0x7f020003
+int drawable indicator_bg_top 0x7f020004
+int id both 0x7f070003
+int id disabled 0x7f070004
+int id fl_inner 0x7f07000c
+int id flip 0x7f07000a
+int id gridview 0x7f070000
+int id manualOnly 0x7f070005
+int id pullDownFromTop 0x7f070006
+int id pullFromEnd 0x7f070007
+int id pullFromStart 0x7f070008
+int id pullUpFromBottom 0x7f070009
+int id pull_to_refresh_image 0x7f07000d
+int id pull_to_refresh_progress 0x7f07000e
+int id pull_to_refresh_sub_text 0x7f070010
+int id pull_to_refresh_text 0x7f07000f
+int id rotate 0x7f07000b
+int id scrollview 0x7f070001
+int id webview 0x7f070002
+int layout pull_to_refresh_header_horizontal 0x7f030000
+int layout pull_to_refresh_header_vertical 0x7f030001
+int string pull_to_refresh_from_bottom_pull_label 0x7f050003
+int string pull_to_refresh_from_bottom_refreshing_label 0x7f050004
+int string pull_to_refresh_from_bottom_release_label 0x7f050005
+int string pull_to_refresh_pull_label 0x7f050000
+int string pull_to_refresh_refreshing_label 0x7f050001
+int string pull_to_refresh_release_label 0x7f050002
+int[] styleable PullToRefresh { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f, 0x7f010010, 0x7f010011, 0x7f010012 }
+int styleable PullToRefresh_ptrAdapterViewBackground 16
+int styleable PullToRefresh_ptrAnimationStyle 12
+int styleable PullToRefresh_ptrDrawable 6
+int styleable PullToRefresh_ptrDrawableBottom 18
+int styleable PullToRefresh_ptrDrawableEnd 8
+int styleable PullToRefresh_ptrDrawableStart 7
+int styleable PullToRefresh_ptrDrawableTop 17
+int styleable PullToRefresh_ptrHeaderBackground 1
+int styleable PullToRefresh_ptrHeaderSubTextColor 3
+int styleable PullToRefresh_ptrHeaderTextAppearance 10
+int styleable PullToRefresh_ptrHeaderTextColor 2
+int styleable PullToRefresh_ptrListViewExtrasEnabled 14
+int styleable PullToRefresh_ptrMode 4
+int styleable PullToRefresh_ptrOverScroll 9
+int styleable PullToRefresh_ptrRefreshableViewBackground 0
+int styleable PullToRefresh_ptrRotateDrawableWhilePulling 15
+int styleable PullToRefresh_ptrScrollingWhileRefreshingEnabled 13
+int styleable PullToRefresh_ptrShowIndicator 5
+int styleable PullToRefresh_ptrSubHeaderTextAppearance 11
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/OverscrollHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/OverscrollHelper.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/OverscrollHelper.java	(revision )
@@ -0,0 +1,178 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.annotation.TargetApi;
+import android.util.Log;
+import android.view.View;
+
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.State;
+
+@TargetApi(9)
+public final class OverscrollHelper {
+
+	static final String LOG_TAG = "OverscrollHelper";
+	static final float DEFAULT_OVERSCROLL_SCALE = 1f;
+
+	/**
+	 * Helper method for Overscrolling that encapsulates all of the necessary
+	 * function.
+	 * <p/>
+	 * This should only be used on AdapterView's such as ListView as it just
+	 * calls through to overScrollBy() with the scrollRange = 0. AdapterView's
+	 * do not have a scroll range (i.e. getScrollY() doesn't work).
+	 * 
+	 * @param view - PullToRefreshView that is calling this.
+	 * @param deltaX - Change in X in pixels, passed through from from
+	 *            overScrollBy call
+	 * @param scrollX - Current X scroll value in pixels before applying deltaY,
+	 *            passed through from from overScrollBy call
+	 * @param deltaY - Change in Y in pixels, passed through from from
+	 *            overScrollBy call
+	 * @param scrollY - Current Y scroll value in pixels before applying deltaY,
+	 *            passed through from from overScrollBy call
+	 * @param isTouchEvent - true if this scroll operation is the result of a
+	 *            touch event, passed through from from overScrollBy call
+	 */
+	public static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,
+			final int deltaY, final int scrollY, final boolean isTouchEvent) {
+		overScrollBy(view, deltaX, scrollX, deltaY, scrollY, 0, isTouchEvent);
+	}
+
+	/**
+	 * Helper method for Overscrolling that encapsulates all of the necessary
+	 * function. This version of the call is used for Views that need to specify
+	 * a Scroll Range but scroll back to it's edge correctly.
+	 * 
+	 * @param view - PullToRefreshView that is calling this.
+	 * @param deltaX - Change in X in pixels, passed through from from
+	 *            overScrollBy call
+	 * @param scrollX - Current X scroll value in pixels before applying deltaY,
+	 *            passed through from from overScrollBy call
+	 * @param deltaY - Change in Y in pixels, passed through from from
+	 *            overScrollBy call
+	 * @param scrollY - Current Y scroll value in pixels before applying deltaY,
+	 *            passed through from from overScrollBy call
+	 * @param scrollRange - Scroll Range of the View, specifically needed for
+	 *            ScrollView
+	 * @param isTouchEvent - true if this scroll operation is the result of a
+	 *            touch event, passed through from from overScrollBy call
+	 */
+	public static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,
+			final int deltaY, final int scrollY, final int scrollRange, final boolean isTouchEvent) {
+		overScrollBy(view, deltaX, scrollX, deltaY, scrollY, scrollRange, 0, DEFAULT_OVERSCROLL_SCALE, isTouchEvent);
+	}
+
+	/**
+	 * Helper method for Overscrolling that encapsulates all of the necessary
+	 * function. This is the advanced version of the call.
+	 * 
+	 * @param view - PullToRefreshView that is calling this.
+	 * @param deltaX - Change in X in pixels, passed through from from
+	 *            overScrollBy call
+	 * @param scrollX - Current X scroll value in pixels before applying deltaY,
+	 *            passed through from from overScrollBy call
+	 * @param deltaY - Change in Y in pixels, passed through from from
+	 *            overScrollBy call
+	 * @param scrollY - Current Y scroll value in pixels before applying deltaY,
+	 *            passed through from from overScrollBy call
+	 * @param scrollRange - Scroll Range of the View, specifically needed for
+	 *            ScrollView
+	 * @param fuzzyThreshold - Threshold for which the values how fuzzy we
+	 *            should treat the other values. Needed for WebView as it
+	 *            doesn't always scroll back to it's edge. 0 = no fuzziness.
+	 * @param scaleFactor - Scale Factor for overscroll amount
+	 * @param isTouchEvent - true if this scroll operation is the result of a
+	 *            touch event, passed through from from overScrollBy call
+	 */
+	public static void overScrollBy(final PullToRefreshBase<?> view, final int deltaX, final int scrollX,
+			final int deltaY, final int scrollY, final int scrollRange, final int fuzzyThreshold,
+			final float scaleFactor, final boolean isTouchEvent) {
+
+		final int deltaValue, currentScrollValue, scrollValue;
+		switch (view.getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				deltaValue = deltaX;
+				scrollValue = scrollX;
+				currentScrollValue = view.getScrollX();
+				break;
+			case VERTICAL:
+			default:
+				deltaValue = deltaY;
+				scrollValue = scrollY;
+				currentScrollValue = view.getScrollY();
+				break;
+		}
+
+		// Check that OverScroll is enabled and that we're not currently
+		// refreshing.
+		if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
+			final Mode mode = view.getMode();
+
+			// Check that Pull-to-Refresh is enabled, and the event isn't from
+			// touch
+			if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
+				final int newScrollValue = (deltaValue + scrollValue);
+
+				if (PullToRefreshBase.DEBUG) {
+					Log.d(LOG_TAG, "OverScroll. DeltaX: " + deltaX + ", ScrollX: " + scrollX + ", DeltaY: " + deltaY
+							+ ", ScrollY: " + scrollY + ", NewY: " + newScrollValue + ", ScrollRange: " + scrollRange
+							+ ", CurrentScroll: " + currentScrollValue);
+				}
+
+				if (newScrollValue < (0 - fuzzyThreshold)) {
+					// Check the mode supports the overscroll direction, and
+					// then move scroll
+					if (mode.showHeaderLoadingLayout()) {
+						// If we're currently at zero, we're about to start
+						// overscrolling, so change the state
+						if (currentScrollValue == 0) {
+							view.setState(State.OVERSCROLLING);
+						}
+
+						view.setHeaderScroll((int) (scaleFactor * (currentScrollValue + newScrollValue)));
+					}
+				} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
+					// Check the mode supports the overscroll direction, and
+					// then move scroll
+					if (mode.showFooterLoadingLayout()) {
+						// If we're currently at zero, we're about to start
+						// overscrolling, so change the state
+						if (currentScrollValue == 0) {
+							view.setState(State.OVERSCROLLING);
+						}
+
+						view.setHeaderScroll((int) (scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
+					}
+				} else if (Math.abs(newScrollValue) <= fuzzyThreshold
+						|| Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
+					// Means we've stopped overscrolling, so scroll back to 0
+					view.setState(State.RESET);
+				}
+			} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
+				// This condition means that we were overscrolling from a fling,
+				// but the user has touched the View and is now overscrolling
+				// from touch instead. We need to just reset.
+				view.setState(State.RESET);
+			}
+		}
+	}
+
+	static boolean isAndroidOverScrollEnabled(View view) {
+		return view.getOverScrollMode() != View.OVER_SCROLL_NEVER;
+	}
+}
Index: app/src/main/java/zhu/com/sortingdata/imagecycle/ImageCycleView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/imagecycle/ImageCycleView.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/imagecycle/ImageCycleView.java	(revision )
@@ -0,0 +1,326 @@
+package zhu.com.sortingdata.imagecycle;
+
+import java.util.ArrayList;
+import java.util.Date;
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.support.v4.view.ViewPager.OnPageChangeListener;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+
+
+import zhu.com.sortingdata.R;
+import zhu.com.sortingdata.imagecycle.CycleViewPager;
+
+/**
+ * 广告图片自动轮播控件</br>
+ *
+ * <pre>
+ *   集合ViewPager和指示器的一个轮播控件，主要用于常见的广告图片轮播，具有自动轮播和手动轮播功能
+ *   使用：只在xml文件中使用com.zhu.sortingdata.imagecycle.ImageCycleView
+ 然后在页面中调用  {@link #setImageResources(ArrayList, ImageCycleViewListener) }即可!
+ *
+ *   另外提供{@link #startImageCycle() } \ {@link #pushImageCycle() }两种方法，用于在Activity不可见之时节省资源；
+ *   因为自动轮播开启停止进行控制，有利于内存管理
+ * </pre>
+ *
+ */
+public class ImageCycleView extends LinearLayout {
+
+	/**
+	 * 上下文
+	 */
+	private Context mContext;
+
+	/**
+	 * 图片轮播视图
+	 */
+	private CycleViewPager mBannerPager = null;
+
+	/**
+	 * 滚动图片视图适配
+	 */
+	private ImageCycleAdapter mAdvAdapter;
+
+	/**
+	 * 图片轮播指示器控
+	 */
+	private ViewGroup mGroup;
+
+	/**
+	 * 图片轮播指示个图
+	 */
+	private ImageView mImageView = null;
+
+	/**
+	 * 滚动图片指示视图列表
+	 */
+	private ImageView[] mImageViews = null;
+
+	/**
+	 * 图片滚动当前图片下标
+	 */
+	private int mImageIndex = 1;
+
+	/**
+	 * 手机密度
+	 */
+	private float mScale;
+
+	// 图片点击监听计划
+	private ImageCycleViewListener mImageCycleViewListener ;
+
+	/**
+	 * @param context
+	 */
+	public ImageCycleView(Context context) {
+		super(context);
+	}
+
+	/**
+	 * @param context
+	 * @param attrs
+	 */
+	public ImageCycleView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		mContext = context;
+		mScale = context.getResources().getDisplayMetrics().density;
+		LayoutInflater.from(context).inflate(R.layout.image_cycle_layout, this);
+		mBannerPager = (CycleViewPager) findViewById(R.id.pager_banner);
+		mBannerPager.setOnPageChangeListener(new GuidePageChangeListener());
+		mBannerPager.setOnTouchListener(new OnTouchListener() {
+
+			@Override
+			public boolean onTouch(View v, MotionEvent event) {
+				switch (event.getAction()) {
+					case MotionEvent.ACTION_UP:
+						// ????图片滚动
+						startImageTimerTask();
+						break;
+					default:
+						// 停止图片滚动
+						stopImageTimerTask();
+						break;
+				}
+				return false;
+			}
+		});
+		// 滚动图片右下指示器视??
+		mGroup = (ViewGroup) findViewById(R.id.viewGroup);
+	}
+
+	/**
+	 * 装填图片数据
+	 *
+	 * @param
+	 * @param imageCycleViewListener
+	 */
+	public void setImageResources(ArrayList< ImageCycleInfo> infoList  , ImageCycleViewListener imageCycleViewListener) {
+		this.mImageCycleViewListener = imageCycleViewListener ;
+		// 清除所有子视图
+		mGroup.removeAllViews();
+		// 图片广告数量
+		final int imageCount = infoList.size();
+		mImageViews = new ImageView[imageCount];
+		for (int i = 0; i < imageCount; i++) {
+			mImageView = new ImageView(mContext);
+			LinearLayout.LayoutParams layout = new LinearLayout.LayoutParams(20,20);
+			layout.setMargins(3, 0, 3, 0);
+			mImageView.setLayoutParams(layout);
+			mImageViews[i] = mImageView;
+			if (i == 0) {
+				mImageViews[i].setBackgroundResource(R.drawable.point_bg_enable);
+			} else {
+				mImageViews[i].setBackgroundResource(R.drawable.point_bg_normal);
+			}
+			mGroup.addView(mImageViews[i]);
+		}
+		mAdvAdapter = new ImageCycleAdapter(mContext, infoList);
+		mBannerPager.setAdapter(mAdvAdapter);
+		startImageTimerTask();
+	}
+
+	/**
+	 * 开始轮播(手动控制自动轮播与否，便于资源控??
+	 */
+	public void startImageCycle() {
+		startImageTimerTask();
+	}
+
+	/**
+	 * 暂停轮播用于节省资源
+	 */
+	public void pushImageCycle() {
+		stopImageTimerTask();
+	}
+
+	/**
+	 * 定时图片滚动任务
+	 */
+	private void startImageTimerTask() {
+		stopImageTimerTask();
+		// 图片五秒滚动一次
+		mHandler.postDelayed(mImageTimerTask, 5000);
+	}
+
+	/**
+	 * 停止图片滚动任务
+	 */
+	private void stopImageTimerTask() {
+		mHandler.removeCallbacks(mImageTimerTask);
+	}
+
+	private Handler mHandler = new Handler();
+
+	/**
+	 * 图片自动轮播Task
+	 */
+	private Runnable mImageTimerTask = new Runnable() {
+
+		@Override
+		public void run() {
+			if (mImageViews != null) {
+				// 下标等于图片列表长度说明已滚动到第几张图片,重置下标
+				if ((++mImageIndex) == mImageViews.length + 1) {
+					mImageIndex = 1;
+				}
+				mBannerPager.setCurrentItem(mImageIndex);
+			}
+		}
+	};
+
+	/**
+	 * 轮播图片状态监听切换
+	 * @author minking
+	 */
+	private final class GuidePageChangeListener implements OnPageChangeListener {
+
+		@Override
+		public void onPageScrollStateChanged(int state) {
+			if (state == ViewPager.SCROLL_STATE_IDLE)
+				startImageTimerTask(); // 开始下次计时
+		}
+
+		@Override
+		public void onPageScrolled(int arg0, float arg1, int arg2) {
+		}
+
+		@Override
+		public void onPageSelected(int index) {
+
+			if (index == 0 || index == mImageViews.length + 1) {
+				return;
+			}
+			// 设置图片滚动指示器背
+			mImageIndex = index;
+			index -= 1;
+			mImageViews[index].setBackgroundResource(R.drawable.point_bg_enable);
+			for (int i = 0; i < mImageViews.length; i++) {
+				if (index != i) {
+					mImageViews[i].setBackgroundResource(R.drawable.point_bg_normal);
+				}
+			}
+
+		}
+
+	}
+
+	private class ImageCycleAdapter extends PagerAdapter {
+
+		/**
+		 * 图片视图缓存列表
+		 */
+		private ArrayList<ImageView> mImageViewCacheList;
+
+		/**
+		 * 图片资源列表
+		 */
+		private ArrayList< ImageCycleInfo> mAdList = new ArrayList< ImageCycleInfo>();
+
+		private Context mContext;
+
+		public ImageCycleAdapter(Context context, ArrayList< ImageCycleInfo> adList ) {
+			mContext = context;
+			mAdList = adList;
+			mImageViewCacheList = new ArrayList();
+		}
+
+		@Override
+		public int getCount() {
+			return mAdList.size();
+		}
+
+		@Override
+		public boolean isViewFromObject(View view, Object obj) {
+			return view == obj;
+		}
+
+		@Override
+		public Object instantiateItem(ViewGroup container, final int position) {
+			ImageView imageView = null;
+			if (mImageViewCacheList.isEmpty()) {
+				imageView = new ImageView(mContext);
+				imageView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
+				imageView.setScaleType(ImageView.ScaleType.FIT_XY);
+
+			} else {
+				imageView = mImageViewCacheList.remove(0);
+//				System.out.println("获取到的id：" + imageView.getTag());
+			}
+			// 设置图片点击监听
+			imageView.setOnClickListener(new OnClickListener() {
+
+				@Override
+				public void onClick(View v) {
+					mImageCycleViewListener.onImageClick(mAdList.get(position),position, v);
+				}
+			});
+//			imageView.setImageResource(mAdList.get(position).getImg());
+			mImageCycleViewListener.loadImageDisplay(imageView, mAdList.get(position));
+			container.addView(imageView);
+
+			return imageView;
+		}
+
+		@Override
+		public void destroyItem(ViewGroup container, int position, Object object) {
+			ImageView view = (ImageView) object;
+			container.removeView(view);
+			view.setTag(new Date());
+			mImageViewCacheList.add(view);
+//			System.out.println("移除的id：" + view.getTag());
+		}
+
+	}
+
+	/**
+	 * 轮播控件的监听事
+	 * @author minking
+	 */
+	public static interface ImageCycleViewListener {
+
+		/**
+		 * 单击图片事件
+		 *
+		 * @param
+		 * @param imageView
+		 */
+		public void onImageClick( ImageCycleInfo info, int postion, View imageView);
+
+		/**
+		 * 将图片显示的imageView中
+		 * @param info
+		 * @return
+		 */
+		public ImageView loadImageDisplay(ImageView imageView ,  ImageCycleInfo info );
+	}
+
+}
Index: ultrapulltorefreshlibrary/src/main/res/layout/cube_ptr_simple_loading.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/res/layout/cube_ptr_simple_loading.xml	(revision )
+++ ultrapulltorefreshlibrary/src/main/res/layout/cube_ptr_simple_loading.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ProgressBar
+    style="@android:style/Widget.ProgressBar.Small"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center" />
+
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ro/values-ro.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ro/values-ro.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ro/values-ro.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ro/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Trage pentru a reîmprospăta…</string>
+    <string name="pull_to_refresh_refreshing_label">Încărcare…</string>
+    <string name="pull_to_refresh_release_label">Eliberează pentru a reîmprospăta…</string>
+</resources>
\ No newline at end of file
Index: app/src/main/res/layout/content_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/content_main.xml	(revision )
+++ app/src/main/res/layout/content_main.xml	(revision )
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/content_main"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    app:layout_behavior="@string/appbar_scrolling_view_behavior"
+    tools:context="zhu.com.sortingdata.MainActivity"
+    tools:showIn="@layout/activity_main">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Hello World!" />
+</RelativeLayout>
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pl/values-pl.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pl/values-pl.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pl/values-pl.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-pl/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Pociągnij, aby odświeżyć…</string>
+    <string name="pull_to_refresh_refreshing_label">Wczytywanie…</string>
+    <string name="pull_to_refresh_release_label">Puść, aby odświeżyć…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_out_to_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_out_to_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_out_to_bottom.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="100%p" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_out_to_bottom.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-es/values-es.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-es/values-es.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-es/values-es.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-es/values-es.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tirar para actualizar…</string>
+    <string name="pull_to_refresh_refreshing_label">Cargando…</string>
+    <string name="pull_to_refresh_release_label">Soltar para actualizar…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/debug/merger.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/debug/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\assets"/></dataSet><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\debug\assets"/></dataSet></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/anim/slide_in_from_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/anim/slide_in_from_top.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/anim/slide_in_from_top.xml	(revision )
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="-100%p"
+    android:toYDelta="0" />
Index: PullToRefreshLibrary/src/main/res/values/ids.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values/ids.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values/ids.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <item type="id" name="gridview" />
+    <item type="id" name="webview" />
+    <item type="id" name="scrollview" />
+
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java	(revision )
@@ -0,0 +1,1022 @@
+package com.jeremyfeinstein.slidingmenu.lib;
+
+import java.lang.reflect.Method;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.Display;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.widget.FrameLayout;
+import android.widget.RelativeLayout;
+
+import com.jeremyfeinstein.slidingmenu.lib.CustomViewAbove.OnPageChangeListener;
+
+public class SlidingMenu extends RelativeLayout {
+
+	private static final String TAG = SlidingMenu.class.getSimpleName();
+
+	public static final int SLIDING_WINDOW = 0;
+	public static final int SLIDING_CONTENT = 1;
+	private boolean mActionbarOverlay = false;
+
+	/** Constant value for use with setTouchModeAbove(). Allows the SlidingMenu to be opened with a swipe
+	 * gesture on the screen's margin
+	 */
+	public static final int TOUCHMODE_MARGIN = 0;
+
+	/** Constant value for use with setTouchModeAbove(). Allows the SlidingMenu to be opened with a swipe
+	 * gesture anywhere on the screen
+	 */
+	public static final int TOUCHMODE_FULLSCREEN = 1;
+
+	/** Constant value for use with setTouchModeAbove(). Denies the SlidingMenu to be opened with a swipe
+	 * gesture
+	 */
+	public static final int TOUCHMODE_NONE = 2;
+
+	/** Constant value for use with setMode(). Puts the menu to the left of the content.
+	 */
+	public static final int LEFT = 0;
+
+	/** Constant value for use with setMode(). Puts the menu to the right of the content.
+	 */
+	public static final int RIGHT = 1;
+
+	/** Constant value for use with setMode(). Puts menus to the left and right of the content.
+	 */
+	public static final int LEFT_RIGHT = 2;
+
+	private CustomViewAbove mViewAbove;
+
+	private CustomViewBehind mViewBehind;
+
+	private OnOpenListener mOpenListener;
+	
+	private OnOpenListener mSecondaryOpenListner;
+
+	private OnCloseListener mCloseListener;
+
+	/**
+	 * The listener interface for receiving onOpen events.
+	 * The class that is interested in processing a onOpen
+	 * event implements this interface, and the object created
+	 * with that class is registered with a component using the
+	 * component's <code>addOnOpenListener<code> method. When
+	 * the onOpen event occurs, that object's appropriate
+	 * method is invoked
+	 */
+	public interface OnOpenListener {
+
+		/**
+		 * On open.
+		 */
+		public void onOpen();
+	}
+
+	/**
+	 * The listener interface for receiving onOpened events.
+	 * The class that is interested in processing a onOpened
+	 * event implements this interface, and the object created
+	 * with that class is registered with a component using the
+	 * component's <code>addOnOpenedListener<code> method. When
+	 * the onOpened event occurs, that object's appropriate
+	 * method is invoked.
+	 *
+	 * @see OnOpenedEvent
+	 */
+	public interface OnOpenedListener {
+
+		/**
+		 * On opened.
+		 */
+		public void onOpened();
+	}
+
+	/**
+	 * The listener interface for receiving onClose events.
+	 * The class that is interested in processing a onClose
+	 * event implements this interface, and the object created
+	 * with that class is registered with a component using the
+	 * component's <code>addOnCloseListener<code> method. When
+	 * the onClose event occurs, that object's appropriate
+	 * method is invoked.
+	 *
+	 * @see OnCloseEvent
+	 */
+	public interface OnCloseListener {
+
+		/**
+		 * On close.
+		 */
+		public void onClose();
+	}
+
+	/**
+	 * The listener interface for receiving onClosed events.
+	 * The class that is interested in processing a onClosed
+	 * event implements this interface, and the object created
+	 * with that class is registered with a component using the
+	 * component's <code>addOnClosedListener<code> method. When
+	 * the onClosed event occurs, that object's appropriate
+	 * method is invoked.
+	 *
+	 * @see OnClosedEvent
+	 */
+	public interface OnClosedListener {
+
+		/**
+		 * On closed.
+		 */
+		public void onClosed();
+	}
+
+	/**
+	 * The Interface CanvasTransformer.
+	 */
+	public interface CanvasTransformer {
+
+		/**
+		 * Transform canvas.
+		 *
+		 * @param canvas the canvas
+		 * @param percentOpen the percent open
+		 */
+		public void transformCanvas(Canvas canvas, float percentOpen);
+	}
+
+	/**
+	 * Instantiates a new SlidingMenu.
+	 *
+	 * @param context the associated Context
+	 */
+	public SlidingMenu(Context context) {
+		this(context, null);
+	}
+
+	/**
+	 * Instantiates a new SlidingMenu and attach to Activity.
+	 *
+	 * @param activity the activity to attach slidingmenu
+	 * @param slideStyle the slidingmenu style
+	 */
+	public SlidingMenu(Activity activity, int slideStyle) {
+		this(activity, null);
+		this.attachToActivity(activity, slideStyle);
+	}
+
+	/**
+	 * Instantiates a new SlidingMenu.
+	 *
+	 * @param context the associated Context
+	 * @param attrs the attrs
+	 */
+	public SlidingMenu(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
+
+	/**
+	 * Instantiates a new SlidingMenu.
+	 *
+	 * @param context the associated Context
+	 * @param attrs the attrs
+	 * @param defStyle the def style
+	 */
+	public SlidingMenu(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+		
+		LayoutParams behindParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+		mViewBehind = new CustomViewBehind(context);
+		addView(mViewBehind, behindParams);
+		LayoutParams aboveParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+		mViewAbove = new CustomViewAbove(context);
+		addView(mViewAbove, aboveParams);
+		// register the CustomViewBehind with the CustomViewAbove
+		mViewAbove.setCustomViewBehind(mViewBehind);
+		mViewBehind.setCustomViewAbove(mViewAbove);
+		mViewAbove.setOnPageChangeListener(new OnPageChangeListener() {
+			public static final int POSITION_OPEN = 0;
+			public static final int POSITION_CLOSE = 1;
+			public static final int POSITION_SECONDARY_OPEN = 2;
+
+			public void onPageScrolled(int position, float positionOffset,
+					int positionOffsetPixels) { }
+
+			public void onPageSelected(int position) {
+				if (position == POSITION_OPEN && mOpenListener != null) {
+					mOpenListener.onOpen();
+				} else if (position == POSITION_CLOSE && mCloseListener != null) {
+					mCloseListener.onClose();
+				} else if (position == POSITION_SECONDARY_OPEN && mSecondaryOpenListner != null ) {
+					mSecondaryOpenListner.onOpen();
+				}
+			}
+		});
+
+		// now style everything!
+		TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.SlidingMenu);
+		// set the above and behind views if defined in xml
+		int mode = ta.getInt(R.styleable.SlidingMenu_mode, LEFT);
+		setMode(mode);
+		int viewAbove = ta.getResourceId(R.styleable.SlidingMenu_viewAbove, -1);
+		if (viewAbove != -1) {
+			setContent(viewAbove);
+		} else {
+			setContent(new FrameLayout(context));
+		}
+		int viewBehind = ta.getResourceId(R.styleable.SlidingMenu_viewBehind, -1);
+		if (viewBehind != -1) {
+			setMenu(viewBehind); 
+		} else {
+			setMenu(new FrameLayout(context));
+		}
+		int touchModeAbove = ta.getInt(R.styleable.SlidingMenu_touchModeAbove, TOUCHMODE_MARGIN);
+		setTouchModeAbove(touchModeAbove);
+		int touchModeBehind = ta.getInt(R.styleable.SlidingMenu_touchModeBehind, TOUCHMODE_MARGIN);
+		setTouchModeBehind(touchModeBehind);
+
+		int offsetBehind = (int) ta.getDimension(R.styleable.SlidingMenu_behindOffset, -1);
+		int widthBehind = (int) ta.getDimension(R.styleable.SlidingMenu_behindWidth, -1);
+		if (offsetBehind != -1 && widthBehind != -1)
+			throw new IllegalStateException("Cannot set both behindOffset and behindWidth for a SlidingMenu");
+		else if (offsetBehind != -1)
+			setBehindOffset(offsetBehind);
+		else if (widthBehind != -1)
+			setBehindWidth(widthBehind);
+		else
+			setBehindOffset(0);
+		float scrollOffsetBehind = ta.getFloat(R.styleable.SlidingMenu_behindScrollScale, 0.33f);
+		setBehindScrollScale(scrollOffsetBehind);
+		int shadowRes = ta.getResourceId(R.styleable.SlidingMenu_shadowDrawable, -1);
+		if (shadowRes != -1) {
+			setShadowDrawable(shadowRes);
+		}
+		int shadowWidth = (int) ta.getDimension(R.styleable.SlidingMenu_shadowWidth, 0);
+		setShadowWidth(shadowWidth);
+		boolean fadeEnabled = ta.getBoolean(R.styleable.SlidingMenu_fadeEnabled, true);
+		setFadeEnabled(fadeEnabled);
+		float fadeDeg = ta.getFloat(R.styleable.SlidingMenu_fadeDegree, 0.33f);
+		setFadeDegree(fadeDeg);
+		boolean selectorEnabled = ta.getBoolean(R.styleable.SlidingMenu_selectorEnabled, false);
+		setSelectorEnabled(selectorEnabled);
+		int selectorRes = ta.getResourceId(R.styleable.SlidingMenu_selectorDrawable, -1);
+		if (selectorRes != -1)
+			setSelectorDrawable(selectorRes);
+		ta.recycle();
+	}
+
+	/**
+	 * Attaches the SlidingMenu to an entire Activity
+	 * 
+	 * @param activity the Activity
+	 * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW
+	 */
+	public void attachToActivity(Activity activity, int slideStyle) {
+		attachToActivity(activity, slideStyle, false);
+	}
+
+	/**
+	 * Attaches the SlidingMenu to an entire Activity
+	 * 
+	 * @param activity the Activity
+	 * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW
+	 * @param actionbarOverlay whether or not the ActionBar is overlaid
+	 */
+	public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {
+		if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)
+			throw new IllegalArgumentException("slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT");
+
+		if (getParent() != null)
+			throw new IllegalStateException("This SlidingMenu appears to already be attached");
+
+		// get the window background
+		TypedArray a = activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});
+		int background = a.getResourceId(0, 0);
+		a.recycle();
+
+		switch (slideStyle) {
+		case SLIDING_WINDOW:
+			mActionbarOverlay = false;
+			ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();
+			ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);
+			// save ActionBar themes that have transparent assets
+			decorChild.setBackgroundResource(background);
+			decor.removeView(decorChild);
+			decor.addView(this);
+			setContent(decorChild);
+			break;
+		case SLIDING_CONTENT:
+			mActionbarOverlay = actionbarOverlay;
+			// take the above view out of
+			ViewGroup contentParent = (ViewGroup)activity.findViewById(android.R.id.content);
+			View content = contentParent.getChildAt(0);
+			contentParent.removeView(content);
+			contentParent.addView(this);
+			setContent(content);
+			// save people from having transparent backgrounds
+			if (content.getBackground() == null)
+				content.setBackgroundResource(background);
+			break;
+		}
+	}
+
+	/**
+	 * Set the above view content from a layout resource. The resource will be inflated, adding all top-level views
+	 * to the above view.
+	 *
+	 * @param res the new content
+	 */
+	public void setContent(int res) {
+		setContent(LayoutInflater.from(getContext()).inflate(res, null));
+	}
+
+	/**
+	 * Set the above view content to the given View.
+	 *
+	 * @param view The desired content to display.
+	 */
+	public void setContent(View view) {
+		mViewAbove.setContent(view);
+		showContent();
+	}
+
+	/**
+	 * Retrieves the current content.
+	 * @return the current content
+	 */
+	public View getContent() {
+		return mViewAbove.getContent();
+	}
+
+	/**
+	 * Set the behind view (menu) content from a layout resource. The resource will be inflated, adding all top-level views
+	 * to the behind view.
+	 *
+	 * @param res the new content
+	 */
+	public void setMenu(int res) {
+		setMenu(LayoutInflater.from(getContext()).inflate(res, null));
+	}
+
+	/**
+	 * Set the behind view (menu) content to the given View.
+	 *
+	 * @param view The desired content to display.
+	 */
+	public void setMenu(View v) {
+		mViewBehind.setContent(v);
+	}
+
+	/**
+	 * Retrieves the main menu.
+	 * @return the main menu
+	 */
+	public View getMenu() {
+		return mViewBehind.getContent();
+	}
+
+	/**
+	 * Set the secondary behind view (right menu) content from a layout resource. The resource will be inflated, adding all top-level views
+	 * to the behind view.
+	 *
+	 * @param res the new content
+	 */
+	public void setSecondaryMenu(int res) {
+		setSecondaryMenu(LayoutInflater.from(getContext()).inflate(res, null));
+	}
+
+	/**
+	 * Set the secondary behind view (right menu) content to the given View.
+	 *
+	 * @param view The desired content to display.
+	 */
+	public void setSecondaryMenu(View v) {
+		mViewBehind.setSecondaryContent(v);
+		//		mViewBehind.invalidate();
+	}
+
+	/**
+	 * Retrieves the current secondary menu (right).
+	 * @return the current menu
+	 */
+	public View getSecondaryMenu() {
+		return mViewBehind.getSecondaryContent();
+	}
+
+
+	/**
+	 * Sets the sliding enabled.
+	 *
+	 * @param b true to enable sliding, false to disable it.
+	 */
+	public void setSlidingEnabled(boolean b) {
+		mViewAbove.setSlidingEnabled(b);
+	}
+
+	/**
+	 * Checks if is sliding enabled.
+	 *
+	 * @return true, if is sliding enabled
+	 */
+	public boolean isSlidingEnabled() {
+		return mViewAbove.isSlidingEnabled();
+	}
+
+	/**
+	 * Sets which side the SlidingMenu should appear on.
+	 * @param mode must be either SlidingMenu.LEFT or SlidingMenu.RIGHT
+	 */
+	public void setMode(int mode) {
+		if (mode != LEFT && mode != RIGHT && mode != LEFT_RIGHT) {
+			throw new IllegalStateException("SlidingMenu mode must be LEFT, RIGHT, or LEFT_RIGHT");
+		}
+		mViewBehind.setMode(mode);
+	}
+
+	/**
+	 * Returns the current side that the SlidingMenu is on.
+	 * @return the current mode, either SlidingMenu.LEFT or SlidingMenu.RIGHT
+	 */
+	public int getMode() {
+		return mViewBehind.getMode();
+	}
+
+	/**
+	 * Sets whether or not the SlidingMenu is in static mode (i.e. nothing is moving and everything is showing)
+	 *
+	 * @param b true to set static mode, false to disable static mode.
+	 */
+	public void setStatic(boolean b) {
+		if (b) {
+			setSlidingEnabled(false);
+			mViewAbove.setCustomViewBehind(null);
+			mViewAbove.setCurrentItem(1);
+			//			mViewBehind.setCurrentItem(0);	
+		} else {
+			mViewAbove.setCurrentItem(1);
+			//			mViewBehind.setCurrentItem(1);
+			mViewAbove.setCustomViewBehind(mViewBehind);
+			setSlidingEnabled(true);
+		}
+	}
+
+	/**
+	 * Opens the menu and shows the menu view.
+	 */
+	public void showMenu() {
+		showMenu(true);
+	}
+
+	/**
+	 * Opens the menu and shows the menu view.
+	 *
+	 * @param animate true to animate the transition, false to ignore animation
+	 */
+	public void showMenu(boolean animate) {
+		mViewAbove.setCurrentItem(0, animate);
+	}
+
+	/**
+	 * Opens the menu and shows the secondary menu view. Will default to the regular menu
+	 * if there is only one.
+	 */
+	public void showSecondaryMenu() {
+		showSecondaryMenu(true);
+	}
+
+	/**
+	 * Opens the menu and shows the secondary (right) menu view. Will default to the regular menu
+	 * if there is only one.
+	 *
+	 * @param animate true to animate the transition, false to ignore animation
+	 */
+	public void showSecondaryMenu(boolean animate) {
+		mViewAbove.setCurrentItem(2, animate);
+	}
+
+	/**
+	 * Closes the menu and shows the above view.
+	 */
+	public void showContent() {
+		showContent(true);
+	}
+
+	/**
+	 * Closes the menu and shows the above view.
+	 *
+	 * @param animate true to animate the transition, false to ignore animation
+	 */
+	public void showContent(boolean animate) {
+		mViewAbove.setCurrentItem(1, animate);
+	}
+
+	/**
+	 * Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.
+	 */
+	public void toggle() {
+		toggle(true);
+	}
+
+	/**
+	 * Toggle the SlidingMenu. If it is open, it will be closed, and vice versa.
+	 *
+	 * @param animate true to animate the transition, false to ignore animation
+	 */
+	public void toggle(boolean animate) {
+		if (isMenuShowing()) {
+			showContent(animate);
+		} else {
+			showMenu(animate);
+		}
+	}
+
+	/**
+	 * Checks if is the behind view showing.
+	 *
+	 * @return Whether or not the behind view is showing
+	 */
+	public boolean isMenuShowing() {
+		return mViewAbove.getCurrentItem() == 0 || mViewAbove.getCurrentItem() == 2;
+	}
+	
+	/**
+	 * Checks if is the behind view showing.
+	 *
+	 * @return Whether or not the behind view is showing
+	 */
+	public boolean isSecondaryMenuShowing() {
+		return mViewAbove.getCurrentItem() == 2;
+	}
+
+	/**
+	 * Gets the behind offset.
+	 *
+	 * @return The margin on the right of the screen that the behind view scrolls to
+	 */
+	public int getBehindOffset() {
+		return ((RelativeLayout.LayoutParams)mViewBehind.getLayoutParams()).rightMargin;
+	}
+
+	/**
+	 * Sets the behind offset.
+	 *
+	 * @param i The margin, in pixels, on the right of the screen that the behind view scrolls to.
+	 */
+	public void setBehindOffset(int i) {
+		//		RelativeLayout.LayoutParams params = ((RelativeLayout.LayoutParams)mViewBehind.getLayoutParams());
+		//		int bottom = params.bottomMargin;
+		//		int top = params.topMargin;
+		//		int left = params.leftMargin;
+		//		params.setMargins(left, top, i, bottom);
+		mViewBehind.setWidthOffset(i);
+	}
+
+	/**
+	 * Sets the behind offset.
+	 *
+	 * @param resID The dimension resource id to be set as the behind offset.
+	 * The menu, when open, will leave this width margin on the right of the screen.
+	 */
+	public void setBehindOffsetRes(int resID) {
+		int i = (int) getContext().getResources().getDimension(resID);
+		setBehindOffset(i);
+	}
+
+	/**
+	 * Sets the above offset.
+	 *
+	 * @param i the new above offset, in pixels
+	 */
+	public void setAboveOffset(int i) {
+		mViewAbove.setAboveOffset(i);
+	}
+
+	/**
+	 * Sets the above offset.
+	 *
+	 * @param resID The dimension resource id to be set as the above offset.
+	 */
+	public void setAboveOffsetRes(int resID) {
+		int i = (int) getContext().getResources().getDimension(resID);
+		setAboveOffset(i);
+	}
+
+	/**
+	 * Sets the behind width.
+	 *
+	 * @param i The width the Sliding Menu will open to, in pixels
+	 */
+	@SuppressWarnings("deprecation")
+	public void setBehindWidth(int i) {
+		int width;
+		Display display = ((WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE))
+				.getDefaultDisplay();
+		try {
+			Class<?> cls = Display.class;
+			Class<?>[] parameterTypes = {Point.class};
+			Point parameter = new Point();
+			Method method = cls.getMethod("getSize", parameterTypes);
+			method.invoke(display, parameter);
+			width = parameter.x;
+		} catch (Exception e) {
+			width = display.getWidth();
+		}
+		setBehindOffset(width-i);
+	}
+
+	/**
+	 * Sets the behind width.
+	 *
+	 * @param res The dimension resource id to be set as the behind width offset.
+	 * The menu, when open, will open this wide.
+	 */
+	public void setBehindWidthRes(int res) {
+		int i = (int) getContext().getResources().getDimension(res);
+		setBehindWidth(i);
+	}
+
+	/**
+	 * Gets the behind scroll scale.
+	 *
+	 * @return The scale of the parallax scroll
+	 */
+	public float getBehindScrollScale() {
+		return mViewBehind.getScrollScale();
+	}
+	
+	/**
+	 * Gets the touch mode margin threshold
+	 * @return the touch mode margin threshold
+	 */
+	public int getTouchmodeMarginThreshold() {
+		return mViewBehind.getMarginThreshold();
+	}
+	
+	/**
+	 * Set the touch mode margin threshold
+	 * @param touchmodeMarginThreshold
+	 */
+	public void setTouchmodeMarginThreshold(int touchmodeMarginThreshold) {
+		mViewBehind.setMarginThreshold(touchmodeMarginThreshold);
+	}
+
+	/**
+	 * Sets the behind scroll scale.
+	 *
+	 * @param f The scale of the parallax scroll (i.e. 1.0f scrolls 1 pixel for every
+	 * 1 pixel that the above view scrolls and 0.0f scrolls 0 pixels)
+	 */
+	public void setBehindScrollScale(float f) {
+		if (f < 0 && f > 1)
+			throw new IllegalStateException("ScrollScale must be between 0 and 1");
+		mViewBehind.setScrollScale(f);
+	}
+
+	/**
+	 * Sets the behind canvas transformer.
+	 *
+	 * @param t the new behind canvas transformer
+	 */
+	public void setBehindCanvasTransformer(CanvasTransformer t) {
+		mViewBehind.setCanvasTransformer(t);
+	}
+
+	/**
+	 * Gets the touch mode above.
+	 *
+	 * @return the touch mode above
+	 */
+	public int getTouchModeAbove() {
+		return mViewAbove.getTouchMode();
+	}
+
+	/**
+	 * Controls whether the SlidingMenu can be opened with a swipe gesture.
+	 * Options are {@link #TOUCHMODE_MARGIN TOUCHMODE_MARGIN}, {@link #TOUCHMODE_FULLSCREEN TOUCHMODE_FULLSCREEN},
+	 * or {@link #TOUCHMODE_NONE TOUCHMODE_NONE}
+	 *
+	 * @param i the new touch mode
+	 */
+	public void setTouchModeAbove(int i) {
+		if (i != TOUCHMODE_FULLSCREEN && i != TOUCHMODE_MARGIN
+				&& i != TOUCHMODE_NONE) {
+			throw new IllegalStateException("TouchMode must be set to either" +
+					"TOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN or TOUCHMODE_NONE.");
+		}
+		mViewAbove.setTouchMode(i);
+	}
+
+	/**
+	 * Controls whether the SlidingMenu can be opened with a swipe gesture.
+	 * Options are {@link #TOUCHMODE_MARGIN TOUCHMODE_MARGIN}, {@link #TOUCHMODE_FULLSCREEN TOUCHMODE_FULLSCREEN},
+	 * or {@link #TOUCHMODE_NONE TOUCHMODE_NONE}
+	 *
+	 * @param i the new touch mode
+	 */
+	public void setTouchModeBehind(int i) {
+		if (i != TOUCHMODE_FULLSCREEN && i != TOUCHMODE_MARGIN
+				&& i != TOUCHMODE_NONE) {
+			throw new IllegalStateException("TouchMode must be set to either" +
+					"TOUCHMODE_FULLSCREEN or TOUCHMODE_MARGIN or TOUCHMODE_NONE.");
+		}
+		mViewBehind.setTouchMode(i);
+	}
+
+	/**
+	 * Sets the shadow drawable.
+	 *
+	 * @param resId the resource ID of the new shadow drawable
+	 */
+	public void setShadowDrawable(int resId) {
+		setShadowDrawable(getContext().getResources().getDrawable(resId));
+	}
+
+	/**
+	 * Sets the shadow drawable.
+	 *
+	 * @param d the new shadow drawable
+	 */
+	public void setShadowDrawable(Drawable d) {
+		mViewBehind.setShadowDrawable(d);
+	}
+
+	/**
+	 * Sets the secondary (right) shadow drawable.
+	 *
+	 * @param resId the resource ID of the new shadow drawable
+	 */
+	public void setSecondaryShadowDrawable(int resId) {
+		setSecondaryShadowDrawable(getContext().getResources().getDrawable(resId));
+	}
+
+	/**
+	 * Sets the secondary (right) shadow drawable.
+	 *
+	 * @param d the new shadow drawable
+	 */
+	public void setSecondaryShadowDrawable(Drawable d) {
+		mViewBehind.setSecondaryShadowDrawable(d);
+	}
+
+	/**
+	 * Sets the shadow width.
+	 *
+	 * @param resId The dimension resource id to be set as the shadow width.
+	 */
+	public void setShadowWidthRes(int resId) {
+		setShadowWidth((int)getResources().getDimension(resId));
+	}
+
+	/**
+	 * Sets the shadow width.
+	 *
+	 * @param pixels the new shadow width, in pixels
+	 */
+	public void setShadowWidth(int pixels) {
+		mViewBehind.setShadowWidth(pixels);
+	}
+
+	/**
+	 * Enables or disables the SlidingMenu's fade in and out
+	 *
+	 * @param b true to enable fade, false to disable it
+	 */
+	public void setFadeEnabled(boolean b) {
+		mViewBehind.setFadeEnabled(b);
+	}
+
+	/**
+	 * Sets how much the SlidingMenu fades in and out. Fade must be enabled, see
+	 * {@link #setFadeEnabled(boolean) setFadeEnabled(boolean)}
+	 *
+	 * @param f the new fade degree, between 0.0f and 1.0f
+	 */
+	public void setFadeDegree(float f) {
+		mViewBehind.setFadeDegree(f);
+	}
+
+	/**
+	 * Enables or disables whether the selector is drawn
+	 *
+	 * @param b true to draw the selector, false to not draw the selector
+	 */
+	public void setSelectorEnabled(boolean b) {
+		mViewBehind.setSelectorEnabled(true);
+	}
+
+	/**
+	 * Sets the selected view. The selector will be drawn here
+	 *
+	 * @param v the new selected view
+	 */
+	public void setSelectedView(View v) {
+		mViewBehind.setSelectedView(v);
+	}
+
+	/**
+	 * Sets the selector drawable.
+	 *
+	 * @param res a resource ID for the selector drawable
+	 */
+	public void setSelectorDrawable(int res) {
+		mViewBehind.setSelectorBitmap(BitmapFactory.decodeResource(getResources(), res));
+	}
+
+	/**
+	 * Sets the selector drawable.
+	 *
+	 * @param b the new selector bitmap
+	 */
+	public void setSelectorBitmap(Bitmap b) {
+		mViewBehind.setSelectorBitmap(b);
+	}
+
+	/**
+	 * Add a View ignored by the Touch Down event when mode is Fullscreen
+	 *
+	 * @param v a view to be ignored
+	 */
+	public void addIgnoredView(View v) {
+		mViewAbove.addIgnoredView(v);
+	}
+
+	/**
+	 * Remove a View ignored by the Touch Down event when mode is Fullscreen
+	 *
+	 * @param v a view not wanted to be ignored anymore
+	 */
+	public void removeIgnoredView(View v) {
+		mViewAbove.removeIgnoredView(v);
+	}
+
+	/**
+	 * Clear the list of Views ignored by the Touch Down event when mode is Fullscreen
+	 */
+	public void clearIgnoredViews() {
+		mViewAbove.clearIgnoredViews();
+	}
+
+	/**
+	 * Sets the OnOpenListener. {@link OnOpenListener#onOpen() OnOpenListener.onOpen()} will be called when the SlidingMenu is opened
+	 *
+	 * @param listener the new OnOpenListener
+	 */
+	public void setOnOpenListener(OnOpenListener listener) {
+		//mViewAbove.setOnOpenListener(listener);
+		mOpenListener = listener;
+	}
+
+	
+	/**
+	 * Sets the OnOpenListner for secondary menu  {@link OnOpenListener#onOpen() OnOpenListener.onOpen()} will be called when the secondary SlidingMenu is opened
+	 * 
+	 * @param listener the new OnOpenListener
+	 */
+	
+	public void setSecondaryOnOpenListner(OnOpenListener listener) {
+		mSecondaryOpenListner = listener;
+	}
+	
+	/**
+	 * Sets the OnCloseListener. {@link OnCloseListener#onClose() OnCloseListener.onClose()} will be called when any one of the SlidingMenu is closed
+	 *
+	 * @param listener the new setOnCloseListener
+	 */
+	public void setOnCloseListener(OnCloseListener listener) {
+		//mViewAbove.setOnCloseListener(listener);
+		mCloseListener = listener;
+	}
+
+	/**
+	 * Sets the OnOpenedListener. {@link OnOpenedListener#onOpened() OnOpenedListener.onOpened()} will be called after the SlidingMenu is opened
+	 *
+	 * @param listener the new OnOpenedListener
+	 */
+	public void setOnOpenedListener(OnOpenedListener listener) {
+		mViewAbove.setOnOpenedListener(listener);
+	}
+
+	/**
+	 * Sets the OnClosedListener. {@link OnClosedListener#onClosed() OnClosedListener.onClosed()} will be called after the SlidingMenu is closed
+	 *
+	 * @param listener the new OnClosedListener
+	 */
+	public void setOnClosedListener(OnClosedListener listener) {
+		mViewAbove.setOnClosedListener(listener);
+	}
+
+	public static class SavedState extends BaseSavedState {
+
+		private final int mItem;
+
+		public SavedState(Parcelable superState, int item) {
+			super(superState);
+			mItem = item;
+		}
+
+		private SavedState(Parcel in) {
+			super(in);
+			mItem = in.readInt();
+		}
+
+		public int getItem() {
+			return mItem;
+		}
+
+		/* (non-Javadoc)
+		 * @see android.view.AbsSavedState#writeToParcel(android.os.Parcel, int)
+		 */
+		public void writeToParcel(Parcel out, int flags) {
+			super.writeToParcel(out, flags);
+			out.writeInt(mItem);
+		}
+
+		public static final Parcelable.Creator<SavedState> CREATOR =
+				new Parcelable.Creator<SavedState>() {
+			public SavedState createFromParcel(Parcel in) {
+				return new SavedState(in);
+			}
+
+			public SavedState[] newArray(int size) {
+				return new SavedState[size];
+			}
+		};
+
+	}
+
+	/* (non-Javadoc)
+	 * @see android.view.View#onSaveInstanceState()
+	 */
+	@Override
+	protected Parcelable onSaveInstanceState() {
+		Parcelable superState = super.onSaveInstanceState();
+		SavedState ss = new SavedState(superState, mViewAbove.getCurrentItem());
+		return ss;
+	}
+
+	/* (non-Javadoc)
+	 * @see android.view.View#onRestoreInstanceState(android.os.Parcelable)
+	 */
+	@Override
+	protected void onRestoreInstanceState(Parcelable state) {
+		SavedState ss = (SavedState)state;
+		super.onRestoreInstanceState(ss.getSuperState());
+		mViewAbove.setCurrentItem(ss.getItem());
+	}
+
+	/* (non-Javadoc)
+	 * @see android.view.ViewGroup#fitSystemWindows(android.graphics.Rect)
+	 */
+	@SuppressLint("NewApi")
+	@Override
+	protected boolean fitSystemWindows(Rect insets) {
+		int leftPadding = insets.left;
+		int rightPadding = insets.right;
+		int topPadding = insets.top;
+		int bottomPadding = insets.bottom;
+		if (!mActionbarOverlay) {
+			Log.v(TAG, "setting padding!");
+			setPadding(leftPadding, topPadding, rightPadding, bottomPadding);
+		}
+		return true;
+	}
+
+	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
+	public void manageLayers(float percentOpen) {
+		if (Build.VERSION.SDK_INT < 11) return;
+
+		boolean layer = percentOpen > 0.0f && percentOpen < 1.0f;
+		final int layerType = layer ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_NONE;
+
+		if (layerType != getContent().getLayerType()) {
+			getHandler().post(new Runnable() {
+				public void run() {
+					Log.v(TAG, "changing layerType. hardware? " + (layerType == View.LAYER_TYPE_HARDWARE));
+					getContent().setLayerType(layerType, null);
+					getMenu().setLayerType(layerType, null);
+					if (getSecondaryMenu() != null) {
+						getSecondaryMenu().setLayerType(layerType, null);
+					}
+				}
+			});
+		}
+	}
+
+}
Index: SlidingMeunlibrary/build/intermediates/bundles/debug/aapt/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/debug/aapt/AndroidManifest.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/debug/aapt/AndroidManifest.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jeremyfeinstein.slidingmenu.lib"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="15"
+        android:targetSdkVersion="25" />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-ru/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-ru/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-ru/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Потяните для обновления…</string>
+  <string name="pull_to_refresh_release_label">Отпустите для обновления…</string>
+  <string name="pull_to_refresh_refreshing_label">Загрузка…</string>
+</resources>
Index: app/src/main/res/layout/fragment_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_main.xml	(revision )
+++ app/src/main/res/layout/fragment_main.xml	(revision )
@@ -0,0 +1,37 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin" >
+
+    <TextView
+        android:id="@+id/tv_context"
+        android:layout_width="wrap_content"
+        android:text="1111111111"
+        android:textColor="@android:color/black"
+        android:layout_height="wrap_content" />
+
+    <Button
+        android:text="开始拍照"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/tv_context"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:id="@+id/btn_photo" />
+
+    <ImageView
+        android:layout_width="200dp"
+        android:layout_height="200dp"
+        app:srcCompat="@mipmap/ic_launcher"
+        android:layout_below="@+id/btn_photo"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:id="@+id/iv_photo" />
+
+
+</RelativeLayout>
Index: app/src/main/res/drawable/point_bg_enable.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/point_bg_enable.xml	(revision )
+++ app/src/main/res/drawable/point_bg_enable.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval" >
+ 
+    <corners android:radius="2dp" />
+ 
+    <solid android:color="#55000000" />
+ 
+</shape>
\ No newline at end of file
Index: SlidingMeunlibrary/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/res/values/attrs.xml	(revision )
+++ SlidingMeunlibrary/res/values/attrs.xml	(revision )
@@ -0,0 +1,47 @@
+<!--
+  Copyright 2011 The Android Open Source Project
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+
+<resources>
+
+    <declare-styleable name="SlidingMenu">
+        <attr name="mode">
+            <enum name="left" value="0" />
+            <enum name="right" value="1" />
+        </attr>
+        <attr name="viewAbove" format="reference" />
+        <attr name="viewBehind" format="reference" />
+        <attr name="behindOffset" format="dimension" />
+        <attr name="behindWidth" format="dimension" />
+        <attr name="behindScrollScale" format="float" />
+        <attr name="touchModeAbove">
+            <enum name="margin" value="0" />
+            <enum name="fullscreen" value="1" />
+            <enum name="none" value="2" />
+        </attr>
+        <attr name="touchModeBehind">
+            <enum name="margin" value="0" />
+            <enum name="fullscreen" value="1" />
+            <enum name="none" value="2" />
+        </attr>
+        <attr name="shadowDrawable" format="reference" />
+        <attr name="shadowWidth" format="dimension" />
+        <attr name="fadeEnabled" format="boolean" />
+        <attr name="fadeDegree" format="float" />
+        <attr name="selectorEnabled" format="boolean" />
+        <attr name="selectorDrawable" format="reference" />
+    </declare-styleable>
+
+</resources>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/res/values/strings.xml	(revision )
+++ ultrapulltorefreshlibrary/src/main/res/values/strings.xml	(revision )
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">UltraPullToRefreshLibrary</string>
+</resources>
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/ILoadingLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/ILoadingLayout.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/ILoadingLayout.java	(revision )
@@ -0,0 +1,57 @@
+package com.handmark.pulltorefresh.library;
+
+import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
+
+public interface ILoadingLayout {
+
+	/**
+	 * Set the Last Updated Text. This displayed under the main label when
+	 * Pulling
+	 * 
+	 * @param label - Label to set
+	 */
+	public void setLastUpdatedLabel(CharSequence label);
+
+	/**
+	 * Set the drawable used in the loading layout. This is the same as calling
+	 * <code>setLoadingDrawable(drawable, Mode.BOTH)</code>
+	 * 
+	 * @param drawable - Drawable to display
+	 */
+	public void setLoadingDrawable(Drawable drawable);
+
+	/**
+	 * Set Text to show when the Widget is being Pulled
+	 * <code>setPullLabel(releaseLabel, Mode.BOTH)</code>
+	 * 
+	 * @param pullLabel - CharSequence to display
+	 */
+	public void setPullLabel(CharSequence pullLabel);
+
+	/**
+	 * Set Text to show when the Widget is refreshing
+	 * <code>setRefreshingLabel(releaseLabel, Mode.BOTH)</code>
+	 * 
+	 * @param refreshingLabel - CharSequence to display
+	 */
+	public void setRefreshingLabel(CharSequence refreshingLabel);
+
+	/**
+	 * Set Text to show when the Widget is being pulled, and will refresh when
+	 * released. This is the same as calling
+	 * <code>setReleaseLabel(releaseLabel, Mode.BOTH)</code>
+	 * 
+	 * @param releaseLabel - CharSequence to display
+	 */
+	public void setReleaseLabel(CharSequence releaseLabel);
+
+	/**
+	 * Set's the Sets the typeface and style in which the text should be
+	 * displayed. Please see
+	 * {@link android.widget.TextView#setTypeface(Typeface)
+	 * TextView#setTypeface(Typeface)}.
+	 */
+	public void setTextTypeface(Typeface tf);
+
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_in_from_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_in_from_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_in_from_top.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="-100%p"
+    android:toYDelta="0" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_in_from_top.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_top.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/tmp/packageDebugJar/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/tmp/packageDebugJar/MANIFEST.MF	(revision )
+++ PullToRefreshLibrary/build/tmp/packageDebugJar/MANIFEST.MF	(revision )
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
Index: SlidingMeunlibrary/build/intermediates/bundles/release/res/layout/slidingmenumain.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/release/res/layout/slidingmenumain.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/release/res/layout/slidingmenumain.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.jeremyfeinstein.slidingmenu.lib.SlidingMenu xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/slidingmenumain"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" /><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/SlidingMeunlibrary/res/layout/slidingmenumain.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values/attrs.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values/attrs.xml	(revision )
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <declare-styleable name="PullToRefresh">
+
+        <!-- A drawable to use as the background of the Refreshable View -->
+        <attr name="ptrRefreshableViewBackground" format="reference|color" />
+
+        <!-- A drawable to use as the background of the Header and Footer Loading Views -->
+        <attr name="ptrHeaderBackground" format="reference|color" />
+
+        <!-- Text Color of the Header and Footer Loading Views -->
+        <attr name="ptrHeaderTextColor" format="reference|color" />
+
+        <!-- Text Color of the Header and Footer Loading Views Sub Header -->
+        <attr name="ptrHeaderSubTextColor" format="reference|color" />
+
+        <!-- Mode of Pull-to-Refresh that should be used -->
+        <attr name="ptrMode">
+            <flag name="disabled" value="0x0" />
+            <flag name="pullFromStart" value="0x1" />
+            <flag name="pullFromEnd" value="0x2" />
+            <flag name="both" value="0x3" />
+            <flag name="manualOnly" value="0x4" />
+
+            <!-- These last two are depreacted -->
+            <flag name="pullDownFromTop" value="0x1" />
+            <flag name="pullUpFromBottom" value="0x2" />
+        </attr>
+
+        <!-- Whether the Indicator overlay(s) should be used -->
+        <attr name="ptrShowIndicator" format="reference|boolean" />
+
+        <!-- Drawable to use as Loading Indicator. Changes both Header and Footer. -->
+        <attr name="ptrDrawable" format="reference" />
+
+        <!-- Drawable to use as Loading Indicator in the Header View. Overrides value set in ptrDrawable. -->
+        <attr name="ptrDrawableStart" format="reference" />
+
+        <!-- Drawable to use as Loading Indicator in the Footer View. Overrides value set in ptrDrawable. -->
+        <attr name="ptrDrawableEnd" format="reference" />
+
+        <!-- Whether Android's built-in Over Scroll should be utilised for Pull-to-Refresh. -->
+        <attr name="ptrOverScroll" format="reference|boolean" />
+
+        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views -->
+        <attr name="ptrHeaderTextAppearance" format="reference" />
+
+        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views Sub Header -->
+        <attr name="ptrSubHeaderTextAppearance" format="reference" />
+
+        <!-- Style of Animation should be used displayed when pulling. -->
+        <attr name="ptrAnimationStyle">
+            <flag name="rotate" value="0x0" />
+            <flag name="flip" value="0x1" />
+        </attr>
+
+        <!-- Whether the user can scroll while the View is Refreshing -->
+        <attr name="ptrScrollingWhileRefreshingEnabled" format="reference|boolean" />
+
+        <!--
+        	Whether PullToRefreshListView has it's extras enabled. This allows the user to be 
+        	able to scroll while refreshing, and behaves better. It acheives this by adding
+        	Header and/or Footer Views to the ListView.
+        -->
+        <attr name="ptrListViewExtrasEnabled" format="reference|boolean" />
+
+        <!--
+        	Whether the Drawable should be continually rotated as you pull. This only
+        	takes effect when using the 'Rotate' Animation Style.
+        -->
+        <attr name="ptrRotateDrawableWhilePulling" format="reference|boolean" />
+
+        <!-- BELOW HERE ARE DEPRECEATED. DO NOT USE. -->
+        <attr name="ptrAdapterViewBackground" format="reference|color" />
+        <attr name="ptrDrawableTop" format="reference" />
+        <attr name="ptrDrawableBottom" format="reference" />
+    </declare-styleable>
+
+</resources>
\ No newline at end of file
Index: app/src/main/java/zhu/com/sortingdata/fragment/BaseFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/fragment/BaseFragment.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/fragment/BaseFragment.java	(revision )
@@ -0,0 +1,13 @@
+package zhu.com.sortingdata.fragment;
+
+import android.content.Intent;
+import android.support.v4.app.Fragment;
+
+public class BaseFragment extends Fragment {
+
+    public void skipActivity(Class clszz){
+        Intent intent = new Intent();
+        intent.setClass(getActivity() , clszz);
+        startActivity(intent);
+    }
+}
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/IPullToRefresh.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/IPullToRefresh.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/IPullToRefresh.java	(revision )
@@ -0,0 +1,246 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.view.View;
+import android.view.animation.Interpolator;
+
+import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.OnPullEventListener;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.State;
+
+public interface IPullToRefresh<T extends View> {
+
+	/**
+	 * Demos the Pull-to-Refresh functionality to the user so that they are
+	 * aware it is there. This could be useful when the user first opens your
+	 * app, etc. The animation will only happen if the Refresh View (ListView,
+	 * ScrollView, etc) is in a state where a Pull-to-Refresh could occur by a
+	 * user's touch gesture (i.e. scrolled to the top/bottom).
+	 * 
+	 * @return true - if the Demo has been started, false if not.
+	 */
+	public boolean demo();
+
+	/**
+	 * Get the mode that this view is currently in. This is only really useful
+	 * when using <code>Mode.BOTH</code>.
+	 * 
+	 * @return Mode that the view is currently in
+	 */
+	public Mode getCurrentMode();
+
+	/**
+	 * Returns whether the Touch Events are filtered or not. If true is
+	 * returned, then the View will only use touch events where the difference
+	 * in the Y-axis is greater than the difference in the X-axis. This means
+	 * that the View will not interfere when it is used in a horizontal
+	 * scrolling View (such as a ViewPager).
+	 * 
+	 * @return boolean - true if the View is filtering Touch Events
+	 */
+	public boolean getFilterTouchEvents();
+
+	/**
+	 * Returns a proxy object which allows you to call methods on all of the
+	 * LoadingLayouts (the Views which show when Pulling/Refreshing).
+	 * <p />
+	 * You should not keep the result of this method any longer than you need
+	 * it.
+	 * 
+	 * @return Object which will proxy any calls you make on it, to all of the
+	 *         LoadingLayouts.
+	 */
+	public ILoadingLayout getLoadingLayoutProxy();
+
+	/**
+	 * Returns a proxy object which allows you to call methods on the
+	 * LoadingLayouts (the Views which show when Pulling/Refreshing). The actual
+	 * LoadingLayout(s) which will be affected, are chosen by the parameters you
+	 * give.
+	 * <p />
+	 * You should not keep the result of this method any longer than you need
+	 * it.
+	 * 
+	 * @param includeStart - Whether to include the Start/Header Views
+	 * @param includeEnd - Whether to include the End/Footer Views
+	 * @return Object which will proxy any calls you make on it, to the
+	 *         LoadingLayouts included.
+	 */
+	public ILoadingLayout getLoadingLayoutProxy(boolean includeStart, boolean includeEnd);
+
+	/**
+	 * Get the mode that this view has been set to. If this returns
+	 * <code>Mode.BOTH</code>, you can use <code>getCurrentMode()</code> to
+	 * check which mode the view is currently in
+	 * 
+	 * @return Mode that the view has been set to
+	 */
+	public Mode getMode();
+
+	/**
+	 * Get the Wrapped Refreshable View. Anything returned here has already been
+	 * added to the content view.
+	 * 
+	 * @return The View which is currently wrapped
+	 */
+	public T getRefreshableView();
+
+	/**
+	 * Get whether the 'Refreshing' View should be automatically shown when
+	 * refreshing. Returns true by default.
+	 * 
+	 * @return - true if the Refreshing View will be show
+	 */
+	public boolean getShowViewWhileRefreshing();
+
+	/**
+	 * @return - The state that the View is currently in.
+	 */
+	public State getState();
+
+	/**
+	 * Whether Pull-to-Refresh is enabled
+	 * 
+	 * @return enabled
+	 */
+	public boolean isPullToRefreshEnabled();
+
+	/**
+	 * Gets whether Overscroll support is enabled. This is different to
+	 * Android's standard Overscroll support (the edge-glow) which is available
+	 * from GINGERBREAD onwards
+	 * 
+	 * @return true - if both PullToRefresh-OverScroll and Android's inbuilt
+	 *         OverScroll are enabled
+	 */
+	public boolean isPullToRefreshOverScrollEnabled();
+
+	/**
+	 * Returns whether the Widget is currently in the Refreshing mState
+	 * 
+	 * @return true if the Widget is currently refreshing
+	 */
+	public boolean isRefreshing();
+
+	/**
+	 * Returns whether the widget has enabled scrolling on the Refreshable View
+	 * while refreshing.
+	 * 
+	 * @return true if the widget has enabled scrolling while refreshing
+	 */
+	public boolean isScrollingWhileRefreshingEnabled();
+
+	/**
+	 * Mark the current Refresh as complete. Will Reset the UI and hide the
+	 * Refreshing View
+	 */
+	public void onRefreshComplete();
+
+	/**
+	 * Set the Touch Events to be filtered or not. If set to true, then the View
+	 * will only use touch events where the difference in the Y-axis is greater
+	 * than the difference in the X-axis. This means that the View will not
+	 * interfere when it is used in a horizontal scrolling View (such as a
+	 * ViewPager), but will restrict which types of finger scrolls will trigger
+	 * the View.
+	 * 
+	 * @param filterEvents - true if you want to filter Touch Events. Default is
+	 *            true.
+	 */
+	public void setFilterTouchEvents(boolean filterEvents);
+
+	/**
+	 * Set the mode of Pull-to-Refresh that this view will use.
+	 * 
+	 * @param mode - Mode to set the View to
+	 */
+	public void setMode(Mode mode);
+
+	/**
+	 * Set OnPullEventListener for the Widget
+	 * 
+	 * @param listener - Listener to be used when the Widget has a pull event to
+	 *            propogate.
+	 */
+	public void setOnPullEventListener(OnPullEventListener<T> listener);
+
+	/**
+	 * Set OnRefreshListener for the Widget
+	 * 
+	 * @param listener - Listener to be used when the Widget is set to Refresh
+	 */
+	public void setOnRefreshListener(OnRefreshListener<T> listener);
+
+	/**
+	 * Set OnRefreshListener for the Widget
+	 * 
+	 * @param listener - Listener to be used when the Widget is set to Refresh
+	 */
+	public void setOnRefreshListener(OnRefreshListener2<T> listener);
+
+	/**
+	 * Sets whether Overscroll support is enabled. This is different to
+	 * Android's standard Overscroll support (the edge-glow). This setting only
+	 * takes effect when running on device with Android v2.3 or greater.
+	 * 
+	 * @param enabled - true if you want Overscroll enabled
+	 */
+	public void setPullToRefreshOverScrollEnabled(boolean enabled);
+
+	/**
+	 * Sets the Widget to be in the refresh state. The UI will be updated to
+	 * show the 'Refreshing' view, and be scrolled to show such.
+	 */
+	public void setRefreshing();
+
+	/**
+	 * Sets the Widget to be in the refresh state. The UI will be updated to
+	 * show the 'Refreshing' view.
+	 * 
+	 * @param doScroll - true if you want to force a scroll to the Refreshing
+	 *            view.
+	 */
+	public void setRefreshing(boolean doScroll);
+
+	/**
+	 * Sets the Animation Interpolator that is used for animated scrolling.
+	 * Defaults to a DecelerateInterpolator
+	 * 
+	 * @param interpolator - Interpolator to use
+	 */
+	public void setScrollAnimationInterpolator(Interpolator interpolator);
+
+	/**
+	 * By default the Widget disables scrolling on the Refreshable View while
+	 * refreshing. This method can change this behaviour.
+	 * 
+	 * @param scrollingWhileRefreshingEnabled - true if you want to enable
+	 *            scrolling while refreshing
+	 */
+	public void setScrollingWhileRefreshingEnabled(boolean scrollingWhileRefreshingEnabled);
+
+	/**
+	 * A mutator to enable/disable whether the 'Refreshing' View should be
+	 * automatically shown when refreshing.
+	 * 
+	 * @param showView
+	 */
+	public void setShowViewWhileRefreshing(boolean showView);
+
+}
\ No newline at end of file
Index: PullToRefreshLibrary/build/generated/source/r/androidTest/debug/com/handmark/pulltorefresh/library/test/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/generated/source/r/androidTest/debug/com/handmark/pulltorefresh/library/test/R.java	(revision )
+++ PullToRefreshLibrary/build/generated/source/r/androidTest/debug/com/handmark/pulltorefresh/library/test/R.java	(revision )
@@ -0,0 +1,453 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+
+package com.handmark.pulltorefresh.library.test;
+
+public final class R {
+    public static final class anim {
+        public static final int slide_in_from_bottom=0x7f040000;
+        public static final int slide_in_from_top=0x7f040001;
+        public static final int slide_out_to_bottom=0x7f040002;
+        public static final int slide_out_to_top=0x7f040003;
+    }
+    public static final class attr {
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static final int ptrAdapterViewBackground=0x7f010010;
+        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>rotate</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>flip</code></td><td>0x1</td><td></td></tr>
+</table>
+         */
+        public static final int ptrAnimationStyle=0x7f01000c;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int ptrDrawable=0x7f010006;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int ptrDrawableBottom=0x7f010012;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int ptrDrawableEnd=0x7f010008;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int ptrDrawableStart=0x7f010007;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int ptrDrawableTop=0x7f010011;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static final int ptrHeaderBackground=0x7f010001;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static final int ptrHeaderSubTextColor=0x7f010003;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int ptrHeaderTextAppearance=0x7f01000a;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static final int ptrHeaderTextColor=0x7f010002;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static final int ptrListViewExtrasEnabled=0x7f01000e;
+        /** <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>disabled</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>pullFromStart</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullFromEnd</code></td><td>0x2</td><td></td></tr>
+<tr><td><code>both</code></td><td>0x3</td><td></td></tr>
+<tr><td><code>manualOnly</code></td><td>0x4</td><td></td></tr>
+<tr><td><code>pullDownFromTop</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullUpFromBottom</code></td><td>0x2</td><td></td></tr>
+</table>
+         */
+        public static final int ptrMode=0x7f010004;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static final int ptrOverScroll=0x7f010009;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+         */
+        public static final int ptrRefreshableViewBackground=0x7f010000;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static final int ptrRotateDrawableWhilePulling=0x7f01000f;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static final int ptrScrollingWhileRefreshingEnabled=0x7f01000d;
+        /** <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+         */
+        public static final int ptrShowIndicator=0x7f010005;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int ptrSubHeaderTextAppearance=0x7f01000b;
+    }
+    public static final class dimen {
+        public static final int header_footer_left_right_padding=0x7f060000;
+        public static final int header_footer_top_bottom_padding=0x7f060001;
+        public static final int indicator_corner_radius=0x7f060002;
+        public static final int indicator_internal_padding=0x7f060003;
+        public static final int indicator_right_padding=0x7f060004;
+    }
+    public static final class drawable {
+        public static final int default_ptr_flip=0x7f020000;
+        public static final int default_ptr_rotate=0x7f020001;
+        public static final int indicator_arrow=0x7f020002;
+        public static final int indicator_bg_bottom=0x7f020003;
+        public static final int indicator_bg_top=0x7f020004;
+    }
+    public static final class id {
+        public static final int both=0x7f070003;
+        public static final int disabled=0x7f070004;
+        public static final int fl_inner=0x7f07000c;
+        public static final int flip=0x7f07000a;
+        public static final int gridview=0x7f070000;
+        public static final int manualOnly=0x7f070005;
+        public static final int pullDownFromTop=0x7f070006;
+        public static final int pullFromEnd=0x7f070007;
+        public static final int pullFromStart=0x7f070008;
+        public static final int pullUpFromBottom=0x7f070009;
+        public static final int pull_to_refresh_image=0x7f07000d;
+        public static final int pull_to_refresh_progress=0x7f07000e;
+        public static final int pull_to_refresh_sub_text=0x7f070010;
+        public static final int pull_to_refresh_text=0x7f07000f;
+        public static final int rotate=0x7f07000b;
+        public static final int scrollview=0x7f070001;
+        public static final int webview=0x7f070002;
+    }
+    public static final class layout {
+        public static final int pull_to_refresh_header_horizontal=0x7f030000;
+        public static final int pull_to_refresh_header_vertical=0x7f030001;
+    }
+    public static final class string {
+        public static final int pull_to_refresh_from_bottom_pull_label=0x7f050003;
+        public static final int pull_to_refresh_from_bottom_refreshing_label=0x7f050004;
+        public static final int pull_to_refresh_from_bottom_release_label=0x7f050005;
+        public static final int pull_to_refresh_pull_label=0x7f050000;
+        public static final int pull_to_refresh_refreshing_label=0x7f050001;
+        public static final int pull_to_refresh_release_label=0x7f050002;
+    }
+    public static final class styleable {
+        /** Attributes that can be used with a PullToRefresh.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrAdapterViewBackground com.handmark.pulltorefresh.library.test:ptrAdapterViewBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrAnimationStyle com.handmark.pulltorefresh.library.test:ptrAnimationStyle}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawable com.handmark.pulltorefresh.library.test:ptrDrawable}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableBottom com.handmark.pulltorefresh.library.test:ptrDrawableBottom}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableEnd com.handmark.pulltorefresh.library.test:ptrDrawableEnd}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableStart com.handmark.pulltorefresh.library.test:ptrDrawableStart}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrDrawableTop com.handmark.pulltorefresh.library.test:ptrDrawableTop}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderBackground com.handmark.pulltorefresh.library.test:ptrHeaderBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderSubTextColor com.handmark.pulltorefresh.library.test:ptrHeaderSubTextColor}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderTextAppearance com.handmark.pulltorefresh.library.test:ptrHeaderTextAppearance}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrHeaderTextColor com.handmark.pulltorefresh.library.test:ptrHeaderTextColor}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrListViewExtrasEnabled com.handmark.pulltorefresh.library.test:ptrListViewExtrasEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrMode com.handmark.pulltorefresh.library.test:ptrMode}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrOverScroll com.handmark.pulltorefresh.library.test:ptrOverScroll}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrRefreshableViewBackground com.handmark.pulltorefresh.library.test:ptrRefreshableViewBackground}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrRotateDrawableWhilePulling com.handmark.pulltorefresh.library.test:ptrRotateDrawableWhilePulling}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrScrollingWhileRefreshingEnabled com.handmark.pulltorefresh.library.test:ptrScrollingWhileRefreshingEnabled}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrShowIndicator com.handmark.pulltorefresh.library.test:ptrShowIndicator}</code></td><td></td></tr>
+           <tr><td><code>{@link #PullToRefresh_ptrSubHeaderTextAppearance com.handmark.pulltorefresh.library.test:ptrSubHeaderTextAppearance}</code></td><td></td></tr>
+           </table>
+           @see #PullToRefresh_ptrAdapterViewBackground
+           @see #PullToRefresh_ptrAnimationStyle
+           @see #PullToRefresh_ptrDrawable
+           @see #PullToRefresh_ptrDrawableBottom
+           @see #PullToRefresh_ptrDrawableEnd
+           @see #PullToRefresh_ptrDrawableStart
+           @see #PullToRefresh_ptrDrawableTop
+           @see #PullToRefresh_ptrHeaderBackground
+           @see #PullToRefresh_ptrHeaderSubTextColor
+           @see #PullToRefresh_ptrHeaderTextAppearance
+           @see #PullToRefresh_ptrHeaderTextColor
+           @see #PullToRefresh_ptrListViewExtrasEnabled
+           @see #PullToRefresh_ptrMode
+           @see #PullToRefresh_ptrOverScroll
+           @see #PullToRefresh_ptrRefreshableViewBackground
+           @see #PullToRefresh_ptrRotateDrawableWhilePulling
+           @see #PullToRefresh_ptrScrollingWhileRefreshingEnabled
+           @see #PullToRefresh_ptrShowIndicator
+           @see #PullToRefresh_ptrSubHeaderTextAppearance
+         */
+        public static final int[] PullToRefresh = {
+            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
+            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
+            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
+            0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f,
+            0x7f010010, 0x7f010011, 0x7f010012
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrAdapterViewBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrAdapterViewBackground
+        */
+        public static final int PullToRefresh_ptrAdapterViewBackground = 16;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrAnimationStyle}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>rotate</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>flip</code></td><td>0x1</td><td></td></tr>
+</table>
+          @attr name com.handmark.pulltorefresh.library.test:ptrAnimationStyle
+        */
+        public static final int PullToRefresh_ptrAnimationStyle = 12;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrDrawable}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrDrawable
+        */
+        public static final int PullToRefresh_ptrDrawable = 6;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrDrawableBottom}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrDrawableBottom
+        */
+        public static final int PullToRefresh_ptrDrawableBottom = 18;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrDrawableEnd}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrDrawableEnd
+        */
+        public static final int PullToRefresh_ptrDrawableEnd = 8;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrDrawableStart}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrDrawableStart
+        */
+        public static final int PullToRefresh_ptrDrawableStart = 7;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrDrawableTop}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrDrawableTop
+        */
+        public static final int PullToRefresh_ptrDrawableTop = 17;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrHeaderBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrHeaderBackground
+        */
+        public static final int PullToRefresh_ptrHeaderBackground = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrHeaderSubTextColor}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrHeaderSubTextColor
+        */
+        public static final int PullToRefresh_ptrHeaderSubTextColor = 3;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrHeaderTextAppearance}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrHeaderTextAppearance
+        */
+        public static final int PullToRefresh_ptrHeaderTextAppearance = 10;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrHeaderTextColor}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrHeaderTextColor
+        */
+        public static final int PullToRefresh_ptrHeaderTextColor = 2;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrListViewExtrasEnabled}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrListViewExtrasEnabled
+        */
+        public static final int PullToRefresh_ptrListViewExtrasEnabled = 14;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrMode}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be one or more (separated by '|') of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>disabled</code></td><td>0x0</td><td></td></tr>
+<tr><td><code>pullFromStart</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullFromEnd</code></td><td>0x2</td><td></td></tr>
+<tr><td><code>both</code></td><td>0x3</td><td></td></tr>
+<tr><td><code>manualOnly</code></td><td>0x4</td><td></td></tr>
+<tr><td><code>pullDownFromTop</code></td><td>0x1</td><td></td></tr>
+<tr><td><code>pullUpFromBottom</code></td><td>0x2</td><td></td></tr>
+</table>
+          @attr name com.handmark.pulltorefresh.library.test:ptrMode
+        */
+        public static final int PullToRefresh_ptrMode = 4;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrOverScroll}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrOverScroll
+        */
+        public static final int PullToRefresh_ptrOverScroll = 9;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrRefreshableViewBackground}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
+"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrRefreshableViewBackground
+        */
+        public static final int PullToRefresh_ptrRefreshableViewBackground = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrRotateDrawableWhilePulling}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrRotateDrawableWhilePulling
+        */
+        public static final int PullToRefresh_ptrRotateDrawableWhilePulling = 15;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrScrollingWhileRefreshingEnabled}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrScrollingWhileRefreshingEnabled
+        */
+        public static final int PullToRefresh_ptrScrollingWhileRefreshingEnabled = 13;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrShowIndicator}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+<p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrShowIndicator
+        */
+        public static final int PullToRefresh_ptrShowIndicator = 5;
+        /**
+          <p>This symbol is the offset where the {@link com.handmark.pulltorefresh.library.test.R.attr#ptrSubHeaderTextAppearance}
+          attribute's value can be found in the {@link #PullToRefresh} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name com.handmark.pulltorefresh.library.test:ptrSubHeaderTextAppearance
+        */
+        public static final int PullToRefresh_ptrSubHeaderTextAppearance = 11;
+    };
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_in_from_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_in_from_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/anim/slide_in_from_bottom.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="100%p"
+    android:toYDelta="0" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_in_from_bottom.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/anim/slide_in_from_bottom.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build.gradle	(revision )
+++ PullToRefreshLibrary/build.gradle	(revision )
@@ -0,0 +1,18 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 20
+    buildToolsVersion '25.0.0'
+
+    defaultConfig {
+        minSdkVersion 4
+        targetSdkVersion 4
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
+    }
+}
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHouseBarItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHouseBarItem.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHouseBarItem.java	(revision )
@@ -0,0 +1,74 @@
+package in.srain.cube.views.ptr.header;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PointF;
+import android.view.animation.Animation;
+import android.view.animation.Transformation;
+
+import java.util.Random;
+
+/**
+ * Created by srain on 11/6/14.
+ */
+public class StoreHouseBarItem extends Animation {
+
+    public PointF midPoint;
+    public float translationX;
+    public int index;
+
+    private final Paint mPaint = new Paint();
+    private float mFromAlpha = 1.0f;
+    private float mToAlpha = 0.4f;
+    private PointF mCStartPoint;
+    private PointF mCEndPoint;
+
+    public StoreHouseBarItem(int index, PointF start, PointF end, int color, int lineWidth) {
+        this.index = index;
+
+        midPoint = new PointF((start.x + end.x) / 2, (start.y + end.y) / 2);
+
+        mCStartPoint = new PointF(start.x - midPoint.x, start.y - midPoint.y);
+        mCEndPoint = new PointF(end.x - midPoint.x, end.y - midPoint.y);
+
+        setColor(color);
+        setLineWidth(lineWidth);
+        mPaint.setAntiAlias(true);
+        mPaint.setStyle(Paint.Style.STROKE);
+    }
+
+    public void setLineWidth(int width) {
+        mPaint.setStrokeWidth(width);
+    }
+
+    public void setColor(int color) {
+        mPaint.setColor(color);
+    }
+
+    public void resetPosition(int horizontalRandomness) {
+        Random random = new Random();
+        int randomNumber = -random.nextInt(horizontalRandomness) + horizontalRandomness;
+        translationX = randomNumber;
+    }
+
+    @Override
+    protected void applyTransformation(float interpolatedTime, Transformation t) {
+        float alpha = mFromAlpha;
+        alpha = alpha + ((mToAlpha - alpha) * interpolatedTime);
+        setAlpha(alpha);
+    }
+
+    public void start(float fromAlpha, float toAlpha) {
+        mFromAlpha = fromAlpha;
+        mToAlpha = toAlpha;
+        super.start();
+    }
+
+    public void setAlpha(float alpha) {
+        mPaint.setAlpha((int) (alpha * 255));
+    }
+
+    public void draw(Canvas canvas) {
+        canvas.drawLine(mCStartPoint.x, mCStartPoint.y, mCEndPoint.x, mCEndPoint.y, mPaint);
+    }
+}
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/test/java/com/zhu/ultrapulltorefreshlibrary/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/test/java/com/zhu/ultrapulltorefreshlibrary/ExampleUnitTest.java	(revision )
+++ ultrapulltorefreshlibrary/src/test/java/com/zhu/ultrapulltorefreshlibrary/ExampleUnitTest.java	(revision )
@@ -0,0 +1,17 @@
+package com.zhu.ultrapulltorefreshlibrary;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-iw/values-iw.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-iw/values-iw.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-iw/values-iw.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-iw/values-iw.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+    <string name="pull_to_refresh_refreshing_label">טוען…</string>
+    <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+</resources>
\ No newline at end of file
Index: app/src/main/res/drawable/point_bg_normal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/point_bg_normal.xml	(revision )
+++ app/src/main/res/drawable/point_bg_normal.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval" >
+ 
+    <corners android:radius="2dp" />
+ 
+    <solid android:color="#AAFFFFFF" />
+ 
+</shape>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-nl/values-nl.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-nl/values-nl.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-nl/values-nl.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-nl/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Sleep om te vernieuwen…</string>
+    <string name="pull_to_refresh_refreshing_label">Laden…</string>
+    <string name="pull_to_refresh_release_label">Loslaten om te vernieuwen…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/AndroidManifest.xml	(revision )
+++ PullToRefreshLibrary/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.handmark.pulltorefresh.library"
+    android:versionCode="2110"
+    android:versionName="2.1.1" >
+
+    <uses-sdk android:minSdkVersion="4" />
+
+    <application />
+
+</manifest>
\ No newline at end of file
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/colors.xml	(revision )
+++ app/src/main/res/values/colors.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+    <color name="red">#FF0000</color>
+    <color name="white">#FFFFFF</color>
+    <color name="bg_color">#ececec</color>
+    <color name="black">#000000</color>
+    <color name="top_bg">#FF64A750</color>
+</resources>
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/CenterHandleHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/CenterHandleHelper.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/CenterHandleHelper.java	(revision )
@@ -0,0 +1,86 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.cropwindow.handle;
+
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.cropwindow.edge.Edge;
+
+/**
+ * HandleHelper class to handle the center handle.
+ */
+class CenterHandleHelper extends HandleHelper {
+
+    // Constructor /////////////////////////////////////////////////////////////////////////////////
+
+    CenterHandleHelper() {
+        super(null, null);
+    }
+
+    // HandleHelper Methods ////////////////////////////////////////////////////////////////////////
+
+    @Override
+    void updateCropWindow(float x,
+                          float y,
+                          @NonNull RectF imageRect,
+                          float snapRadius) {
+
+        float left = Edge.LEFT.getCoordinate();
+        float top = Edge.TOP.getCoordinate();
+        float right = Edge.RIGHT.getCoordinate();
+        float bottom = Edge.BOTTOM.getCoordinate();
+
+        final float currentCenterX = (left + right) / 2;
+        final float currentCenterY = (top + bottom) / 2;
+
+        final float offsetX = x - currentCenterX;
+        final float offsetY = y - currentCenterY;
+
+        // Adjust the crop window.
+        Edge.LEFT.offset(offsetX);
+        Edge.TOP.offset(offsetY);
+        Edge.RIGHT.offset(offsetX);
+        Edge.BOTTOM.offset(offsetY);
+
+        // Check if we have gone out of bounds on the sides, and fix.
+        if (Edge.LEFT.isOutsideMargin(imageRect, snapRadius)) {
+            final float offset = Edge.LEFT.snapToRect(imageRect);
+            Edge.RIGHT.offset(offset);
+        } else if (Edge.RIGHT.isOutsideMargin(imageRect, snapRadius)) {
+            final float offset = Edge.RIGHT.snapToRect(imageRect);
+            Edge.LEFT.offset(offset);
+        }
+
+        // Check if we have gone out of bounds on the top or bottom, and fix.
+        if (Edge.TOP.isOutsideMargin(imageRect, snapRadius)) {
+            final float offset = Edge.TOP.snapToRect(imageRect);
+            Edge.BOTTOM.offset(offset);
+        } else if (Edge.BOTTOM.isOutsideMargin(imageRect, snapRadius)) {
+            final float offset = Edge.BOTTOM.snapToRect(imageRect);
+            Edge.TOP.offset(offset);
+        }
+    }
+
+    @Override
+    void updateCropWindow(float x,
+                          float y,
+                          float targetAspectRatio,
+                          @NonNull RectF imageRect,
+                          float snapRadius) {
+
+        updateCropWindow(x, y, imageRect, snapRadius);
+    }
+}
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java	(revision )
@@ -0,0 +1,109 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ScrollView;
+
+public class PullToRefreshScrollView extends PullToRefreshBase<ScrollView> {
+
+	public PullToRefreshScrollView(Context context) {
+		super(context);
+	}
+
+	public PullToRefreshScrollView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public PullToRefreshScrollView(Context context, Mode mode) {
+		super(context, mode);
+	}
+
+	public PullToRefreshScrollView(Context context, Mode mode, AnimationStyle style) {
+		super(context, mode, style);
+	}
+
+	@Override
+	public final Orientation getPullToRefreshScrollDirection() {
+		return Orientation.VERTICAL;
+	}
+
+	@Override
+	protected ScrollView createRefreshableView(Context context, AttributeSet attrs) {
+		ScrollView scrollView;
+		if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {
+			scrollView = new InternalScrollViewSDK9(context, attrs);
+		} else {
+			scrollView = new ScrollView(context, attrs);
+		}
+
+		scrollView.setId(R.id.scrollview);
+		return scrollView;
+	}
+
+	@Override
+	protected boolean isReadyForPullStart() {
+		return mRefreshableView.getScrollY() == 0;
+	}
+
+	@Override
+	protected boolean isReadyForPullEnd() {
+		View scrollViewChild = mRefreshableView.getChildAt(0);
+		if (null != scrollViewChild) {
+			return mRefreshableView.getScrollY() >= (scrollViewChild.getHeight() - getHeight());
+		}
+		return false;
+	}
+
+	@TargetApi(9)
+	final class InternalScrollViewSDK9 extends ScrollView {
+
+		public InternalScrollViewSDK9(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
+				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
+
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
+
+			// Does all of the hard work...
+			OverscrollHelper.overScrollBy(PullToRefreshScrollView.this, deltaX, scrollX, deltaY, scrollY,
+					getScrollRange(), isTouchEvent);
+
+			return returnValue;
+		}
+
+		/**
+		 * Taken from the AOSP ScrollView source
+		 */
+		private int getScrollRange() {
+			int scrollRange = 0;
+			if (getChildCount() > 0) {
+				View child = getChildAt(0);
+				scrollRange = Math.max(0, child.getHeight() - (getHeight() - getPaddingBottom() - getPaddingTop()));
+			}
+			return scrollRange;
+		}
+	}
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/CropImageView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/CropImageView.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/CropImageView.java	(revision )
@@ -0,0 +1,564 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.PointF;
+import android.graphics.RectF;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.widget.ImageView;
+
+import com.edmodo.cropper.cropwindow.edge.Edge;
+import com.edmodo.cropper.cropwindow.handle.Handle;
+import com.edmodo.cropper.util.AspectRatioUtil;
+import com.edmodo.cropper.util.HandleUtil;
+import com.edmodo.cropper.util.PaintUtil;
+
+
+
+/**
+ * Custom view that provides cropping capabilities to an image.
+ */
+public class CropImageView extends ImageView {
+
+    // Private Constants ///////////////////////////////////////////////////////////////////////////
+
+    @SuppressWarnings("unused")
+    private static final String TAG = CropImageView.class.getName();
+
+    @SuppressWarnings("unused")
+    public static final int GUIDELINES_OFF = 0;
+    public static final int GUIDELINES_ON_TOUCH = 1;
+    public static final int GUIDELINES_ON = 2;
+
+    // Member Variables ////////////////////////////////////////////////////////////////////////////
+
+    // The Paint used to draw the white rectangle around the crop area.
+    private Paint mBorderPaint;
+
+    // The Paint used to draw the guidelines within the crop area when pressed.
+    private Paint mGuidelinePaint;
+
+    // The Paint used to draw the corners of the Border
+    private Paint mCornerPaint;
+
+    // The Paint used to darken the surrounding areas outside the crop area.
+    private Paint mSurroundingAreaOverlayPaint;
+
+    // The radius (in pixels) of the touchable area around the handle.
+    // We are basing this value off of the recommended 48dp touch target size.
+    private float mHandleRadius;
+
+    // An edge of the crop window will snap to the corresponding edge of a
+    // specified bounding box when the crop window edge is less than or equal to
+    // this distance (in pixels) away from the bounding box edge.
+    private float mSnapRadius;
+
+    // Thickness of the line (in pixels) used to draw the corner handle.
+    private float mCornerThickness;
+
+    // Thickness of the line (in pixels) used to draw the border of the crop window.
+    private float mBorderThickness;
+
+    // Length of one side of the corner handle.
+    private float mCornerLength;
+
+    // The bounding box around the Bitmap that we are cropping.
+    @NonNull
+    private RectF mBitmapRect = new RectF();
+
+    // Holds the x and y offset between the exact touch location and the exact
+    // handle location that is activated. There may be an offset because we
+    // allow for some leeway (specified by 'mHandleRadius') in activating a
+    // handle. However, we want to maintain these offset values while the handle
+    // is being dragged so that the handle doesn't jump.
+    @NonNull
+    private PointF mTouchOffset = new PointF();
+
+    // The Handle that is currently pressed; null if no Handle is pressed.
+    private Handle mPressedHandle;
+
+    // Flag indicating if the crop area should always be a certain aspect ratio (indicated by mTargetAspectRatio).
+    private boolean mFixAspectRatio;
+
+    // Current aspect ratio of the image.
+    private int mAspectRatioX = 1;
+    private int mAspectRatioY = 1;
+
+    // Mode indicating how/whether to show the guidelines; must be one of GUIDELINES_OFF, GUIDELINES_ON_TOUCH, GUIDELINES_ON.
+    private int mGuidelinesMode = 1;
+
+    // Constructors ////////////////////////////////////////////////////////////////////////////////
+
+    public CropImageView(Context context) {
+        super(context);
+        init(context, null);
+    }
+
+    public CropImageView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context, attrs);
+    }
+
+    public CropImageView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context, attrs);
+    }
+
+    private void init(@NonNull Context context, @Nullable AttributeSet attrs) {
+
+        final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CropImageView, 0, 0);
+        mGuidelinesMode = typedArray.getInteger(R.styleable.CropImageView_guidelines, 1);
+        mFixAspectRatio = typedArray.getBoolean(R.styleable.CropImageView_fixAspectRatio, false);
+        mAspectRatioX = typedArray.getInteger(R.styleable.CropImageView_aspectRatioX, 1);
+        mAspectRatioY = typedArray.getInteger(R.styleable.CropImageView_aspectRatioY, 1);
+        typedArray.recycle();
+
+        final Resources resources = context.getResources();
+
+        mBorderPaint = PaintUtil.newBorderPaint(resources);
+        mGuidelinePaint = PaintUtil.newGuidelinePaint(resources);
+        mSurroundingAreaOverlayPaint = PaintUtil.newSurroundingAreaOverlayPaint(resources);
+        mCornerPaint = PaintUtil.newCornerPaint(resources);
+
+        mHandleRadius = resources.getDimension(R.dimen.target_radius);
+        mSnapRadius = resources.getDimension(R.dimen.snap_radius);
+        mBorderThickness = resources.getDimension(R.dimen.border_thickness);
+        mCornerThickness = resources.getDimension(R.dimen.corner_thickness);
+        mCornerLength = resources.getDimension(R.dimen.corner_length);
+    }
+
+    // View Methods ////////////////////////////////////////////////////////////////////////////////
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+
+        super.onLayout(changed, left, top, right, bottom);
+
+        mBitmapRect = getBitmapRect();
+        initCropWindow(mBitmapRect);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+
+        super.onDraw(canvas);
+
+        drawDarkenedSurroundingArea(canvas);
+        drawGuidelines(canvas);
+        drawBorder(canvas);
+        drawCorners(canvas);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+
+        // If this View is not enabled, don't allow for touch interactions.
+        if (!isEnabled()) {
+            return false;
+        }
+
+        switch (event.getAction()) {
+
+            case MotionEvent.ACTION_DOWN:
+                onActionDown(event.getX(), event.getY());
+                return true;
+
+            case MotionEvent.ACTION_UP:
+            case MotionEvent.ACTION_CANCEL:
+                getParent().requestDisallowInterceptTouchEvent(false);
+                onActionUp();
+                return true;
+
+            case MotionEvent.ACTION_MOVE:
+                onActionMove(event.getX(), event.getY());
+                getParent().requestDisallowInterceptTouchEvent(true);
+                return true;
+
+            default:
+                return false;
+        }
+    }
+
+    // Public Methods //////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Sets the guidelines for the CropOverlayView to be either on, off, or to show when resizing
+     * the application.
+     *
+     * @param guidelinesMode Integer that signals whether the guidelines should be on, off, or only
+     *                       showing when resizing.
+     */
+    public void setGuidelines(int guidelinesMode) {
+        mGuidelinesMode = guidelinesMode;
+        invalidate(); // Request onDraw() to get called again.
+    }
+
+    /**
+     * Sets whether the aspect ratio is fixed or not; true fixes the aspect ratio, while false
+     * allows it to be changed.
+     *
+     * @param fixAspectRatio Boolean that signals whether the aspect ratio should be maintained.
+     *
+     * @see {@link #setAspectRatio(int, int)}
+     */
+    public void setFixedAspectRatio(boolean fixAspectRatio) {
+        mFixAspectRatio = fixAspectRatio;
+        requestLayout(); // Request measure/layout to be run again.
+    }
+
+    /**
+     * Sets the both the X and Y values of the aspectRatio. These only apply iff fixed aspect ratio
+     * is set.
+     *
+     * @param aspectRatioX new X value of the aspect ratio; must be greater than 0
+     * @param aspectRatioY new Y value of the aspect ratio; must be greater than 0
+     *
+     * @see {@link #setFixedAspectRatio(boolean)}
+     */
+    public void setAspectRatio(int aspectRatioX, int aspectRatioY) {
+
+        if (aspectRatioX <= 0 || aspectRatioY <= 0) {
+            throw new IllegalArgumentException("Cannot set aspect ratio value to a number less than or equal to 0.");
+        }
+        mAspectRatioX = aspectRatioX;
+        mAspectRatioY = aspectRatioY;
+
+        if (mFixAspectRatio) {
+            requestLayout(); // Request measure/layout to be run again.
+        }
+    }
+
+    /**
+     * Gets the cropped image based on the current crop window.
+     *
+     * @return a new Bitmap representing the cropped image
+     */
+    public Bitmap getCroppedImage() {
+
+        // Implementation reference: http://stackoverflow.com/a/26930938/1068656
+
+        final Drawable drawable = getDrawable();
+        if (drawable == null || !(drawable instanceof BitmapDrawable)) {
+            return null;
+        }
+
+        // Get image matrix values and place them in an array.
+        final float[] matrixValues = new float[9];
+        getImageMatrix().getValues(matrixValues);
+
+        // Extract the scale and translation values. Note, we currently do not handle any other transformations (e.g. skew).
+        final float scaleX = matrixValues[Matrix.MSCALE_X];
+        final float scaleY = matrixValues[Matrix.MSCALE_Y];
+        final float transX = matrixValues[Matrix.MTRANS_X];
+        final float transY = matrixValues[Matrix.MTRANS_Y];
+
+        // Ensure that the left and top edges are not outside of the ImageView bounds.
+        final float bitmapLeft = (transX < 0) ? Math.abs(transX) : 0;
+        final float bitmapTop = (transY < 0) ? Math.abs(transY) : 0;
+
+        // Get the original bitmap object.
+        final Bitmap originalBitmap = ((BitmapDrawable) drawable).getBitmap();
+        
+        int bitmapHeight = originalBitmap.getHeight();  
+        int bitmapWidth = originalBitmap.getWidth();  
+        System.out.println("����ͼƬ�Ŀ�͸ߣ�" + bitmapWidth +"    -      " + bitmapHeight);
+
+        // Calculate the top-left corner of the crop window relative to the ~original~ bitmap size.
+        final float cropX = (bitmapLeft + Edge.LEFT.getCoordinate()) / scaleX;
+        final float cropY = (bitmapTop + Edge.TOP.getCoordinate()) / scaleY;
+
+        // Calculate the crop window size relative to the ~original~ bitmap size.
+        // Make sure the right and bottom edges are not outside the ImageView bounds (this is just to address rounding discrepancies).
+        final float cropWidth = Math.min(Edge.getWidth() / scaleX, originalBitmap.getWidth() - cropX);
+        final float cropHeight = Math.min(Edge.getHeight() / scaleY, originalBitmap.getHeight() - cropY);
+
+        // Crop the subset from the original Bitmap.
+        return Bitmap.createBitmap(originalBitmap,
+                                   (int) cropX,
+                                   (int) cropY,
+                                   (int) cropWidth,
+                                   (int) cropHeight);
+    }
+
+    // Private Methods /////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Gets the bounding rectangle of the bitmap within the ImageView.
+     */
+    private RectF getBitmapRect() {
+
+        final Drawable drawable = getDrawable();
+        if (drawable == null) {
+            return new RectF();
+        }
+
+        // Get image matrix values and place them in an array.
+        final float[] matrixValues = new float[9];
+        getImageMatrix().getValues(matrixValues);
+
+        // Extract the scale and translation values from the matrix.
+        final float scaleX = matrixValues[Matrix.MSCALE_X];
+        final float scaleY = matrixValues[Matrix.MSCALE_Y];
+        final float transX = matrixValues[Matrix.MTRANS_X];
+        final float transY = matrixValues[Matrix.MTRANS_Y];
+
+        // Get the width and height of the original bitmap.
+        final int drawableIntrinsicWidth = drawable.getIntrinsicWidth();
+        final int drawableIntrinsicHeight = drawable.getIntrinsicHeight();
+
+        // Calculate the dimensions as seen on screen.
+        final int drawableDisplayWidth = Math.round(drawableIntrinsicWidth * scaleX);
+        final int drawableDisplayHeight = Math.round(drawableIntrinsicHeight * scaleY);
+
+        // Get the Rect of the displayed image within the ImageView.
+        final float left = Math.max(transX, 0);
+        final float top = Math.max(transY, 0);
+        final float right = Math.min(left + drawableDisplayWidth, getWidth());
+        final float bottom = Math.min(top + drawableDisplayHeight, getHeight());
+
+        return new RectF(left, top, right, bottom);
+    }
+
+    /**
+     * Initialize the crop window by setting the proper {@link Edge} values.
+     * <p/>
+     * If fixed aspect ratio is turned off, the initial crop window will be set to the displayed
+     * image with 10% margin. If fixed aspect ratio is turned on, the initial crop window will
+     * conform to the aspect ratio with at least one dimension maximized.
+     */
+    private void initCropWindow(@NonNull RectF bitmapRect) {
+
+        if (mFixAspectRatio) {
+
+            // Initialize the crop window with the proper aspect ratio.
+            initCropWindowWithFixedAspectRatio(bitmapRect);
+
+        } else {
+
+            // Initialize crop window to have 10% padding w/ respect to Drawable's bounds.
+            final float horizontalPadding = 0.1f * bitmapRect.width();
+            final float verticalPadding = 0.1f * bitmapRect.height();
+
+            Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);
+            Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);
+            Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);
+            Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);
+        }
+    }
+
+    private void initCropWindowWithFixedAspectRatio(@NonNull RectF bitmapRect) {
+
+        // If the image aspect ratio is wider than the crop aspect ratio,
+        // then the image height is the determining initial length. Else, vice-versa.
+        if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > getTargetAspectRatio()) {
+
+            final float cropWidth = AspectRatioUtil.calculateWidth(bitmapRect.height(), getTargetAspectRatio());
+
+            Edge.LEFT.setCoordinate(bitmapRect.centerX() - cropWidth / 2f);
+            Edge.TOP.setCoordinate(bitmapRect.top);
+            Edge.RIGHT.setCoordinate(bitmapRect.centerX() + cropWidth / 2f);
+            Edge.BOTTOM.setCoordinate(bitmapRect.bottom);
+
+        } else {
+
+            final float cropHeight = AspectRatioUtil.calculateHeight(bitmapRect.width(), getTargetAspectRatio());
+
+            Edge.LEFT.setCoordinate(bitmapRect.left);
+            Edge.TOP.setCoordinate(bitmapRect.centerY() - cropHeight / 2f);
+            Edge.RIGHT.setCoordinate(bitmapRect.right);
+            Edge.BOTTOM.setCoordinate(bitmapRect.centerY() + cropHeight / 2f);
+        }
+    }
+
+    private void drawDarkenedSurroundingArea(@NonNull Canvas canvas) {
+
+        final RectF bitmapRect = mBitmapRect;
+
+        final float left = Edge.LEFT.getCoordinate();
+        final float top = Edge.TOP.getCoordinate();
+        final float right = Edge.RIGHT.getCoordinate();
+        final float bottom = Edge.BOTTOM.getCoordinate();
+
+        /*-
+          -------------------------------------
+          |                top                |
+          -------------------------------------
+          |      |                    |       |
+          |      |                    |       |
+          | left |                    | right |
+          |      |                    |       |
+          |      |                    |       |
+          -------------------------------------
+          |              bottom               |
+          -------------------------------------
+         */
+
+        // Draw "top", "bottom", "left", then "right" quadrants according to diagram above.
+        canvas.drawRect(bitmapRect.left, bitmapRect.top, bitmapRect.right, top, mSurroundingAreaOverlayPaint);
+        canvas.drawRect(bitmapRect.left, bottom, bitmapRect.right, bitmapRect.bottom, mSurroundingAreaOverlayPaint);
+        canvas.drawRect(bitmapRect.left, top, left, bottom, mSurroundingAreaOverlayPaint);
+        canvas.drawRect(right, top, bitmapRect.right, bottom, mSurroundingAreaOverlayPaint);
+    }
+
+    private void drawGuidelines(@NonNull Canvas canvas) {
+
+        if (!shouldGuidelinesBeShown()) {
+            return;
+        }
+
+        final float left = Edge.LEFT.getCoordinate();
+        final float top = Edge.TOP.getCoordinate();
+        final float right = Edge.RIGHT.getCoordinate();
+        final float bottom = Edge.BOTTOM.getCoordinate();
+
+        // Draw vertical guidelines.
+        final float oneThirdCropWidth = Edge.getWidth() / 3;
+
+        final float x1 = left + oneThirdCropWidth;
+        canvas.drawLine(x1, top, x1, bottom, mGuidelinePaint);
+        final float x2 = right - oneThirdCropWidth;
+        canvas.drawLine(x2, top, x2, bottom, mGuidelinePaint);
+
+        // Draw horizontal guidelines.
+        final float oneThirdCropHeight = Edge.getHeight() / 3;
+
+        final float y1 = top + oneThirdCropHeight;
+        canvas.drawLine(left, y1, right, y1, mGuidelinePaint);
+        final float y2 = bottom - oneThirdCropHeight;
+        canvas.drawLine(left, y2, right, y2, mGuidelinePaint);
+    }
+
+    private void drawBorder(@NonNull Canvas canvas) {
+
+        canvas.drawRect(Edge.LEFT.getCoordinate(),
+                        Edge.TOP.getCoordinate(),
+                        Edge.RIGHT.getCoordinate(),
+                        Edge.BOTTOM.getCoordinate(),
+                        mBorderPaint);
+    }
+
+    private void drawCorners(@NonNull Canvas canvas) {
+
+        final float left = Edge.LEFT.getCoordinate();
+        final float top = Edge.TOP.getCoordinate();
+        final float right = Edge.RIGHT.getCoordinate();
+        final float bottom = Edge.BOTTOM.getCoordinate();
+
+        // Absolute value of the offset by which to draw the corner line such that its inner edge is flush with the border's inner edge.
+        final float lateralOffset = (mCornerThickness - mBorderThickness) / 2f;
+        // Absolute value of the offset by which to start the corner line such that the line is drawn all the way to form a corner edge with the adjacent side.
+        final float startOffset = mCornerThickness - (mBorderThickness / 2f);
+
+        // Top-left corner: left side
+        canvas.drawLine(left - lateralOffset, top - startOffset, left - lateralOffset, top + mCornerLength, mCornerPaint);
+        // Top-left corner: top side
+        canvas.drawLine(left - startOffset, top - lateralOffset, left + mCornerLength, top - lateralOffset, mCornerPaint);
+
+        // Top-right corner: right side
+        canvas.drawLine(right + lateralOffset, top - startOffset, right + lateralOffset, top + mCornerLength, mCornerPaint);
+        // Top-right corner: top side
+        canvas.drawLine(right + startOffset, top - lateralOffset, right - mCornerLength, top - lateralOffset, mCornerPaint);
+
+        // Bottom-left corner: left side
+        canvas.drawLine(left - lateralOffset, bottom + startOffset, left - lateralOffset, bottom - mCornerLength, mCornerPaint);
+        // Bottom-left corner: bottom side
+        canvas.drawLine(left - startOffset, bottom + lateralOffset, left + mCornerLength, bottom + lateralOffset, mCornerPaint);
+
+        // Bottom-right corner: right side
+        canvas.drawLine(right + lateralOffset, bottom + startOffset, right + lateralOffset, bottom - mCornerLength, mCornerPaint);
+        // Bottom-right corner: bottom side
+        canvas.drawLine(right + startOffset, bottom + lateralOffset, right - mCornerLength, bottom + lateralOffset, mCornerPaint);
+    }
+
+    private boolean shouldGuidelinesBeShown() {
+        return ((mGuidelinesMode == GUIDELINES_ON)
+                || ((mGuidelinesMode == GUIDELINES_ON_TOUCH) && (mPressedHandle != null)));
+    }
+
+    private float getTargetAspectRatio() {
+        return mAspectRatioX / (float) mAspectRatioY;
+    }
+
+    /**
+     * Handles a {@link MotionEvent#ACTION_DOWN} event.
+     *
+     * @param x the x-coordinate of the down action
+     * @param y the y-coordinate of the down action
+     */
+    private void onActionDown(float x, float y) {
+
+        final float left = Edge.LEFT.getCoordinate();
+        final float top = Edge.TOP.getCoordinate();
+        final float right = Edge.RIGHT.getCoordinate();
+        final float bottom = Edge.BOTTOM.getCoordinate();
+
+        mPressedHandle = HandleUtil.getPressedHandle(x, y, left, top, right, bottom, mHandleRadius);
+
+        // Calculate the offset of the touch point from the precise location of the handle.
+        // Save these values in member variable 'mTouchOffset' so that we can maintain this offset as we drag the handle.
+        if (mPressedHandle != null) {
+            HandleUtil.getOffset(mPressedHandle, x, y, left, top, right, bottom, mTouchOffset);
+            invalidate();
+        }
+    }
+
+    /**
+     * Handles a {@link MotionEvent#ACTION_UP} or {@link MotionEvent#ACTION_CANCEL} event.
+     */
+    private void onActionUp() {
+        if (mPressedHandle != null) {
+            mPressedHandle = null;
+            invalidate();
+        }
+    }
+
+    /**
+     * Handles a {@link MotionEvent#ACTION_MOVE} event.
+     *
+     * @param x the x-coordinate of the move event
+     * @param y the y-coordinate of the move event
+     */
+    private void onActionMove(float x, float y) {
+
+        if (mPressedHandle == null) {
+            return;
+        }
+
+        // Adjust the coordinates for the finger position's offset (i.e. the distance from the initial touch to the precise handle location).
+        // We want to maintain the initial touch's distance to the pressed handle so that the crop window size does not "jump".
+        x += mTouchOffset.x;
+        y += mTouchOffset.y;
+
+        // Calculate the new crop window size/position.
+        if (mFixAspectRatio) {
+            mPressedHandle.updateCropWindow(x, y, getTargetAspectRatio(), mBitmapRect, mSnapRadius);
+        } else {
+            mPressedHandle.updateCropWindow(x, y, mBitmapRect, mSnapRadius);
+        }
+        invalidate();
+    }
+
+}
Index: app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab03.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab03.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab03.java	(revision )
@@ -0,0 +1,33 @@
+package zhu.com.sortingdata.fragment;
+
+
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import zhu.com.sortingdata.R;
+
+public class FragmentTab03 extends BaseFragment {
+
+	private View view;
+	private TextView tv_context;
+
+	@Override
+	public View onCreateView(LayoutInflater inflater,
+			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+
+		view = inflater.inflate(R.layout.fragment_main, null);
+		initView();
+		return view;
+	}
+
+	private void initView() {
+		tv_context = (TextView) view.findViewById(R.id.tv_context);
+		tv_context.setText("222222222");
+	}
+
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ar/values-ar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ar/values-ar.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ar/values-ar.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ar/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">اسحب للتحديث…</string>
+    <string name="pull_to_refresh_refreshing_label">تحميل…</string>
+    <string name="pull_to_refresh_release_label">اترك للتحديث…</string>
+</resources>
\ No newline at end of file
Index: cropperimagelibrary/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/res/values/strings.xml	(revision )
+++ cropperimagelibrary/src/main/res/values/strings.xml	(revision )
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">CropperImageLibrary</string>
+</resources>
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-cs/values-cs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-cs/values-cs.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-cs/values-cs.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-cs/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tažením aktualizujete…</string>
+    <string name="pull_to_refresh_refreshing_label">Načítání…</string>
+    <string name="pull_to_refresh_release_label">Uvolněním aktualizujete…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/bundles/release/aapt/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/release/aapt/AndroidManifest.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/release/aapt/AndroidManifest.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jeremyfeinstein.slidingmenu.lib"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="15"
+        android:targetSdkVersion="25" />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-he/values-he.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-he/values-he.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-he/values-he.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-he/values-he.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+    <string name="pull_to_refresh_refreshing_label">טוען…</string>
+    <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/EmptyViewMethodAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/EmptyViewMethodAccessor.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/EmptyViewMethodAccessor.java	(revision )
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.internal;
+
+import android.view.View;
+
+/**
+ * Interface that allows PullToRefreshBase to hijack the call to
+ * AdapterView.setEmptyView()
+ * 
+ * @author chris
+ */
+public interface EmptyViewMethodAccessor {
+
+	/**
+	 * Calls upto AdapterView.setEmptyView()
+	 * 
+	 * @param emptyView - to set as Empty View
+	 */
+	public void setEmptyViewInternal(View emptyView);
+
+	/**
+	 * Should call PullToRefreshBase.setEmptyView() which will then
+	 * automatically call through to setEmptyViewInternal()
+	 * 
+	 * @param emptyView - to set as Empty View
+	 */
+	public void setEmptyView(View emptyView);
+
+}
Index: SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivity.java	(revision )
+++ SlidingMeunlibrary/src/com/jeremyfeinstein/slidingmenu/lib/app/SlidingActivity.java	(revision )
@@ -0,0 +1,152 @@
+package com.jeremyfeinstein.slidingmenu.lib.app;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+
+import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
+
+public class SlidingActivity extends Activity implements SlidingActivityBase {
+
+	private SlidingActivityHelper mHelper;
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		mHelper = new SlidingActivityHelper(this);
+		mHelper.onCreate(savedInstanceState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onPostCreate(android.os.Bundle)
+	 */
+	@Override
+	public void onPostCreate(Bundle savedInstanceState) {
+		super.onPostCreate(savedInstanceState);
+		mHelper.onPostCreate(savedInstanceState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#findViewById(int)
+	 */
+	@Override
+	public View findViewById(int id) {
+		View v = super.findViewById(id);
+		if (v != null)
+			return v;
+		return mHelper.findViewById(id);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)
+	 */
+	@Override
+	protected void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		mHelper.onSaveInstanceState(outState);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(int)
+	 */
+	@Override
+	public void setContentView(int id) {
+		setContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View)
+	 */
+	@Override
+	public void setContentView(View v) {
+		setContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	@Override
+	public void setContentView(View v, LayoutParams params) {
+		super.setContentView(v, params);
+		mHelper.registerAboveContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(int)
+	 */
+	public void setBehindContentView(int id) {
+		setBehindContentView(getLayoutInflater().inflate(id, null));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View)
+	 */
+	public void setBehindContentView(View v) {
+		setBehindContentView(v, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setBehindContentView(android.view.View, android.view.ViewGroup.LayoutParams)
+	 */
+	public void setBehindContentView(View v, LayoutParams params) {
+		mHelper.setBehindContentView(v, params);
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#getSlidingMenu()
+	 */
+	public SlidingMenu getSlidingMenu() {
+		return mHelper.getSlidingMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#toggle()
+	 */
+	public void toggle() {
+		mHelper.toggle();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showAbove()
+	 */
+	public void showContent() {
+		mHelper.showContent();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showBehind()
+	 */
+	public void showMenu() {
+		mHelper.showMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#showSecondaryMenu()
+	 */
+	public void showSecondaryMenu() {
+		mHelper.showSecondaryMenu();
+	}
+
+	/* (non-Javadoc)
+	 * @see com.jeremyfeinstein.slidingmenu.lib.app.SlidingActivityBase#setSlidingActionBarEnabled(boolean)
+	 */
+	public void setSlidingActionBarEnabled(boolean b) {
+		mHelper.setSlidingActionBarEnabled(b);
+	}
+
+	/* (non-Javadoc)
+	 * @see android.app.Activity#onKeyUp(int, android.view.KeyEvent)
+	 */
+	@Override
+	public boolean onKeyUp(int keyCode, KeyEvent event) {
+		boolean b = mHelper.onKeyUp(keyCode, event);
+		if (b) return b;
+		return super.onKeyUp(keyCode, event);
+	}
+
+}
Index: SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/release/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/release/merger.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/incremental/mergeAssets/release/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\assets"/></dataSet><dataSet config="release"><source path="F:\ZZTAndroidStuidio2\SortingData\SlidingMeunlibrary\src\release\assets"/></dataSet></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pl/values-pl.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pl/values-pl.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-pl/values-pl.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-pl/values-pl.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Pociągnij, aby odświeżyć…</string>
+    <string name="pull_to_refresh_refreshing_label">Wczytywanie…</string>
+    <string name="pull_to_refresh_release_label">Puść, aby odświeżyć…</string>
+</resources>
\ No newline at end of file
Index: app/src/main/res/layout/menu_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/menu_layout.xml	(revision )
+++ app/src/main/res/layout/menu_layout.xml	(revision )
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+
+    >
+
+    <Button
+        android:text="显示内容"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:id="@+id/bt_menu_show" />
+
+    <TextView
+        android:text="显示第一个标签"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/slidingmenu_height"
+        android:id="@+id/textView"
+        android:gravity="center_vertical" />
+
+    <TextView
+        android:text="显示第二个标签"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/slidingmenu_height"
+        android:id="@+id/textView2"
+        android:gravity="center_vertical" />
+
+    <TextView
+        android:text="显示第三个标签"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/slidingmenu_height"
+        android:id="@+id/textView3"
+        android:gravity="center_vertical" />
+
+
+
+</LinearLayout>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ja/values-ja.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ja/values-ja.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ja/values-ja.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ja/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">画面を引っ張って…</string>
+    <string name="pull_to_refresh_refreshing_label">読み込み中…</string>
+    <string name="pull_to_refresh_release_label">指を離して更新…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/values-fr/pull_refresh_strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/values-fr/pull_refresh_strings.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/values-fr/pull_refresh_strings.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="pull_to_refresh_pull_label">Tirez pour rafraîchir…</string>
+  <string name="pull_to_refresh_release_label">Relâcher pour rafraîchir…</string>
+  <string name="pull_to_refresh_refreshing_label">Chargement…</string>
+</resources>
Index: SlidingMeunlibrary/build/intermediates/bundles/release/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/release/AndroidManifest.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/release/AndroidManifest.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jeremyfeinstein.slidingmenu.lib"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="15"
+        android:targetSdkVersion="25" />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/incremental/packageResources/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/incremental/packageResources/debug/merger.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/incremental/packageResources/debug/merger.xml	(revision )
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res"><file name="slide_in_from_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_in_from_bottom.xml" qualifiers="" type="anim"/><file name="slide_in_from_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_in_from_top.xml" qualifiers="" type="anim"/><file name="slide_out_to_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_out_to_bottom.xml" qualifiers="" type="anim"/><file name="slide_out_to_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\anim\slide_out_to_top.xml" qualifiers="" type="anim"/><file name="indicator_bg_bottom" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable\indicator_bg_bottom.xml" qualifiers="" type="drawable"/><file name="indicator_bg_top" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable\indicator_bg_top.xml" qualifiers="" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-hdpi\default_ptr_flip.png" qualifiers="hdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-hdpi\default_ptr_rotate.png" qualifiers="hdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-hdpi\indicator_arrow.png" qualifiers="hdpi" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-mdpi\default_ptr_flip.png" qualifiers="mdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-mdpi\default_ptr_rotate.png" qualifiers="mdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-mdpi\indicator_arrow.png" qualifiers="mdpi" type="drawable"/><file name="default_ptr_flip" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-xhdpi\default_ptr_flip.png" qualifiers="xhdpi" type="drawable"/><file name="default_ptr_rotate" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-xhdpi\default_ptr_rotate.png" qualifiers="xhdpi" type="drawable"/><file name="indicator_arrow" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\drawable-xhdpi\indicator_arrow.png" qualifiers="xhdpi" type="drawable"/><file name="pull_to_refresh_header_horizontal" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\layout\pull_to_refresh_header_horizontal.xml" qualifiers="" type="layout"/><file name="pull_to_refresh_header_vertical" path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\layout\pull_to_refresh_header_vertical.xml" qualifiers="" type="layout"/><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\attrs.xml" qualifiers=""><declare-styleable name="PullToRefresh">
+
+        <!-- A drawable to use as the background of the Refreshable View -->
+        <attr format="reference|color" name="ptrRefreshableViewBackground"/>
+
+        <!-- A drawable to use as the background of the Header and Footer Loading Views -->
+        <attr format="reference|color" name="ptrHeaderBackground"/>
+
+        <!-- Text Color of the Header and Footer Loading Views -->
+        <attr format="reference|color" name="ptrHeaderTextColor"/>
+
+        <!-- Text Color of the Header and Footer Loading Views Sub Header -->
+        <attr format="reference|color" name="ptrHeaderSubTextColor"/>
+
+        <!-- Mode of Pull-to-Refresh that should be used -->
+        <attr name="ptrMode">
+            <flag name="disabled" value="0x0"/>
+            <flag name="pullFromStart" value="0x1"/>
+            <flag name="pullFromEnd" value="0x2"/>
+            <flag name="both" value="0x3"/>
+            <flag name="manualOnly" value="0x4"/>
+
+            <!-- These last two are depreacted -->
+            <flag name="pullDownFromTop" value="0x1"/>
+            <flag name="pullUpFromBottom" value="0x2"/>
+        </attr>
+
+        <!-- Whether the Indicator overlay(s) should be used -->
+        <attr format="reference|boolean" name="ptrShowIndicator"/>
+
+        <!-- Drawable to use as Loading Indicator. Changes both Header and Footer. -->
+        <attr format="reference" name="ptrDrawable"/>
+
+        <!-- Drawable to use as Loading Indicator in the Header View. Overrides value set in ptrDrawable. -->
+        <attr format="reference" name="ptrDrawableStart"/>
+
+        <!-- Drawable to use as Loading Indicator in the Footer View. Overrides value set in ptrDrawable. -->
+        <attr format="reference" name="ptrDrawableEnd"/>
+
+        <!-- Whether Android's built-in Over Scroll should be utilised for Pull-to-Refresh. -->
+        <attr format="reference|boolean" name="ptrOverScroll"/>
+
+        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views -->
+        <attr format="reference" name="ptrHeaderTextAppearance"/>
+
+        <!-- Base text color, typeface, size, and style for Header and Footer Loading Views Sub Header -->
+        <attr format="reference" name="ptrSubHeaderTextAppearance"/>
+
+        <!-- Style of Animation should be used displayed when pulling. -->
+        <attr name="ptrAnimationStyle">
+            <flag name="rotate" value="0x0"/>
+            <flag name="flip" value="0x1"/>
+        </attr>
+
+        <!-- Whether the user can scroll while the View is Refreshing -->
+        <attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/>
+
+        <!--
+        	Whether PullToRefreshListView has it's extras enabled. This allows the user to be 
+        	able to scroll while refreshing, and behaves better. It acheives this by adding
+        	Header and/or Footer Views to the ListView.
+        -->
+        <attr format="reference|boolean" name="ptrListViewExtrasEnabled"/>
+
+        <!--
+        	Whether the Drawable should be continually rotated as you pull. This only
+        	takes effect when using the 'Rotate' Animation Style.
+        -->
+        <attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/>
+
+        <!-- BELOW HERE ARE DEPRECEATED. DO NOT USE. -->
+        <attr format="reference|color" name="ptrAdapterViewBackground"/>
+        <attr format="reference" name="ptrDrawableTop"/>
+        <attr format="reference" name="ptrDrawableBottom"/>
+    </declare-styleable></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\dimens.xml" qualifiers=""><dimen name="indicator_corner_radius">12dp</dimen><dimen name="indicator_right_padding">10dp</dimen><dimen name="indicator_internal_padding">4dp</dimen><dimen name="header_footer_top_bottom_padding">12dp</dimen><dimen name="header_footer_left_right_padding">24dp</dimen></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\ids.xml" qualifiers=""><item name="scrollview" type="id"/><item name="webview" type="id"/><item name="gridview" type="id"/></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values\pull_refresh_strings.xml" qualifiers=""><string name="pull_to_refresh_from_bottom_pull_label">@string/pull_to_refresh_pull_label</string><string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string><string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string><string name="pull_to_refresh_refreshing_label">Loading…</string><string name="pull_to_refresh_pull_label">Pull to refresh…</string><string name="pull_to_refresh_release_label">Release to refresh…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ar\pull_refresh_strings.xml" qualifiers="ar"><string name="pull_to_refresh_release_label">اترك للتحديث…</string><string name="pull_to_refresh_refreshing_label">تحميل…</string><string name="pull_to_refresh_pull_label">اسحب للتحديث…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-cs\pull_refresh_strings.xml" qualifiers="cs"><string name="pull_to_refresh_refreshing_label">Načítání…</string><string name="pull_to_refresh_pull_label">Tažením aktualizujete…</string><string name="pull_to_refresh_release_label">Uvolněním aktualizujete…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-de\pull_refresh_strings.xml" qualifiers="de"><string name="pull_to_refresh_release_label">Loslassen zum Aktualisieren…</string><string name="pull_to_refresh_refreshing_label">Laden…</string><string name="pull_to_refresh_pull_label">Ziehen zum Aktualisieren…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-es\pull_refresh_strings.xml" qualifiers="es"><string name="pull_to_refresh_refreshing_label">Cargando…</string><string name="pull_to_refresh_pull_label">Tirar para actualizar…</string><string name="pull_to_refresh_release_label">Soltar para actualizar…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-fi\pull_refresh_strings.xml" qualifiers="fi"><string name="pull_to_refresh_release_label">Päivitä vapauttamalla…</string><string name="pull_to_refresh_pull_label">Päivitä vetämällä alas…</string><string name="pull_to_refresh_from_bottom_release_label">@string/pull_to_refresh_release_label</string><string name="pull_to_refresh_from_bottom_pull_label">Päivitä vetämällä ylös…</string><string name="pull_to_refresh_refreshing_label">Päivitetään…</string><string name="pull_to_refresh_from_bottom_refreshing_label">@string/pull_to_refresh_refreshing_label</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-fr\pull_refresh_strings.xml" qualifiers="fr"><string name="pull_to_refresh_refreshing_label">Chargement…</string><string name="pull_to_refresh_release_label">Relâcher pour rafraîchir…</string><string name="pull_to_refresh_pull_label">Tirez pour rafraîchir…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-he\pull_refresh_strings.xml" qualifiers="he"><string name="pull_to_refresh_release_label">שחרר לרענון…</string><string name="pull_to_refresh_pull_label">משוך לרענון…</string><string name="pull_to_refresh_refreshing_label">טוען…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-it\pull_refresh_strings.xml" qualifiers="it"><string name="pull_to_refresh_pull_label">Tira per aggiornare…</string><string name="pull_to_refresh_release_label">Rilascia per aggionare…</string><string name="pull_to_refresh_refreshing_label">Caricamento…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-iw\pull_refresh_strings.xml" qualifiers="iw"><string name="pull_to_refresh_refreshing_label">טוען…</string><string name="pull_to_refresh_release_label">שחרר לרענון…</string><string name="pull_to_refresh_pull_label">משוך לרענון…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ja\pull_refresh_strings.xml" qualifiers="ja"><string name="pull_to_refresh_pull_label">画面を引っ張って…</string><string name="pull_to_refresh_refreshing_label">読み込み中…</string><string name="pull_to_refresh_release_label">指を離して更新…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ko\pull_refresh_strings.xml" qualifiers="ko"><string name="pull_to_refresh_pull_label">당겨서 새로 고침…</string><string name="pull_to_refresh_refreshing_label">로드 중…</string><string name="pull_to_refresh_release_label">놓아서 새로 고침…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-nl\pull_refresh_strings.xml" qualifiers="nl"><string name="pull_to_refresh_pull_label">Sleep om te vernieuwen…</string><string name="pull_to_refresh_release_label">Loslaten om te vernieuwen…</string><string name="pull_to_refresh_refreshing_label">Laden…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-pl\pull_refresh_strings.xml" qualifiers="pl"><string name="pull_to_refresh_pull_label">Pociągnij, aby odświeżyć…</string><string name="pull_to_refresh_release_label">Puść, aby odświeżyć…</string><string name="pull_to_refresh_refreshing_label">Wczytywanie…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-pt\pull_refresh_strings.xml" qualifiers="pt"><string name="pull_to_refresh_pull_label">Puxe para atualizar…</string><string name="pull_to_refresh_refreshing_label">A carregar…</string><string name="pull_to_refresh_release_label">Liberação para atualizar…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-pt-rBR\pull_refresh_strings.xml" qualifiers="pt-rBR"><string name="pull_to_refresh_pull_label">Puxe para atualizar…</string><string name="pull_to_refresh_release_label">Libere para atualizar…</string><string name="pull_to_refresh_refreshing_label">Carregando…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ro\pull_refresh_strings.xml" qualifiers="ro"><string name="pull_to_refresh_pull_label">Trage pentru a reîmprospăta…</string><string name="pull_to_refresh_release_label">Eliberează pentru a reîmprospăta…</string><string name="pull_to_refresh_refreshing_label">Încărcare…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-ru\pull_refresh_strings.xml" qualifiers="ru"><string name="pull_to_refresh_release_label">Отпустите для обновления…</string><string name="pull_to_refresh_refreshing_label">Загрузка…</string><string name="pull_to_refresh_pull_label">Потяните для обновления…</string></file><file path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\main\res\values-zh\pull_refresh_strings.xml" qualifiers="zh"><string name="pull_to_refresh_release_label">放开以刷新…</string><string name="pull_to_refresh_pull_label">下拉刷新…</string><string name="pull_to_refresh_refreshing_label">正在载入…</string></file></source><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\generated\res\rs\debug"/><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\generated\res\generated\debug"/></dataSet><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\debug\res"/></dataSet><mergedItems><configuration qualifiers=""><declare-styleable name="PullToRefresh"><attr format="reference|color" name="ptrRefreshableViewBackground"/><attr format="reference|color" name="ptrHeaderBackground"/><attr format="reference|color" name="ptrHeaderTextColor"/><attr format="reference|color" name="ptrHeaderSubTextColor"/><attr name="ptrMode"><flag name="disabled" value="0x0"/><flag name="pullFromStart" value="0x1"/><flag name="pullFromEnd" value="0x2"/><flag name="both" value="0x3"/><flag name="manualOnly" value="0x4"/><flag name="pullDownFromTop" value="0x1"/><flag name="pullUpFromBottom" value="0x2"/></attr><attr format="reference|boolean" name="ptrShowIndicator"/><attr format="reference" name="ptrDrawable"/><attr format="reference" name="ptrDrawableStart"/><attr format="reference" name="ptrDrawableEnd"/><attr format="reference|boolean" name="ptrOverScroll"/><attr format="reference" name="ptrHeaderTextAppearance"/><attr format="reference" name="ptrSubHeaderTextAppearance"/><attr name="ptrAnimationStyle"><flag name="rotate" value="0x0"/><flag name="flip" value="0x1"/></attr><attr format="reference|boolean" name="ptrScrollingWhileRefreshingEnabled"/><attr format="reference|boolean" name="ptrListViewExtrasEnabled"/><attr format="reference|boolean" name="ptrRotateDrawableWhilePulling"/><attr format="reference|color" name="ptrAdapterViewBackground"/><attr format="reference" name="ptrDrawableTop"/><attr format="reference" name="ptrDrawableBottom"/></declare-styleable></configuration></mergedItems></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ko/values-ko.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ko/values-ko.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ko/values-ko.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ko/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">당겨서 새로 고침…</string>
+    <string name="pull_to_refresh_refreshing_label">로드 중…</string>
+    <string name="pull_to_refresh_release_label">놓아서 새로 고침…</string>
+</resources>
\ No newline at end of file
Index: cropperimagelibrary/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/build.gradle	(revision )
+++ cropperimagelibrary/build.gradle	(revision )
@@ -0,0 +1,31 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
+
+    defaultConfig {
+        minSdkVersion 15
+        targetSdkVersion 25
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
+        exclude group: 'com.android.support', module: 'support-annotations'
+    })
+    compile 'com.android.support:appcompat-v7:25.2.0'
+    testCompile 'junit:junit:4.12'
+}
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/ViewCompat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/ViewCompat.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/internal/ViewCompat.java	(revision )
@@ -0,0 +1,70 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library.internal;
+
+import android.annotation.TargetApi;
+import android.graphics.drawable.Drawable;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.view.View;
+
+@SuppressWarnings("deprecation")
+public class ViewCompat {
+
+	public static void postOnAnimation(View view, Runnable runnable) {
+		if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
+			SDK16.postOnAnimation(view, runnable);
+		} else {
+			view.postDelayed(runnable, 16);
+		}
+	}
+
+	public static void setBackground(View view, Drawable background) {
+		if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
+			SDK16.setBackground(view, background);
+		} else {
+			view.setBackgroundDrawable(background);
+		}
+	}
+
+	public static void setLayerType(View view, int layerType) {
+		if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
+			SDK11.setLayerType(view, layerType);
+		}
+	}
+
+	@TargetApi(11)
+	static class SDK11 {
+
+		public static void setLayerType(View view, int layerType) {
+			view.setLayerType(layerType, null);
+		}
+	}
+
+	@TargetApi(16)
+	static class SDK16 {
+
+		public static void postOnAnimation(View view, Runnable runnable) {
+			view.postOnAnimation(runnable);
+		}
+
+		public static void setBackground(View view, Drawable background) {
+			view.setBackground(background);
+		}
+
+	}
+
+}
Index: SlidingMeunlibrary/build/intermediates/bundles/debug/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/debug/AndroidManifest.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/debug/AndroidManifest.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.jeremyfeinstein.slidingmenu.lib"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="15"
+        android:targetSdkVersion="25" />
+
+</manifest>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_vertical.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_vertical.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_vertical.xml	(revision )
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="left|center_vertical" >
+
+            <ImageView
+                android:id="@+id/pull_to_refresh_image"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center" />
+
+            <ProgressBar
+                android:id="@+id/pull_to_refresh_progress"
+                style="?android:attr/progressBarStyleSmall"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:indeterminate="true"
+                android:visibility="gone" />
+        </FrameLayout>
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:gravity="center_horizontal"
+            android:orientation="vertical" >
+
+            <TextView
+                android:id="@+id/pull_to_refresh_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearance"
+                android:textStyle="bold" />
+
+            <TextView
+                android:id="@+id/pull_to_refresh_sub_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:visibility="gone" />
+        </LinearLayout>
+    </FrameLayout>
+
+</merge>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/MaterialHeader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/MaterialHeader.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/MaterialHeader.java	(revision )
@@ -0,0 +1,182 @@
+package in.srain.cube.views.ptr.header;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.Transformation;
+import in.srain.cube.views.ptr.PtrFrameLayout;
+import in.srain.cube.views.ptr.PtrUIHandler;
+import in.srain.cube.views.ptr.PtrUIHandlerHook;
+import in.srain.cube.views.ptr.indicator.PtrIndicator;
+
+public class MaterialHeader extends View implements PtrUIHandler {
+
+    private MaterialProgressDrawable mDrawable;
+    private float mScale = 1f;
+    private PtrFrameLayout mPtrFrameLayout;
+
+    private Animation mScaleAnimation = new Animation() {
+        @Override
+        public void applyTransformation(float interpolatedTime, Transformation t) {
+            mScale = 1f - interpolatedTime;
+            mDrawable.setAlpha((int) (255 * mScale));
+            invalidate();
+        }
+    };
+
+    public MaterialHeader(Context context) {
+        super(context);
+        initView();
+    }
+
+    public MaterialHeader(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initView();
+    }
+
+    public MaterialHeader(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        initView();
+    }
+
+    public void setPtrFrameLayout(PtrFrameLayout layout) {
+
+        final PtrUIHandlerHook mPtrUIHandlerHook = new PtrUIHandlerHook() {
+            @Override
+            public void run() {
+                startAnimation(mScaleAnimation);
+            }
+        };
+
+        mScaleAnimation.setDuration(200);
+        mScaleAnimation.setAnimationListener(new Animation.AnimationListener() {
+            @Override
+            public void onAnimationStart(Animation animation) {
+
+            }
+
+            @Override
+            public void onAnimationEnd(Animation animation) {
+                mPtrUIHandlerHook.resume();
+            }
+
+            @Override
+            public void onAnimationRepeat(Animation animation) {
+
+            }
+        });
+
+        mPtrFrameLayout = layout;
+        mPtrFrameLayout.setRefreshCompleteHook(mPtrUIHandlerHook);
+    }
+
+    private void initView() {
+        mDrawable = new MaterialProgressDrawable(getContext(), this);
+        mDrawable.setBackgroundColor(Color.WHITE);
+        mDrawable.setCallback(this);
+    }
+
+    @Override
+    public void invalidateDrawable(Drawable dr) {
+        if (dr == mDrawable) {
+            invalidate();
+        } else {
+            super.invalidateDrawable(dr);
+        }
+    }
+
+    public void setColorSchemeColors(int[] colors) {
+        mDrawable.setColorSchemeColors(colors);
+        invalidate();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int height = mDrawable.getIntrinsicHeight() + getPaddingTop() + getPaddingBottom();
+        heightMeasureSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY);
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        final int size = mDrawable.getIntrinsicHeight();
+        mDrawable.setBounds(0, 0, size, size);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        final int saveCount = canvas.save();
+        Rect rect = mDrawable.getBounds();
+        int l = getPaddingLeft() + (getMeasuredWidth() - mDrawable.getIntrinsicWidth()) / 2;
+        canvas.translate(l, getPaddingTop());
+        canvas.scale(mScale, mScale, rect.exactCenterX(), rect.exactCenterY());
+        mDrawable.draw(canvas);
+        canvas.restoreToCount(saveCount);
+    }
+
+    /**
+     * When the content view has reached top and refresh has been completed, view will be reset.
+     *
+     * @param frame
+     */
+    @Override
+    public void onUIReset(PtrFrameLayout frame) {
+        mScale = 1f;
+        mDrawable.stop();
+    }
+
+    /**
+     * prepare for loading
+     *
+     * @param frame
+     */
+    @Override
+    public void onUIRefreshPrepare(PtrFrameLayout frame) {
+    }
+
+    /**
+     * perform refreshing UI
+     *
+     * @param frame
+     */
+    @Override
+    public void onUIRefreshBegin(PtrFrameLayout frame) {
+        mDrawable.setAlpha(255);
+        mDrawable.start();
+    }
+
+    /**
+     * perform UI after refresh
+     *
+     * @param frame
+     */
+    @Override
+    public void onUIRefreshComplete(PtrFrameLayout frame) {
+        mDrawable.stop();
+    }
+
+    @Override
+    public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator) {
+
+        float percent = Math.min(1f, ptrIndicator.getCurrentPercent());
+
+        if (status == PtrFrameLayout.PTR_STATUS_PREPARE) {
+            mDrawable.setAlpha((int) (255 * percent));
+            mDrawable.showArrow(true);
+
+            float strokeStart = ((percent) * .8f);
+            mDrawable.setStartEndTrim(0f, Math.min(0.8f, strokeStart));
+            mDrawable.setArrowScale(Math.min(1f, percent));
+
+            // magic
+            float rotation = (-0.25f + .4f * percent + percent * 2) * .5f;
+            mDrawable.setProgressRotation(rotation);
+            invalidate();
+        }
+    }
+}
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/indicator/PtrIndicator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/indicator/PtrIndicator.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/indicator/PtrIndicator.java	(revision )
@@ -0,0 +1,197 @@
+package in.srain.cube.views.ptr.indicator;
+
+import android.graphics.PointF;
+
+public class PtrIndicator {
+
+    public final static int POS_START = 0;
+    protected int mOffsetToRefresh = 0;
+    private PointF mPtLastMove = new PointF();
+    private float mOffsetX;
+    private float mOffsetY;
+    private int mCurrentPos = 0;
+    private int mLastPos = 0;
+    private int mHeaderHeight;
+    private int mPressedPos = 0;
+
+    private float mRatioOfHeaderHeightToRefresh = 1.2f;
+    private float mResistance = 1.7f;
+    private boolean mIsUnderTouch = false;
+    private int mOffsetToKeepHeaderWhileLoading = -1;
+    // record the refresh complete position
+    private int mRefreshCompleteY = 0;
+
+    public boolean isUnderTouch() {
+        return mIsUnderTouch;
+    }
+
+    public float getResistance() {
+        return mResistance;
+    }
+
+    public void setResistance(float resistance) {
+        mResistance = resistance;
+    }
+
+    public void onRelease() {
+        mIsUnderTouch = false;
+    }
+
+    public void onUIRefreshComplete() {
+        mRefreshCompleteY = mCurrentPos;
+    }
+
+    public boolean goDownCrossFinishPosition() {
+        return mCurrentPos >= mRefreshCompleteY;
+    }
+
+    protected void processOnMove(float currentX, float currentY, float offsetX, float offsetY) {
+        setOffset(offsetX, offsetY / mResistance);
+    }
+
+    public void setRatioOfHeaderHeightToRefresh(float ratio) {
+        mRatioOfHeaderHeightToRefresh = ratio;
+        mOffsetToRefresh = (int) (mHeaderHeight * ratio);
+    }
+
+    public float getRatioOfHeaderToHeightRefresh() {
+        return mRatioOfHeaderHeightToRefresh;
+    }
+
+    public int getOffsetToRefresh() {
+        return mOffsetToRefresh;
+    }
+
+    public void setOffsetToRefresh(int offset) {
+        mRatioOfHeaderHeightToRefresh = mHeaderHeight * 1f / offset;
+        mOffsetToRefresh = offset;
+    }
+
+    public void onPressDown(float x, float y) {
+        mIsUnderTouch = true;
+        mPressedPos = mCurrentPos;
+        mPtLastMove.set(x, y);
+    }
+
+    public final void onMove(float x, float y) {
+        float offsetX = x - mPtLastMove.x;
+        float offsetY = (y - mPtLastMove.y);
+        processOnMove(x, y, offsetX, offsetY);
+        mPtLastMove.set(x, y);
+    }
+
+    protected void setOffset(float x, float y) {
+        mOffsetX = x;
+        mOffsetY = y;
+    }
+
+    public float getOffsetX() {
+        return mOffsetX;
+    }
+
+    public float getOffsetY() {
+        return mOffsetY;
+    }
+
+    public int getLastPosY() {
+        return mLastPos;
+    }
+
+    public int getCurrentPosY() {
+        return mCurrentPos;
+    }
+
+    /**
+     * Update current position before update the UI
+     */
+    public final void setCurrentPos(int current) {
+        mLastPos = mCurrentPos;
+        mCurrentPos = current;
+        onUpdatePos(current, mLastPos);
+    }
+
+    protected void onUpdatePos(int current, int last) {
+
+    }
+
+    public int getHeaderHeight() {
+        return mHeaderHeight;
+    }
+
+    public void setHeaderHeight(int height) {
+        mHeaderHeight = height;
+        updateHeight();
+    }
+
+    protected void updateHeight() {
+        mOffsetToRefresh = (int) (mRatioOfHeaderHeightToRefresh * mHeaderHeight);
+    }
+
+    public void convertFrom(PtrIndicator ptrSlider) {
+        mCurrentPos = ptrSlider.mCurrentPos;
+        mLastPos = ptrSlider.mLastPos;
+        mHeaderHeight = ptrSlider.mHeaderHeight;
+    }
+
+    public boolean hasLeftStartPosition() {
+        return mCurrentPos > POS_START;
+    }
+
+    public boolean hasJustLeftStartPosition() {
+        return mLastPos == POS_START && hasLeftStartPosition();
+    }
+
+    public boolean hasJustBackToStartPosition() {
+        return mLastPos != POS_START && isInStartPosition();
+    }
+
+    public boolean isOverOffsetToRefresh() {
+        return mCurrentPos >= getOffsetToRefresh();
+    }
+
+    public boolean hasMovedAfterPressedDown() {
+        return mCurrentPos != mPressedPos;
+    }
+
+    public boolean isInStartPosition() {
+        return mCurrentPos == POS_START;
+    }
+
+    public boolean crossRefreshLineFromTopToBottom() {
+        return mLastPos < getOffsetToRefresh() && mCurrentPos >= getOffsetToRefresh();
+    }
+
+    public boolean hasJustReachedHeaderHeightFromTopToBottom() {
+        return mLastPos < mHeaderHeight && mCurrentPos >= mHeaderHeight;
+    }
+
+    public boolean isOverOffsetToKeepHeaderWhileLoading() {
+        return mCurrentPos > getOffsetToKeepHeaderWhileLoading();
+    }
+
+    public void setOffsetToKeepHeaderWhileLoading(int offset) {
+        mOffsetToKeepHeaderWhileLoading = offset;
+    }
+
+    public int getOffsetToKeepHeaderWhileLoading() {
+        return mOffsetToKeepHeaderWhileLoading >= 0 ? mOffsetToKeepHeaderWhileLoading : mHeaderHeight;
+    }
+
+    public boolean isAlreadyHere(int to) {
+        return mCurrentPos == to;
+    }
+
+    public float getLastPercent() {
+        final float oldPercent = mHeaderHeight == 0 ? 0 : mLastPos * 1f / mHeaderHeight;
+        return oldPercent;
+    }
+
+    public float getCurrentPercent() {
+        final float currentPercent = mHeaderHeight == 0 ? 0 : mCurrentPos * 1f / mHeaderHeight;
+        return currentPercent;
+    }
+
+    public boolean willOverTop(int to) {
+        return to < POS_START;
+    }
+}
Index: ultrapulltorefreshlibrary/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/AndroidManifest.xml	(revision )
+++ ultrapulltorefreshlibrary/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,10 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+
+    package="com.zhu.ultrapulltorefreshlibrary">
+
+    <application android:allowBackup="true" android:label="@string/app_name"
+        android:supportsRtl="true">
+
+    </application>
+
+</manifest>
Index: PullToRefreshLibrary/src/main/res/anim/slide_out_to_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/anim/slide_out_to_top.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/anim/slide_out_to_top.xml	(revision )
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="-100%p" />
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/drawable/indicator_bg_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/drawable/indicator_bg_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/drawable/indicator_bg_bottom.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="0dp"
+        android:bottomRightRadius="0dp"
+        android:radius="1dp"
+        android:topLeftRadius="@dimen/indicator_corner_radius"
+        android:topRightRadius="@dimen/indicator_corner_radius" />
+
+</shape><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/drawable/indicator_bg_bottom.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/generated/source/r/androidTest/debug/com/handmark/pulltorefresh/library/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/generated/source/r/androidTest/debug/com/handmark/pulltorefresh/library/R.java	(revision )
+++ PullToRefreshLibrary/build/generated/source/r/androidTest/debug/com/handmark/pulltorefresh/library/R.java	(revision )
@@ -0,0 +1,104 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+package com.handmark.pulltorefresh.library;
+
+public final class R {
+	public static final class anim {
+		public static final int slide_in_from_bottom = 0x7f040000;
+		public static final int slide_in_from_top = 0x7f040001;
+		public static final int slide_out_to_bottom = 0x7f040002;
+		public static final int slide_out_to_top = 0x7f040003;
+	}
+	public static final class attr {
+		public static final int ptrAdapterViewBackground = 0x7f010010;
+		public static final int ptrAnimationStyle = 0x7f01000c;
+		public static final int ptrDrawable = 0x7f010006;
+		public static final int ptrDrawableBottom = 0x7f010012;
+		public static final int ptrDrawableEnd = 0x7f010008;
+		public static final int ptrDrawableStart = 0x7f010007;
+		public static final int ptrDrawableTop = 0x7f010011;
+		public static final int ptrHeaderBackground = 0x7f010001;
+		public static final int ptrHeaderSubTextColor = 0x7f010003;
+		public static final int ptrHeaderTextAppearance = 0x7f01000a;
+		public static final int ptrHeaderTextColor = 0x7f010002;
+		public static final int ptrListViewExtrasEnabled = 0x7f01000e;
+		public static final int ptrMode = 0x7f010004;
+		public static final int ptrOverScroll = 0x7f010009;
+		public static final int ptrRefreshableViewBackground = 0x7f010000;
+		public static final int ptrRotateDrawableWhilePulling = 0x7f01000f;
+		public static final int ptrScrollingWhileRefreshingEnabled = 0x7f01000d;
+		public static final int ptrShowIndicator = 0x7f010005;
+		public static final int ptrSubHeaderTextAppearance = 0x7f01000b;
+	}
+	public static final class dimen {
+		public static final int header_footer_left_right_padding = 0x7f060000;
+		public static final int header_footer_top_bottom_padding = 0x7f060001;
+		public static final int indicator_corner_radius = 0x7f060002;
+		public static final int indicator_internal_padding = 0x7f060003;
+		public static final int indicator_right_padding = 0x7f060004;
+	}
+	public static final class drawable {
+		public static final int default_ptr_flip = 0x7f020000;
+		public static final int default_ptr_rotate = 0x7f020001;
+		public static final int indicator_arrow = 0x7f020002;
+		public static final int indicator_bg_bottom = 0x7f020003;
+		public static final int indicator_bg_top = 0x7f020004;
+	}
+	public static final class id {
+		public static final int both = 0x7f070003;
+		public static final int disabled = 0x7f070004;
+		public static final int fl_inner = 0x7f07000c;
+		public static final int flip = 0x7f07000a;
+		public static final int gridview = 0x7f070000;
+		public static final int manualOnly = 0x7f070005;
+		public static final int pullDownFromTop = 0x7f070006;
+		public static final int pullFromEnd = 0x7f070007;
+		public static final int pullFromStart = 0x7f070008;
+		public static final int pullUpFromBottom = 0x7f070009;
+		public static final int pull_to_refresh_image = 0x7f07000d;
+		public static final int pull_to_refresh_progress = 0x7f07000e;
+		public static final int pull_to_refresh_sub_text = 0x7f070010;
+		public static final int pull_to_refresh_text = 0x7f07000f;
+		public static final int rotate = 0x7f07000b;
+		public static final int scrollview = 0x7f070001;
+		public static final int webview = 0x7f070002;
+	}
+	public static final class layout {
+		public static final int pull_to_refresh_header_horizontal = 0x7f030000;
+		public static final int pull_to_refresh_header_vertical = 0x7f030001;
+	}
+	public static final class string {
+		public static final int pull_to_refresh_from_bottom_pull_label = 0x7f050003;
+		public static final int pull_to_refresh_from_bottom_refreshing_label = 0x7f050004;
+		public static final int pull_to_refresh_from_bottom_release_label = 0x7f050005;
+		public static final int pull_to_refresh_pull_label = 0x7f050000;
+		public static final int pull_to_refresh_refreshing_label = 0x7f050001;
+		public static final int pull_to_refresh_release_label = 0x7f050002;
+	}
+	public static final class styleable {
+		public static final int[] PullToRefresh = { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f, 0x7f010010, 0x7f010011, 0x7f010012 };
+		public static final int PullToRefresh_ptrAdapterViewBackground = 16;
+		public static final int PullToRefresh_ptrAnimationStyle = 12;
+		public static final int PullToRefresh_ptrDrawable = 6;
+		public static final int PullToRefresh_ptrDrawableBottom = 18;
+		public static final int PullToRefresh_ptrDrawableEnd = 8;
+		public static final int PullToRefresh_ptrDrawableStart = 7;
+		public static final int PullToRefresh_ptrDrawableTop = 17;
+		public static final int PullToRefresh_ptrHeaderBackground = 1;
+		public static final int PullToRefresh_ptrHeaderSubTextColor = 3;
+		public static final int PullToRefresh_ptrHeaderTextAppearance = 10;
+		public static final int PullToRefresh_ptrHeaderTextColor = 2;
+		public static final int PullToRefresh_ptrListViewExtrasEnabled = 14;
+		public static final int PullToRefresh_ptrMode = 4;
+		public static final int PullToRefresh_ptrOverScroll = 9;
+		public static final int PullToRefresh_ptrRefreshableViewBackground = 0;
+		public static final int PullToRefresh_ptrRotateDrawableWhilePulling = 15;
+		public static final int PullToRefresh_ptrScrollingWhileRefreshingEnabled = 13;
+		public static final int PullToRefresh_ptrShowIndicator = 5;
+		public static final int PullToRefresh_ptrSubHeaderTextAppearance = 11;
+	}
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_bottom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_bottom.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/drawable/indicator_bg_bottom.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="0dp"
+        android:bottomRightRadius="0dp"
+        android:radius="1dp"
+        android:topLeftRadius="@dimen/indicator_corner_radius"
+        android:topRightRadius="@dimen/indicator_corner_radius" />
+
+</shape><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/drawable/indicator_bg_bottom.xml -->
\ No newline at end of file
Index: SlidingMeunlibrary/build/intermediates/bundles/debug/res/layout/slidingmenumain.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/intermediates/bundles/debug/res/layout/slidingmenumain.xml	(revision )
+++ SlidingMeunlibrary/build/intermediates/bundles/debug/res/layout/slidingmenumain.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.jeremyfeinstein.slidingmenu.lib.SlidingMenu xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/slidingmenumain"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" /><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/SlidingMeunlibrary/res/layout/slidingmenumain.xml -->
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/androidTest/java/com/zhu/ultrapulltorefreshlibrary/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/androidTest/java/com/zhu/ultrapulltorefreshlibrary/ExampleInstrumentedTest.java	(revision )
+++ ultrapulltorefreshlibrary/src/androidTest/java/com/zhu/ultrapulltorefreshlibrary/ExampleInstrumentedTest.java	(revision )
@@ -0,0 +1,26 @@
+package com.zhu.ultrapulltorefreshlibrary;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumentation test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.zhu.ultrapulltorefreshlibrary.test", appContext.getPackageName());
+    }
+}
Index: app/src/main/java/zhu/com/sortingdata/imagecycle/CycleViewPager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/imagecycle/CycleViewPager.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/imagecycle/CycleViewPager.java	(revision )
@@ -0,0 +1,128 @@
+package zhu.com.sortingdata.imagecycle;
+
+import android.content.Context;
+import android.database.DataSetObserver;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+
+public class CycleViewPager extends ViewPager {
+
+    private InnerPagerAdapter mAdapter;
+
+    public CycleViewPager(Context context) {
+        super( context);
+        setOnPageChangeListener( null);
+    }
+
+    public CycleViewPager(Context context, AttributeSet attrs) {
+        super( context, attrs);
+        setOnPageChangeListener( null);
+    }
+
+    @Override
+    public void setAdapter(PagerAdapter arg0) {
+        mAdapter = new InnerPagerAdapter( arg0);
+        super.setAdapter( mAdapter);
+        setCurrentItem(1);
+    }
+
+    @Override
+    public void setOnPageChangeListener(OnPageChangeListener listener) {
+        super.setOnPageChangeListener( new InnerOnPageChangeListener( listener));
+    }
+
+    private class InnerOnPageChangeListener implements OnPageChangeListener {
+
+        private OnPageChangeListener listener;
+        private int position;
+
+        public InnerOnPageChangeListener(OnPageChangeListener listener) {
+            this.listener = listener;
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int arg0) {
+            if(null != listener) {
+                listener.onPageScrollStateChanged( arg0);
+            }
+            if(arg0 == ViewPager.SCROLL_STATE_IDLE) {
+                if(position == mAdapter.getCount() - 1) {
+                    setCurrentItem( 1, false);
+                }
+                else if(position == 0) {
+                    setCurrentItem(mAdapter.getCount() - 2, false);
+                }
+            }
+        }
+
+        @Override
+        public void onPageScrolled(int arg0, float arg1, int arg2) {
+            if(null != listener) {
+                listener.onPageScrolled( arg0, arg1, arg2);
+            }
+        }
+
+        @Override
+        public void onPageSelected(int arg0) {
+            position = arg0;
+            if(null != listener) {
+                listener.onPageSelected( arg0);
+            }
+        }
+    }
+
+    private class InnerPagerAdapter extends PagerAdapter {
+
+        private PagerAdapter adapter;
+
+        public InnerPagerAdapter(PagerAdapter adapter) {
+            this.adapter = adapter;
+            adapter.registerDataSetObserver( new DataSetObserver() {
+
+                @Override
+                public void onChanged() {
+                    notifyDataSetChanged();
+                }
+
+                @Override
+                public void onInvalidated() {
+                    notifyDataSetChanged();
+                }
+
+            });
+        }
+
+        @Override
+        public int getCount() {
+            return adapter.getCount() + 2;
+        }
+
+        @Override
+        public boolean isViewFromObject(View arg0, Object arg1) {
+            return adapter.isViewFromObject( arg0, arg1);
+        }
+
+        @Override
+        public Object instantiateItem(ViewGroup container, int position) {
+            if(position == 0) {
+                position = adapter.getCount() - 1;
+            }
+            else if(position == adapter.getCount() + 1) {
+                position = 0;
+            }
+            else {
+                position -= 1;
+            }
+            return adapter.instantiateItem( container, position);
+        }
+
+        @Override
+        public void destroyItem(ViewGroup container, int position, Object object) {
+            adapter.destroyItem( container, position, object);
+        }
+
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_out_to_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_out_to_top.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/anim/slide_out_to_top.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:duration="@android:integer/config_longAnimTime"
+    android:fromYDelta="0"
+    android:toYDelta="-100%p" />
+<!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/anim/slide_out_to_top.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pl/values-pl.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pl/values-pl.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-pl/values-pl.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-pl/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Pociągnij, aby odświeżyć…</string>
+    <string name="pull_to_refresh_refreshing_label">Wczytywanie…</string>
+    <string name="pull_to_refresh_release_label">Puść, aby odświeżyć…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/tmp/packageDebugJar/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/tmp/packageDebugJar/MANIFEST.MF	(revision )
+++ SlidingMeunlibrary/build/tmp/packageDebugJar/MANIFEST.MF	(revision )
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHousePath.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHousePath.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/header/StoreHousePath.java	(revision )
@@ -0,0 +1,369 @@
+package in.srain.cube.views.ptr.header;
+
+import android.util.SparseArray;
+
+import java.util.ArrayList;
+
+/**
+ * Created by srain on 11/7/14.
+ */
+public class StoreHousePath {
+
+    private static final SparseArray<float[]> sPointList;
+
+    static {
+        sPointList = new SparseArray<float[]>();
+        float[][] LETTERS = new float[][]{
+                new float[]{
+                        // A
+                        24, 0, 1, 22,
+                        1, 22, 1, 72,
+                        24, 0, 47, 22,
+                        47, 22, 47, 72,
+                        1, 48, 47, 48
+                },
+
+                new float[]{
+                        // B
+                        0, 0, 0, 72,
+                        0, 0, 37, 0,
+                        37, 0, 47, 11,
+                        47, 11, 47, 26,
+                        47, 26, 38, 36,
+                        38, 36, 0, 36,
+                        38, 36, 47, 46,
+                        47, 46, 47, 61,
+                        47, 61, 38, 71,
+                        37, 72, 0, 72,
+                },
+
+                new float[]{
+                        // C
+                        47, 0, 0, 0,
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                },
+
+                new float[]{
+                        // D
+                        0, 0, 0, 72,
+                        0, 0, 24, 0,
+                        24, 0, 47, 22,
+                        47, 22, 47, 48,
+                        47, 48, 23, 72,
+                        23, 72, 0, 72,
+                },
+
+                new float[]{
+                        // E
+                        0, 0, 0, 72,
+                        0, 0, 47, 0,
+                        0, 36, 37, 36,
+                        0, 72, 47, 72,
+                },
+
+                new float[]{
+                        // F
+                        0, 0, 0, 72,
+                        0, 0, 47, 0,
+                        0, 36, 37, 36,
+                },
+
+                new float[]{
+                        // G
+                        47, 23, 47, 0,
+                        47, 0, 0, 0,
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                        47, 72, 47, 48,
+                        47, 48, 24, 48,
+                },
+
+                new float[]{
+                        // H
+                        0, 0, 0, 72,
+                        0, 36, 47, 36,
+                        47, 0, 47, 72,
+                },
+
+                new float[]{
+                        // I
+                        0, 0, 47, 0,
+                        24, 0, 24, 72,
+                        0, 72, 47, 72,
+                },
+
+                new float[]{
+                        // J
+                        47, 0, 47, 72,
+                        47, 72, 24, 72,
+                        24, 72, 0, 48,
+                },
+
+                new float[]{
+                        // K
+                        0, 0, 0, 72,
+                        47, 0, 3, 33,
+                        3, 38, 47, 72,
+                },
+
+                new float[]{
+                        // L
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                },
+
+                new float[]{
+                        // M
+                        0, 0, 0, 72,
+                        0, 0, 24, 23,
+                        24, 23, 47, 0,
+                        47, 0, 47, 72,
+                },
+
+                new float[]{
+                        // N
+                        0, 0, 0, 72,
+                        0, 0, 47, 72,
+                        47, 72, 47, 0,
+                },
+
+                new float[]{
+                        // O
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                        47, 72, 47, 0,
+                        47, 0, 0, 0,
+                },
+
+                new float[]{
+                        // P
+                        0, 0, 0, 72,
+                        0, 0, 47, 0,
+                        47, 0, 47, 36,
+                        47, 36, 0, 36,
+                },
+
+                new float[]{
+                        // Q
+                        0, 0, 0, 72,
+                        0, 72, 23, 72,
+                        23, 72, 47, 48,
+                        47, 48, 47, 0,
+                        47, 0, 0, 0,
+                        24, 28, 47, 71,
+                },
+
+                new float[]{
+                        // R
+                        0, 0, 0, 72,
+                        0, 0, 47, 0,
+                        47, 0, 47, 36,
+                        47, 36, 0, 36,
+                        0, 37, 47, 72,
+                },
+
+                new float[]{
+                        // S
+                        47, 0, 0, 0,
+                        0, 0, 0, 36,
+                        0, 36, 47, 36,
+                        47, 36, 47, 72,
+                        47, 72, 0, 72,
+                },
+
+                new float[]{
+                        // T
+                        0, 0, 47, 0,
+                        24, 0, 24, 72,
+                },
+
+                new float[]{
+                        // U
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                        47, 72, 47, 0,
+                },
+
+                new float[]{
+                        // V
+                        0, 0, 24, 72,
+                        24, 72, 47, 0,
+                },
+
+                new float[]{
+                        // W
+                        0, 0, 0, 72,
+                        0, 72, 24, 49,
+                        24, 49, 47, 72,
+                        47, 72, 47, 0
+                },
+
+                new float[]{
+                        // X
+                        0, 0, 47, 72,
+                        47, 0, 0, 72
+                },
+
+                new float[]{
+                        // Y
+                        0, 0, 24, 23,
+                        47, 0, 24, 23,
+                        24, 23, 24, 72
+                },
+
+                new float[]{
+                        // Z
+                        0, 0, 47, 0,
+                        47, 0, 0, 72,
+                        0, 72, 47, 72
+                },
+        };
+        final float[][] NUMBERS = new float[][]{
+                new float[]{
+                        // 0
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                        47, 72, 47, 0,
+                        47, 0, 0, 0,
+                },
+                new float[]{
+                        // 1
+                        24, 0, 24, 72,
+                },
+
+                new float[]{
+                        // 2
+                        0, 0, 47, 0,
+                        47, 0, 47, 36,
+                        47, 36, 0, 36,
+                        0, 36, 0, 72,
+                        0, 72, 47, 72
+                },
+
+                new float[]{
+                        // 3
+                        0, 0, 47, 0,
+                        47, 0, 47, 36,
+                        47, 36, 0, 36,
+                        47, 36, 47, 72,
+                        47, 72, 0, 72,
+                },
+
+                new float[]{
+                        // 4
+                        0, 0, 0, 36,
+                        0, 36, 47, 36,
+                        47, 0, 47, 72,
+                },
+
+                new float[]{
+                        // 5
+                        0, 0, 0, 36,
+                        0, 36, 47, 36,
+                        47, 36, 47, 72,
+                        47, 72, 0, 72,
+                        0, 0, 47, 0
+                },
+
+                new float[]{
+                        // 6
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                        47, 72, 47, 36,
+                        47, 36, 0, 36
+                },
+
+                new float[]{
+                        // 7
+                        0, 0, 47, 0,
+                        47, 0, 47, 72
+                },
+
+                new float[]{
+                        // 8
+                        0, 0, 0, 72,
+                        0, 72, 47, 72,
+                        47, 72, 47, 0,
+                        47, 0, 0, 0,
+                        0, 36, 47, 36
+                },
+
+                new float[]{
+                        // 9
+                        47, 0, 0, 0,
+                        0, 0, 0, 36,
+                        0, 36, 47, 36,
+                        47, 0, 47, 72,
+                }
+        };
+        // A - Z
+        for (int i = 0; i < LETTERS.length; i++) {
+            sPointList.append(i + 65, LETTERS[i]);
+        }
+        // a - z
+        for (int i = 0; i < LETTERS.length; i++) {
+            sPointList.append(i + 65 + 32, LETTERS[i]);
+        }
+        // 0 - 9
+        for (int i = 0; i < NUMBERS.length; i++) {
+            sPointList.append(i + 48, NUMBERS[i]);
+        }
+        // blank
+        addChar(' ', new float[]{});
+        // -
+        addChar('-', new float[]{
+                0, 36, 47, 36
+        });
+        // .
+        addChar('.', new float[]{
+                24, 60, 24, 72
+        });
+    }
+
+    public static void addChar(char c, float[] points) {
+        sPointList.append(c, points);
+    }
+
+    public static ArrayList<float[]> getPath(String str) {
+        return getPath(str, 1, 14);
+    }
+
+    /**
+     * @param str
+     * @param scale
+     * @param gapBetweenLetter
+     * @return ArrayList of float[] {x1, y1, x2, y2}
+     */
+    public static ArrayList<float[]> getPath(String str, float scale, int gapBetweenLetter) {
+        ArrayList<float[]> list = new ArrayList<float[]>();
+        float offsetForWidth = 0;
+        for (int i = 0; i < str.length(); i++) {
+            int pos = str.charAt(i);
+            int key = sPointList.indexOfKey(pos);
+            if (key == -1) {
+                continue;
+            }
+            float[] points = sPointList.get(pos);
+            int pointCount = points.length / 4;
+
+            for (int j = 0; j < pointCount; j++) {
+                float[] line = new float[4];
+                for (int k = 0; k < 4; k++) {
+                    float l = points[j * 4 + k];
+                    // x
+                    if (k % 2 == 0) {
+                        line[k] = (l + offsetForWidth) * scale;
+                    }
+                    // y
+                    else {
+                        line[k] = l * scale;
+                    }
+                }
+                list.add(line);
+            }
+            offsetForWidth += 57 + gapBetweenLetter;
+        }
+        return list;
+    }
+}
Index: cropperimagelibrary/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/res/values/colors.xml	(revision )
+++ cropperimagelibrary/src/main/res/values/colors.xml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <color name="white_translucent">#AAFFFFFF</color>
+    <color name="black_translucent">#B0000000</color>
+
+    <color name="border">@color/white_translucent</color>
+    <color name="guideline">@color/white_translucent</color>
+    <color name="corner">@android:color/white</color>
+    <color name="surrounding_area">@color/black_translucent</color>
+
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/androidTest/debug/merger.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/androidTest/debug/merger.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/incremental/mergeAssets/androidTest/debug/merger.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="debug"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\build\intermediates\bundles\debug\assets"/></dataSet><dataSet config="main"><source path="F:\ZZTAndroidStuidio2\SortingData\PullToRefreshLibrary\src\androidTest\assets"/></dataSet></merger>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshBase.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshBase.java	(revision )
@@ -0,0 +1,1653 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.drawable.Drawable;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.ViewGroup;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.Interpolator;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+
+import com.handmark.pulltorefresh.library.internal.FlipLoadingLayout;
+import com.handmark.pulltorefresh.library.internal.LoadingLayout;
+import com.handmark.pulltorefresh.library.internal.RotateLoadingLayout;
+import com.handmark.pulltorefresh.library.internal.Utils;
+import com.handmark.pulltorefresh.library.internal.ViewCompat;
+
+public abstract class PullToRefreshBase<T extends View> extends LinearLayout implements IPullToRefresh<T> {
+
+	// ===========================================================
+	// Constants
+	// ===========================================================
+
+	static final boolean DEBUG = true;
+
+	static final boolean USE_HW_LAYERS = false;
+
+	static final String LOG_TAG = "PullToRefresh";
+
+	static final float FRICTION = 2.0f;
+
+	public static final int SMOOTH_SCROLL_DURATION_MS = 200;
+	public static final int SMOOTH_SCROLL_LONG_DURATION_MS = 325;
+	static final int DEMO_SCROLL_INTERVAL = 225;
+
+	static final String STATE_STATE = "ptr_state";
+	static final String STATE_MODE = "ptr_mode";
+	static final String STATE_CURRENT_MODE = "ptr_current_mode";
+	static final String STATE_SCROLLING_REFRESHING_ENABLED = "ptr_disable_scrolling";
+	static final String STATE_SHOW_REFRESHING_VIEW = "ptr_show_refreshing_view";
+	static final String STATE_SUPER = "ptr_super";
+
+	// ===========================================================
+	// Fields
+	// ===========================================================
+
+	private int mTouchSlop;
+	private float mLastMotionX, mLastMotionY;
+	private float mInitialMotionX, mInitialMotionY;
+
+	private boolean mIsBeingDragged = false;
+	private State mState = State.RESET;
+	private Mode mMode = Mode.getDefault();
+
+	private Mode mCurrentMode;
+	T mRefreshableView;
+	private FrameLayout mRefreshableViewWrapper;
+
+	private boolean mShowViewWhileRefreshing = true;
+	private boolean mScrollingWhileRefreshingEnabled = false;
+	private boolean mFilterTouchEvents = true;
+	private boolean mOverScrollEnabled = true;
+	private boolean mLayoutVisibilityChangesEnabled = true;
+
+	private Interpolator mScrollAnimationInterpolator;
+	private AnimationStyle mLoadingAnimationStyle = AnimationStyle.getDefault();
+
+	private LoadingLayout mHeaderLayout;
+	private LoadingLayout mFooterLayout;
+
+	private OnRefreshListener<T> mOnRefreshListener;
+	private OnRefreshListener2<T> mOnRefreshListener2;
+	private OnPullEventListener<T> mOnPullEventListener;
+
+	private SmoothScrollRunnable mCurrentSmoothScrollRunnable;
+
+	// ===========================================================
+	// Constructors
+	// ===========================================================
+
+	public PullToRefreshBase(Context context) {
+		super(context);
+		init(context, null);
+	}
+
+	public PullToRefreshBase(Context context, AttributeSet attrs) {
+		super(context, attrs);
+		init(context, attrs);
+	}
+
+	public PullToRefreshBase(Context context, Mode mode) {
+		super(context);
+		mMode = mode;
+		init(context, null);
+	}
+
+	public PullToRefreshBase(Context context, Mode mode, AnimationStyle animStyle) {
+		super(context);
+		mMode = mode;
+		mLoadingAnimationStyle = animStyle;
+		init(context, null);
+	}
+
+	@Override
+	public void addView(View child, int index, ViewGroup.LayoutParams params) {
+		if (DEBUG) {
+			Log.d(LOG_TAG, "addView: " + child.getClass().getSimpleName());
+		}
+
+		final T refreshableView = getRefreshableView();
+
+		if (refreshableView instanceof ViewGroup) {
+			((ViewGroup) refreshableView).addView(child, index, params);
+		} else {
+			throw new UnsupportedOperationException("Refreshable View is not a ViewGroup so can't addView");
+		}
+	}
+
+	@Override
+	public final boolean demo() {
+		if (mMode.showHeaderLoadingLayout() && isReadyForPullStart()) {
+			smoothScrollToAndBack(-getHeaderSize() * 2);
+			return true;
+		} else if (mMode.showFooterLoadingLayout() && isReadyForPullEnd()) {
+			smoothScrollToAndBack(getFooterSize() * 2);
+			return true;
+		}
+
+		return false;
+	}
+
+	@Override
+	public final Mode getCurrentMode() {
+		return mCurrentMode;
+	}
+
+	@Override
+	public final boolean getFilterTouchEvents() {
+		return mFilterTouchEvents;
+	}
+
+	@Override
+	public final ILoadingLayout getLoadingLayoutProxy() {
+		return getLoadingLayoutProxy(true, true);
+	}
+
+	@Override
+	public final ILoadingLayout getLoadingLayoutProxy(boolean includeStart, boolean includeEnd) {
+		return createLoadingLayoutProxy(includeStart, includeEnd);
+	}
+
+	@Override
+	public final Mode getMode() {
+		return mMode;
+	}
+
+	@Override
+	public final T getRefreshableView() {
+		return mRefreshableView;
+	}
+
+	@Override
+	public final boolean getShowViewWhileRefreshing() {
+		return mShowViewWhileRefreshing;
+	}
+
+	@Override
+	public final State getState() {
+		return mState;
+	}
+
+	/**
+	 * @deprecated See {@link #isScrollingWhileRefreshingEnabled()}.
+	 */
+	public final boolean isDisableScrollingWhileRefreshing() {
+		return !isScrollingWhileRefreshingEnabled();
+	}
+
+	@Override
+	public final boolean isPullToRefreshEnabled() {
+		return mMode.permitsPullToRefresh();
+	}
+
+	@Override
+	public final boolean isPullToRefreshOverScrollEnabled() {
+		return VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD && mOverScrollEnabled
+				&& OverscrollHelper.isAndroidOverScrollEnabled(mRefreshableView);
+	}
+
+	@Override
+	public final boolean isRefreshing() {
+		return mState == State.REFRESHING || mState == State.MANUAL_REFRESHING;
+	}
+
+	@Override
+	public final boolean isScrollingWhileRefreshingEnabled() {
+		return mScrollingWhileRefreshingEnabled;
+	}
+
+	@Override
+	public final boolean onInterceptTouchEvent(MotionEvent event) {
+
+		if (!isPullToRefreshEnabled()) {
+			return false;
+		}
+
+		final int action = event.getAction();
+
+		if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
+			mIsBeingDragged = false;
+			return false;
+		}
+
+		if (action != MotionEvent.ACTION_DOWN && mIsBeingDragged) {
+			return true;
+		}
+
+		switch (action) {
+			case MotionEvent.ACTION_MOVE: {
+				// If we're refreshing, and the flag is set. Eat all MOVE events
+				if (!mScrollingWhileRefreshingEnabled && isRefreshing()) {
+					return true;
+				}
+
+				if (isReadyForPull()) {
+					final float y = event.getY(), x = event.getX();
+					final float diff, oppositeDiff, absDiff;
+
+					// We need to use the correct values, based on scroll
+					// direction
+					switch (getPullToRefreshScrollDirection()) {
+						case HORIZONTAL:
+							diff = x - mLastMotionX;
+							oppositeDiff = y - mLastMotionY;
+							break;
+						case VERTICAL:
+						default:
+							diff = y - mLastMotionY;
+							oppositeDiff = x - mLastMotionX;
+							break;
+					}
+					absDiff = Math.abs(diff);
+
+					if (absDiff > mTouchSlop && (!mFilterTouchEvents || absDiff > Math.abs(oppositeDiff))) {
+						if (mMode.showHeaderLoadingLayout() && diff >= 1f && isReadyForPullStart()) {
+							mLastMotionY = y;
+							mLastMotionX = x;
+							mIsBeingDragged = true;
+							if (mMode == Mode.BOTH) {
+								mCurrentMode = Mode.PULL_FROM_START;
+							}
+						} else if (mMode.showFooterLoadingLayout() && diff <= -1f && isReadyForPullEnd()) {
+							mLastMotionY = y;
+							mLastMotionX = x;
+							mIsBeingDragged = true;
+							if (mMode == Mode.BOTH) {
+								mCurrentMode = Mode.PULL_FROM_END;
+							}
+						}
+					}
+				}
+				break;
+			}
+			case MotionEvent.ACTION_DOWN: {
+				if (isReadyForPull()) {
+					mLastMotionY = mInitialMotionY = event.getY();
+					mLastMotionX = mInitialMotionX = event.getX();
+					mIsBeingDragged = false;
+				}
+				break;
+			}
+		}
+
+		return mIsBeingDragged;
+	}
+
+	@Override
+	public final void onRefreshComplete() {
+		if (isRefreshing()) {
+			setState(State.RESET);
+		}
+	}
+
+	@Override
+	public final boolean onTouchEvent(MotionEvent event) {
+
+		if (!isPullToRefreshEnabled()) {
+			return false;
+		}
+
+		// If we're refreshing, and the flag is set. Eat the event
+		if (!mScrollingWhileRefreshingEnabled && isRefreshing()) {
+			return true;
+		}
+
+		if (event.getAction() == MotionEvent.ACTION_DOWN && event.getEdgeFlags() != 0) {
+			return false;
+		}
+
+		switch (event.getAction()) {
+			case MotionEvent.ACTION_MOVE: {
+				if (mIsBeingDragged) {
+					mLastMotionY = event.getY();
+					mLastMotionX = event.getX();
+					pullEvent();
+					return true;
+				}
+				break;
+			}
+
+			case MotionEvent.ACTION_DOWN: {
+				if (isReadyForPull()) {
+					mLastMotionY = mInitialMotionY = event.getY();
+					mLastMotionX = mInitialMotionX = event.getX();
+					return true;
+				}
+				break;
+			}
+
+			case MotionEvent.ACTION_CANCEL:
+			case MotionEvent.ACTION_UP: {
+				if (mIsBeingDragged) {
+					mIsBeingDragged = false;
+
+					if (mState == State.RELEASE_TO_REFRESH
+							&& (null != mOnRefreshListener || null != mOnRefreshListener2)) {
+						setState(State.REFRESHING, true);
+						return true;
+					}
+
+					// If we're already refreshing, just scroll back to the top
+					if (isRefreshing()) {
+						smoothScrollTo(0);
+						return true;
+					}
+
+					// If we haven't returned by here, then we're not in a state
+					// to pull, so just reset
+					setState(State.RESET);
+
+					return true;
+				}
+				break;
+			}
+		}
+
+		return false;
+	}
+
+	public final void setScrollingWhileRefreshingEnabled(boolean allowScrollingWhileRefreshing) {
+		mScrollingWhileRefreshingEnabled = allowScrollingWhileRefreshing;
+	}
+
+	/**
+	 * @deprecated See {@link #setScrollingWhileRefreshingEnabled(boolean)}
+	 */
+	public void setDisableScrollingWhileRefreshing(boolean disableScrollingWhileRefreshing) {
+		setScrollingWhileRefreshingEnabled(!disableScrollingWhileRefreshing);
+	}
+
+	@Override
+	public final void setFilterTouchEvents(boolean filterEvents) {
+		mFilterTouchEvents = filterEvents;
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy()}.
+	 */
+	public void setLastUpdatedLabel(CharSequence label) {
+		getLoadingLayoutProxy().setLastUpdatedLabel(label);
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy()}.
+	 */
+	public void setLoadingDrawable(Drawable drawable) {
+		getLoadingLayoutProxy().setLoadingDrawable(drawable);
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy(boolean, boolean)}.
+	 */
+	public void setLoadingDrawable(Drawable drawable, Mode mode) {
+		getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setLoadingDrawable(
+				drawable);
+	}
+
+	@Override
+	public void setLongClickable(boolean longClickable) {
+		getRefreshableView().setLongClickable(longClickable);
+	}
+
+	@Override
+	public final void setMode(Mode mode) {
+		if (mode != mMode) {
+			if (DEBUG) {
+				Log.d(LOG_TAG, "Setting mode to: " + mode);
+			}
+			mMode = mode;
+			updateUIForMode();
+		}
+	}
+
+	public void setOnPullEventListener(OnPullEventListener<T> listener) {
+		mOnPullEventListener = listener;
+	}
+
+	@Override
+	public final void setOnRefreshListener(OnRefreshListener<T> listener) {
+		mOnRefreshListener = listener;
+		mOnRefreshListener2 = null;
+	}
+
+	@Override
+	public final void setOnRefreshListener(OnRefreshListener2<T> listener) {
+		mOnRefreshListener2 = listener;
+		mOnRefreshListener = null;
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy()}.
+	 */
+	public void setPullLabel(CharSequence pullLabel) {
+		getLoadingLayoutProxy().setPullLabel(pullLabel);
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy(boolean, boolean)}.
+	 */
+	public void setPullLabel(CharSequence pullLabel, Mode mode) {
+		getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setPullLabel(pullLabel);
+	}
+
+	/**
+	 * @param enable Whether Pull-To-Refresh should be used
+	 * @deprecated This simple calls setMode with an appropriate mode based on
+	 *             the passed value.
+	 */
+	public final void setPullToRefreshEnabled(boolean enable) {
+		setMode(enable ? Mode.getDefault() : Mode.DISABLED);
+	}
+
+	@Override
+	public final void setPullToRefreshOverScrollEnabled(boolean enabled) {
+		mOverScrollEnabled = enabled;
+	}
+
+	@Override
+	public final void setRefreshing() {
+		setRefreshing(true);
+	}
+
+	@Override
+	public final void setRefreshing(boolean doScroll) {
+		if (!isRefreshing()) {
+			setState(State.MANUAL_REFRESHING, doScroll);
+		}
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy()}.
+	 */
+	public void setRefreshingLabel(CharSequence refreshingLabel) {
+		getLoadingLayoutProxy().setRefreshingLabel(refreshingLabel);
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy(boolean, boolean)}.
+	 */
+	public void setRefreshingLabel(CharSequence refreshingLabel, Mode mode) {
+		getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setRefreshingLabel(
+				refreshingLabel);
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy()}.
+	 */
+	public void setReleaseLabel(CharSequence releaseLabel) {
+		setReleaseLabel(releaseLabel, Mode.BOTH);
+	}
+
+	/**
+	 * @deprecated You should now call this method on the result of
+	 *             {@link #getLoadingLayoutProxy(boolean, boolean)}.
+	 */
+	public void setReleaseLabel(CharSequence releaseLabel, Mode mode) {
+		getLoadingLayoutProxy(mode.showHeaderLoadingLayout(), mode.showFooterLoadingLayout()).setReleaseLabel(
+				releaseLabel);
+	}
+
+	public void setScrollAnimationInterpolator(Interpolator interpolator) {
+		mScrollAnimationInterpolator = interpolator;
+	}
+
+	@Override
+	public final void setShowViewWhileRefreshing(boolean showView) {
+		mShowViewWhileRefreshing = showView;
+	}
+
+	/**
+	 * @return Either {@link Orientation#VERTICAL} or
+	 *         {@link Orientation#HORIZONTAL} depending on the scroll direction.
+	 */
+	public abstract Orientation getPullToRefreshScrollDirection();
+
+	final void setState(State state, final boolean... params) {
+		mState = state;
+		if (DEBUG) {
+			Log.d(LOG_TAG, "State: " + mState.name());
+		}
+
+		switch (mState) {
+			case RESET:
+				onReset();
+				break;
+			case PULL_TO_REFRESH:
+				onPullToRefresh();
+				break;
+			case RELEASE_TO_REFRESH:
+				onReleaseToRefresh();
+				break;
+			case REFRESHING:
+			case MANUAL_REFRESHING:
+				onRefreshing(params[0]);
+				break;
+			case OVERSCROLLING:
+				// NO-OP
+				break;
+		}
+
+		// Call OnPullEventListener
+		if (null != mOnPullEventListener) {
+			mOnPullEventListener.onPullEvent(this, mState, mCurrentMode);
+		}
+	}
+
+	/**
+	 * Used internally for adding view. Need because we override addView to
+	 * pass-through to the Refreshable View
+	 */
+	protected final void addViewInternal(View child, int index, ViewGroup.LayoutParams params) {
+		super.addView(child, index, params);
+	}
+
+	/**
+	 * Used internally for adding view. Need because we override addView to
+	 * pass-through to the Refreshable View
+	 */
+	protected final void addViewInternal(View child, ViewGroup.LayoutParams params) {
+		super.addView(child, -1, params);
+	}
+
+	protected LoadingLayout createLoadingLayout(Context context, Mode mode, TypedArray attrs) {
+		LoadingLayout layout = mLoadingAnimationStyle.createLoadingLayout(context, mode,
+				getPullToRefreshScrollDirection(), attrs);
+		layout.setVisibility(View.INVISIBLE);
+		return layout;
+	}
+
+	/**
+	 * Used internally for {@link #getLoadingLayoutProxy(boolean, boolean)}.
+	 * Allows derivative classes to include any extra LoadingLayouts.
+	 */
+	protected LoadingLayoutProxy createLoadingLayoutProxy(final boolean includeStart, final boolean includeEnd) {
+		LoadingLayoutProxy proxy = new LoadingLayoutProxy();
+
+		if (includeStart && mMode.showHeaderLoadingLayout()) {
+			proxy.addLayout(mHeaderLayout);
+		}
+		if (includeEnd && mMode.showFooterLoadingLayout()) {
+			proxy.addLayout(mFooterLayout);
+		}
+
+		return proxy;
+	}
+
+	/**
+	 * This is implemented by derived classes to return the created View. If you
+	 * need to use a custom View (such as a custom ListView), override this
+	 * method and return an instance of your custom class.
+	 * <p/>
+	 * Be sure to set the ID of the view in this method, especially if you're
+	 * using a ListActivity or ListFragment.
+	 * 
+	 * @param context Context to create view with
+	 * @param attrs AttributeSet from wrapped class. Means that anything you
+	 *            include in the XML layout declaration will be routed to the
+	 *            created View
+	 * @return New instance of the Refreshable View
+	 */
+	protected abstract T createRefreshableView(Context context, AttributeSet attrs);
+
+	protected final void disableLoadingLayoutVisibilityChanges() {
+		mLayoutVisibilityChangesEnabled = false;
+	}
+
+	protected final LoadingLayout getFooterLayout() {
+		return mFooterLayout;
+	}
+
+	protected final int getFooterSize() {
+		return mFooterLayout.getContentSize();
+	}
+
+	protected final LoadingLayout getHeaderLayout() {
+		return mHeaderLayout;
+	}
+
+	protected final int getHeaderSize() {
+		return mHeaderLayout.getContentSize();
+	}
+
+	protected int getPullToRefreshScrollDuration() {
+		return SMOOTH_SCROLL_DURATION_MS;
+	}
+
+	protected int getPullToRefreshScrollDurationLonger() {
+		return SMOOTH_SCROLL_LONG_DURATION_MS;
+	}
+
+	protected FrameLayout getRefreshableViewWrapper() {
+		return mRefreshableViewWrapper;
+	}
+
+	/**
+	 * Allows Derivative classes to handle the XML Attrs without creating a
+	 * TypedArray themsevles
+	 * 
+	 * @param a - TypedArray of PullToRefresh Attributes
+	 */
+	protected void handleStyledAttributes(TypedArray a) {
+	}
+
+	/**
+	 * Implemented by derived class to return whether the View is in a state
+	 * where the user can Pull to Refresh by scrolling from the end.
+	 * 
+	 * @return true if the View is currently in the correct state (for example,
+	 *         bottom of a ListView)
+	 */
+	protected abstract boolean isReadyForPullEnd();
+
+	/**
+	 * Implemented by derived class to return whether the View is in a state
+	 * where the user can Pull to Refresh by scrolling from the start.
+	 * 
+	 * @return true if the View is currently the correct state (for example, top
+	 *         of a ListView)
+	 */
+	protected abstract boolean isReadyForPullStart();
+
+	/**
+	 * Called by {@link #onRestoreInstanceState(Parcelable)} so that derivative
+	 * classes can handle their saved instance state.
+	 * 
+	 * @param savedInstanceState - Bundle which contains saved instance state.
+	 */
+	protected void onPtrRestoreInstanceState(Bundle savedInstanceState) {
+	}
+
+	/**
+	 * Called by {@link #onSaveInstanceState()} so that derivative classes can
+	 * save their instance state.
+	 * 
+	 * @param saveState - Bundle to be updated with saved state.
+	 */
+	protected void onPtrSaveInstanceState(Bundle saveState) {
+	}
+
+	/**
+	 * Called when the UI has been to be updated to be in the
+	 * {@link State#PULL_TO_REFRESH} state.
+	 */
+	protected void onPullToRefresh() {
+		switch (mCurrentMode) {
+			case PULL_FROM_END:
+				mFooterLayout.pullToRefresh();
+				break;
+			case PULL_FROM_START:
+				mHeaderLayout.pullToRefresh();
+				break;
+			default:
+				// NO-OP
+				break;
+		}
+	}
+
+	/**
+	 * Called when the UI has been to be updated to be in the
+	 * {@link State#REFRESHING} or {@link State#MANUAL_REFRESHING} state.
+	 * 
+	 * @param doScroll - Whether the UI should scroll for this event.
+	 */
+	protected void onRefreshing(final boolean doScroll) {
+		if (mMode.showHeaderLoadingLayout()) {
+			mHeaderLayout.refreshing();
+		}
+		if (mMode.showFooterLoadingLayout()) {
+			mFooterLayout.refreshing();
+		}
+
+		if (doScroll) {
+			if (mShowViewWhileRefreshing) {
+
+				// Call Refresh Listener when the Scroll has finished
+				OnSmoothScrollFinishedListener listener = new OnSmoothScrollFinishedListener() {
+					@Override
+					public void onSmoothScrollFinished() {
+						callRefreshListener();
+					}
+				};
+
+				switch (mCurrentMode) {
+					case MANUAL_REFRESH_ONLY:
+					case PULL_FROM_END:
+						smoothScrollTo(getFooterSize(), listener);
+						break;
+					default:
+					case PULL_FROM_START:
+						smoothScrollTo(-getHeaderSize(), listener);
+						break;
+				}
+			} else {
+				smoothScrollTo(0);
+			}
+		} else {
+			// We're not scrolling, so just call Refresh Listener now
+			callRefreshListener();
+		}
+	}
+
+	/**
+	 * Called when the UI has been to be updated to be in the
+	 * {@link State#RELEASE_TO_REFRESH} state.
+	 */
+	protected void onReleaseToRefresh() {
+		switch (mCurrentMode) {
+			case PULL_FROM_END:
+				mFooterLayout.releaseToRefresh();
+				break;
+			case PULL_FROM_START:
+				mHeaderLayout.releaseToRefresh();
+				break;
+			default:
+				// NO-OP
+				break;
+		}
+	}
+
+	/**
+	 * Called when the UI has been to be updated to be in the
+	 * {@link State#RESET} state.
+	 */
+	protected void onReset() {
+		mIsBeingDragged = false;
+		mLayoutVisibilityChangesEnabled = true;
+
+		// Always reset both layouts, just in case...
+		mHeaderLayout.reset();
+		mFooterLayout.reset();
+
+		smoothScrollTo(0);
+	}
+
+	@Override
+	protected final void onRestoreInstanceState(Parcelable state) {
+		if (state instanceof Bundle) {
+			Bundle bundle = (Bundle) state;
+
+			setMode(Mode.mapIntToValue(bundle.getInt(STATE_MODE, 0)));
+			mCurrentMode = Mode.mapIntToValue(bundle.getInt(STATE_CURRENT_MODE, 0));
+
+			mScrollingWhileRefreshingEnabled = bundle.getBoolean(STATE_SCROLLING_REFRESHING_ENABLED, false);
+			mShowViewWhileRefreshing = bundle.getBoolean(STATE_SHOW_REFRESHING_VIEW, true);
+
+			// Let super Restore Itself
+			super.onRestoreInstanceState(bundle.getParcelable(STATE_SUPER));
+
+			State viewState = State.mapIntToValue(bundle.getInt(STATE_STATE, 0));
+			if (viewState == State.REFRESHING || viewState == State.MANUAL_REFRESHING) {
+				setState(viewState, true);
+			}
+
+			// Now let derivative classes restore their state
+			onPtrRestoreInstanceState(bundle);
+			return;
+		}
+
+		super.onRestoreInstanceState(state);
+	}
+
+	@Override
+	protected final Parcelable onSaveInstanceState() {
+		Bundle bundle = new Bundle();
+
+		// Let derivative classes get a chance to save state first, that way we
+		// can make sure they don't overrite any of our values
+		onPtrSaveInstanceState(bundle);
+
+		bundle.putInt(STATE_STATE, mState.getIntValue());
+		bundle.putInt(STATE_MODE, mMode.getIntValue());
+		bundle.putInt(STATE_CURRENT_MODE, mCurrentMode.getIntValue());
+		bundle.putBoolean(STATE_SCROLLING_REFRESHING_ENABLED, mScrollingWhileRefreshingEnabled);
+		bundle.putBoolean(STATE_SHOW_REFRESHING_VIEW, mShowViewWhileRefreshing);
+		bundle.putParcelable(STATE_SUPER, super.onSaveInstanceState());
+
+		return bundle;
+	}
+
+	@Override
+	protected final void onSizeChanged(int w, int h, int oldw, int oldh) {
+		if (DEBUG) {
+			Log.d(LOG_TAG, String.format("onSizeChanged. W: %d, H: %d", w, h));
+		}
+
+		super.onSizeChanged(w, h, oldw, oldh);
+
+		// We need to update the header/footer when our size changes
+		refreshLoadingViewsSize();
+
+		// Update the Refreshable View layout
+		refreshRefreshableViewSize(w, h);
+
+		/**
+		 * As we're currently in a Layout Pass, we need to schedule another one
+		 * to layout any changes we've made here
+		 */
+		post(new Runnable() {
+			@Override
+			public void run() {
+				requestLayout();
+			}
+		});
+	}
+
+	/**
+	 * Re-measure the Loading Views height, and adjust internal padding as
+	 * necessary
+	 */
+	protected final void refreshLoadingViewsSize() {
+		final int maximumPullScroll = (int) (getMaximumPullScroll() * 1.2f);
+
+		int pLeft = getPaddingLeft();
+		int pTop = getPaddingTop();
+		int pRight = getPaddingRight();
+		int pBottom = getPaddingBottom();
+
+		switch (getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				if (mMode.showHeaderLoadingLayout()) {
+					mHeaderLayout.setWidth(maximumPullScroll);
+					pLeft = -maximumPullScroll;
+				} else {
+					pLeft = 0;
+				}
+
+				if (mMode.showFooterLoadingLayout()) {
+					mFooterLayout.setWidth(maximumPullScroll);
+					pRight = -maximumPullScroll;
+				} else {
+					pRight = 0;
+				}
+				break;
+
+			case VERTICAL:
+				if (mMode.showHeaderLoadingLayout()) {
+					mHeaderLayout.setHeight(maximumPullScroll);
+					pTop = -maximumPullScroll;
+				} else {
+					pTop = 0;
+				}
+
+				if (mMode.showFooterLoadingLayout()) {
+					mFooterLayout.setHeight(maximumPullScroll);
+					pBottom = -maximumPullScroll;
+				} else {
+					pBottom = 0;
+				}
+				break;
+		}
+
+		if (DEBUG) {
+			Log.d(LOG_TAG, String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d", pLeft, pTop, pRight, pBottom));
+		}
+		setPadding(pLeft, pTop, pRight, pBottom);
+	}
+
+	protected final void refreshRefreshableViewSize(int width, int height) {
+		// We need to set the Height of the Refreshable View to the same as
+		// this layout
+		LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) mRefreshableViewWrapper.getLayoutParams();
+
+		switch (getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				if (lp.width != width) {
+					lp.width = width;
+					mRefreshableViewWrapper.requestLayout();
+				}
+				break;
+			case VERTICAL:
+				if (lp.height != height) {
+					lp.height = height;
+					mRefreshableViewWrapper.requestLayout();
+				}
+				break;
+		}
+	}
+
+	/**
+	 * Helper method which just calls scrollTo() in the correct scrolling
+	 * direction.
+	 * 
+	 * @param value - New Scroll value
+	 */
+	protected final void setHeaderScroll(int value) {
+		if (DEBUG) {
+			Log.d(LOG_TAG, "setHeaderScroll: " + value);
+		}
+
+		// Clamp value to with pull scroll range
+		final int maximumPullScroll = getMaximumPullScroll();
+		value = Math.min(maximumPullScroll, Math.max(-maximumPullScroll, value));
+
+		if (mLayoutVisibilityChangesEnabled) {
+			if (value < 0) {
+				mHeaderLayout.setVisibility(View.VISIBLE);
+			} else if (value > 0) {
+				mFooterLayout.setVisibility(View.VISIBLE);
+			} else {
+				mHeaderLayout.setVisibility(View.INVISIBLE);
+				mFooterLayout.setVisibility(View.INVISIBLE);
+			}
+		}
+
+		if (USE_HW_LAYERS) {
+			/**
+			 * Use a Hardware Layer on the Refreshable View if we've scrolled at
+			 * all. We don't use them on the Header/Footer Views as they change
+			 * often, which would negate any HW layer performance boost.
+			 */
+			ViewCompat.setLayerType(mRefreshableViewWrapper, value != 0 ? View.LAYER_TYPE_HARDWARE
+					: View.LAYER_TYPE_NONE);
+		}
+
+		switch (getPullToRefreshScrollDirection()) {
+			case VERTICAL:
+				scrollTo(0, value);
+				break;
+			case HORIZONTAL:
+				scrollTo(value, 0);
+				break;
+		}
+	}
+
+	/**
+	 * Smooth Scroll to position using the default duration of
+	 * {@value #SMOOTH_SCROLL_DURATION_MS} ms.
+	 * 
+	 * @param scrollValue - Position to scroll to
+	 */
+	protected final void smoothScrollTo(int scrollValue) {
+		smoothScrollTo(scrollValue, getPullToRefreshScrollDuration());
+	}
+
+	/**
+	 * Smooth Scroll to position using the default duration of
+	 * {@value #SMOOTH_SCROLL_DURATION_MS} ms.
+	 * 
+	 * @param scrollValue - Position to scroll to
+	 * @param listener - Listener for scroll
+	 */
+	protected final void smoothScrollTo(int scrollValue, OnSmoothScrollFinishedListener listener) {
+		smoothScrollTo(scrollValue, getPullToRefreshScrollDuration(), 0, listener);
+	}
+
+	/**
+	 * Smooth Scroll to position using the longer default duration of
+	 * {@value #SMOOTH_SCROLL_LONG_DURATION_MS} ms.
+	 * 
+	 * @param scrollValue - Position to scroll to
+	 */
+	protected final void smoothScrollToLonger(int scrollValue) {
+		smoothScrollTo(scrollValue, getPullToRefreshScrollDurationLonger());
+	}
+
+	/**
+	 * Updates the View State when the mode has been set. This does not do any
+	 * checking that the mode is different to current state so always updates.
+	 */
+	protected void updateUIForMode() {
+		// We need to use the correct LayoutParam values, based on scroll
+		// direction
+		final LinearLayout.LayoutParams lp = getLoadingLayoutLayoutParams();
+
+		// Remove Header, and then add Header Loading View again if needed
+		if (this == mHeaderLayout.getParent()) {
+			removeView(mHeaderLayout);
+		}
+		if (mMode.showHeaderLoadingLayout()) {
+			addViewInternal(mHeaderLayout, 0, lp);
+		}
+
+		// Remove Footer, and then add Footer Loading View again if needed
+		if (this == mFooterLayout.getParent()) {
+			removeView(mFooterLayout);
+		}
+		if (mMode.showFooterLoadingLayout()) {
+			addViewInternal(mFooterLayout, lp);
+		}
+
+		// Hide Loading Views
+		refreshLoadingViewsSize();
+
+		// If we're not using Mode.BOTH, set mCurrentMode to mMode, otherwise
+		// set it to pull down
+		mCurrentMode = (mMode != Mode.BOTH) ? mMode : Mode.PULL_FROM_START;
+	}
+
+	private void addRefreshableView(Context context, T refreshableView) {
+		mRefreshableViewWrapper = new FrameLayout(context);
+		mRefreshableViewWrapper.addView(refreshableView, ViewGroup.LayoutParams.MATCH_PARENT,
+				ViewGroup.LayoutParams.MATCH_PARENT);
+
+		addViewInternal(mRefreshableViewWrapper, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
+				LayoutParams.MATCH_PARENT));
+	}
+
+	private void callRefreshListener() {
+		if (null != mOnRefreshListener) {
+			mOnRefreshListener.onRefresh(this);
+		} else if (null != mOnRefreshListener2) {
+			if (mCurrentMode == Mode.PULL_FROM_START) {
+				mOnRefreshListener2.onPullDownToRefresh(this);
+			} else if (mCurrentMode == Mode.PULL_FROM_END) {
+				mOnRefreshListener2.onPullUpToRefresh(this);
+			}
+		}
+	}
+
+	@SuppressWarnings("deprecation")
+	private void init(Context context, AttributeSet attrs) {
+		switch (getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				setOrientation(LinearLayout.HORIZONTAL);
+				break;
+			case VERTICAL:
+			default:
+				setOrientation(LinearLayout.VERTICAL);
+				break;
+		}
+
+		setGravity(Gravity.CENTER);
+
+		ViewConfiguration config = ViewConfiguration.get(context);
+		mTouchSlop = config.getScaledTouchSlop();
+
+		// Styleables from XML
+		TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.PullToRefresh);
+
+		if (a.hasValue(R.styleable.PullToRefresh_ptrMode)) {
+			mMode = Mode.mapIntToValue(a.getInteger(R.styleable.PullToRefresh_ptrMode, 0));
+		}
+
+		if (a.hasValue(R.styleable.PullToRefresh_ptrAnimationStyle)) {
+			mLoadingAnimationStyle = AnimationStyle.mapIntToValue(a.getInteger(
+					R.styleable.PullToRefresh_ptrAnimationStyle, 0));
+		}
+
+		// Refreshable View
+		// By passing the attrs, we can add ListView/GridView params via XML
+		mRefreshableView = createRefreshableView(context, attrs);
+		addRefreshableView(context, mRefreshableView);
+
+		// We need to create now layouts now
+		mHeaderLayout = createLoadingLayout(context, Mode.PULL_FROM_START, a);
+		mFooterLayout = createLoadingLayout(context, Mode.PULL_FROM_END, a);
+
+		/**
+		 * Styleables from XML
+		 */
+		if (a.hasValue(R.styleable.PullToRefresh_ptrRefreshableViewBackground)) {
+			Drawable background = a.getDrawable(R.styleable.PullToRefresh_ptrRefreshableViewBackground);
+			if (null != background) {
+				mRefreshableView.setBackgroundDrawable(background);
+			}
+		} else if (a.hasValue(R.styleable.PullToRefresh_ptrAdapterViewBackground)) {
+			Utils.warnDeprecation("ptrAdapterViewBackground", "ptrRefreshableViewBackground");
+			Drawable background = a.getDrawable(R.styleable.PullToRefresh_ptrAdapterViewBackground);
+			if (null != background) {
+				mRefreshableView.setBackgroundDrawable(background);
+			}
+		}
+
+		if (a.hasValue(R.styleable.PullToRefresh_ptrOverScroll)) {
+			mOverScrollEnabled = a.getBoolean(R.styleable.PullToRefresh_ptrOverScroll, true);
+		}
+
+		if (a.hasValue(R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled)) {
+			mScrollingWhileRefreshingEnabled = a.getBoolean(
+					R.styleable.PullToRefresh_ptrScrollingWhileRefreshingEnabled, false);
+		}
+
+		// Let the derivative classes have a go at handling attributes, then
+		// recycle them...
+		handleStyledAttributes(a);
+		a.recycle();
+
+		// Finally update the UI for the modes
+		updateUIForMode();
+	}
+
+	private boolean isReadyForPull() {
+		switch (mMode) {
+			case PULL_FROM_START:
+				return isReadyForPullStart();
+			case PULL_FROM_END:
+				return isReadyForPullEnd();
+			case BOTH:
+				return isReadyForPullEnd() || isReadyForPullStart();
+			default:
+				return false;
+		}
+	}
+
+	/**
+	 * Actions a Pull Event
+	 * 
+	 * @return true if the Event has been handled, false if there has been no
+	 *         change
+	 */
+	private void pullEvent() {
+		final int newScrollValue;
+		final int itemDimension;
+		final float initialMotionValue, lastMotionValue;
+
+		switch (getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				initialMotionValue = mInitialMotionX;
+				lastMotionValue = mLastMotionX;
+				break;
+			case VERTICAL:
+			default:
+				initialMotionValue = mInitialMotionY;
+				lastMotionValue = mLastMotionY;
+				break;
+		}
+
+		switch (mCurrentMode) {
+			case PULL_FROM_END:
+				newScrollValue = Math.round(Math.max(initialMotionValue - lastMotionValue, 0) / FRICTION);
+				itemDimension = getFooterSize();
+				break;
+			case PULL_FROM_START:
+			default:
+				newScrollValue = Math.round(Math.min(initialMotionValue - lastMotionValue, 0) / FRICTION);
+				itemDimension = getHeaderSize();
+				break;
+		}
+
+		setHeaderScroll(newScrollValue);
+
+		if (newScrollValue != 0 && !isRefreshing()) {
+			float scale = Math.abs(newScrollValue) / (float) itemDimension;
+			switch (mCurrentMode) {
+				case PULL_FROM_END:
+					mFooterLayout.onPull(scale);
+					break;
+				case PULL_FROM_START:
+				default:
+					mHeaderLayout.onPull(scale);
+					break;
+			}
+
+			if (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {
+				setState(State.PULL_TO_REFRESH);
+			} else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {
+				setState(State.RELEASE_TO_REFRESH);
+			}
+		}
+	}
+
+	private LinearLayout.LayoutParams getLoadingLayoutLayoutParams() {
+		switch (getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				return new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
+						LinearLayout.LayoutParams.MATCH_PARENT);
+			case VERTICAL:
+			default:
+				return new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
+						LinearLayout.LayoutParams.WRAP_CONTENT);
+		}
+	}
+
+	private int getMaximumPullScroll() {
+		switch (getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				return Math.round(getWidth() / FRICTION);
+			case VERTICAL:
+			default:
+				return Math.round(getHeight() / FRICTION);
+		}
+	}
+
+	/**
+	 * Smooth Scroll to position using the specific duration
+	 * 
+	 * @param scrollValue - Position to scroll to
+	 * @param duration - Duration of animation in milliseconds
+	 */
+	private final void smoothScrollTo(int scrollValue, long duration) {
+		smoothScrollTo(scrollValue, duration, 0, null);
+	}
+
+	private final void smoothScrollTo(int newScrollValue, long duration, long delayMillis,
+			OnSmoothScrollFinishedListener listener) {
+		if (null != mCurrentSmoothScrollRunnable) {
+			mCurrentSmoothScrollRunnable.stop();
+		}
+
+		final int oldScrollValue;
+		switch (getPullToRefreshScrollDirection()) {
+			case HORIZONTAL:
+				oldScrollValue = getScrollX();
+				break;
+			case VERTICAL:
+			default:
+				oldScrollValue = getScrollY();
+				break;
+		}
+
+		if (oldScrollValue != newScrollValue) {
+			if (null == mScrollAnimationInterpolator) {
+				// Default interpolator is a Decelerate Interpolator
+				mScrollAnimationInterpolator = new DecelerateInterpolator();
+			}
+			mCurrentSmoothScrollRunnable = new SmoothScrollRunnable(oldScrollValue, newScrollValue, duration, listener);
+
+			if (delayMillis > 0) {
+				postDelayed(mCurrentSmoothScrollRunnable, delayMillis);
+			} else {
+				post(mCurrentSmoothScrollRunnable);
+			}
+		}
+	}
+
+	private final void smoothScrollToAndBack(int y) {
+		smoothScrollTo(y, SMOOTH_SCROLL_DURATION_MS, 0, new OnSmoothScrollFinishedListener() {
+
+			@Override
+			public void onSmoothScrollFinished() {
+				smoothScrollTo(0, SMOOTH_SCROLL_DURATION_MS, DEMO_SCROLL_INTERVAL, null);
+			}
+		});
+	}
+
+	public static enum AnimationStyle {
+		/**
+		 * This is the default for Android-PullToRefresh. Allows you to use any
+		 * drawable, which is automatically rotated and used as a Progress Bar.
+		 */
+		ROTATE,
+
+		/**
+		 * This is the old default, and what is commonly used on iOS. Uses an
+		 * arrow image which flips depending on where the user has scrolled.
+		 */
+		FLIP;
+
+		static AnimationStyle getDefault() {
+			return ROTATE;
+		}
+
+		/**
+		 * Maps an int to a specific mode. This is needed when saving state, or
+		 * inflating the view from XML where the mode is given through a attr
+		 * int.
+		 * 
+		 * @param modeInt - int to map a Mode to
+		 * @return Mode that modeInt maps to, or ROTATE by default.
+		 */
+		static AnimationStyle mapIntToValue(int modeInt) {
+			switch (modeInt) {
+				case 0x0:
+				default:
+					return ROTATE;
+				case 0x1:
+					return FLIP;
+			}
+		}
+
+		LoadingLayout createLoadingLayout(Context context, Mode mode, Orientation scrollDirection, TypedArray attrs) {
+			switch (this) {
+				case ROTATE:
+				default:
+					return new RotateLoadingLayout(context, mode, scrollDirection, attrs);
+				case FLIP:
+					return new FlipLoadingLayout(context, mode, scrollDirection, attrs);
+			}
+		}
+	}
+
+	public static enum Mode {
+
+		/**
+		 * Disable all Pull-to-Refresh gesture and Refreshing handling
+		 */
+		DISABLED(0x0),
+
+		/**
+		 * Only allow the user to Pull from the start of the Refreshable View to
+		 * refresh. The start is either the Top or Left, depending on the
+		 * scrolling direction.
+		 */
+		PULL_FROM_START(0x1),
+
+		/**
+		 * Only allow the user to Pull from the end of the Refreshable View to
+		 * refresh. The start is either the Bottom or Right, depending on the
+		 * scrolling direction.
+		 */
+		PULL_FROM_END(0x2),
+
+		/**
+		 * Allow the user to both Pull from the start, from the end to refresh.
+		 */
+		BOTH(0x3),
+
+		/**
+		 * Disables Pull-to-Refresh gesture handling, but allows manually
+		 * setting the Refresh state via
+		 * {@link PullToRefreshBase#setRefreshing() setRefreshing()}.
+		 */
+		MANUAL_REFRESH_ONLY(0x4);
+
+		/**
+		 * @deprecated Use {@link #PULL_FROM_START} from now on.
+		 */
+		public static Mode PULL_DOWN_TO_REFRESH = Mode.PULL_FROM_START;
+
+		/**
+		 * @deprecated Use {@link #PULL_FROM_END} from now on.
+		 */
+		public static Mode PULL_UP_TO_REFRESH = Mode.PULL_FROM_END;
+
+		/**
+		 * Maps an int to a specific mode. This is needed when saving state, or
+		 * inflating the view from XML where the mode is given through a attr
+		 * int.
+		 * 
+		 * @param modeInt - int to map a Mode to
+		 * @return Mode that modeInt maps to, or PULL_FROM_START by default.
+		 */
+		static Mode mapIntToValue(final int modeInt) {
+			for (Mode value : Mode.values()) {
+				if (modeInt == value.getIntValue()) {
+					return value;
+				}
+			}
+
+			// If not, return default
+			return getDefault();
+		}
+
+		static Mode getDefault() {
+			return PULL_FROM_START;
+		}
+
+		private int mIntValue;
+
+		// The modeInt values need to match those from attrs.xml
+		Mode(int modeInt) {
+			mIntValue = modeInt;
+		}
+
+		/**
+		 * @return true if the mode permits Pull-to-Refresh
+		 */
+		boolean permitsPullToRefresh() {
+			return !(this == DISABLED || this == MANUAL_REFRESH_ONLY);
+		}
+
+		/**
+		 * @return true if this mode wants the Loading Layout Header to be shown
+		 */
+		public boolean showHeaderLoadingLayout() {
+			return this == PULL_FROM_START || this == BOTH;
+		}
+
+		/**
+		 * @return true if this mode wants the Loading Layout Footer to be shown
+		 */
+		public boolean showFooterLoadingLayout() {
+			return this == PULL_FROM_END || this == BOTH || this == MANUAL_REFRESH_ONLY;
+		}
+
+		int getIntValue() {
+			return mIntValue;
+		}
+
+	}
+
+	// ===========================================================
+	// Inner, Anonymous Classes, and Enumerations
+	// ===========================================================
+
+	/**
+	 * Simple Listener that allows you to be notified when the user has scrolled
+	 * to the end of the AdapterView. See (
+	 * {@link PullToRefreshAdapterViewBase#setOnLastItemVisibleListener}.
+	 * 
+	 * @author Chris Banes
+	 */
+	public static interface OnLastItemVisibleListener {
+
+		/**
+		 * Called when the user has scrolled to the end of the list
+		 */
+		public void onLastItemVisible();
+
+	}
+
+	/**
+	 * Listener that allows you to be notified when the user has started or
+	 * finished a touch event. Useful when you want to append extra UI events
+	 * (such as sounds). See (
+	 * {@link PullToRefreshAdapterViewBase#setOnPullEventListener}.
+	 * 
+	 * @author Chris Banes
+	 */
+	public static interface OnPullEventListener<V extends View> {
+
+		/**
+		 * Called when the internal state has been changed, usually by the user
+		 * pulling.
+		 * 
+		 * @param refreshView - View which has had it's state change.
+		 * @param state - The new state of View.
+		 * @param direction - One of {@link Mode#PULL_FROM_START} or
+		 *            {@link Mode#PULL_FROM_END} depending on which direction
+		 *            the user is pulling. Only useful when <var>state</var> is
+		 *            {@link State#PULL_TO_REFRESH} or
+		 *            {@link State#RELEASE_TO_REFRESH}.
+		 */
+		public void onPullEvent(final PullToRefreshBase<V> refreshView, State state, Mode direction);
+
+	}
+
+	/**
+	 * Simple Listener to listen for any callbacks to Refresh.
+	 * 
+	 * @author Chris Banes
+	 */
+	public static interface OnRefreshListener<V extends View> {
+
+		/**
+		 * onRefresh will be called for both a Pull from start, and Pull from
+		 * end
+		 */
+		public void onRefresh(final PullToRefreshBase<V> refreshView);
+
+	}
+
+	/**
+	 * An advanced version of the Listener to listen for callbacks to Refresh.
+	 * This listener is different as it allows you to differentiate between Pull
+	 * Ups, and Pull Downs.
+	 * 
+	 * @author Chris Banes
+	 */
+	public static interface OnRefreshListener2<V extends View> {
+		// TODO These methods need renaming to START/END rather than DOWN/UP
+
+		/**
+		 * onPullDownToRefresh will be called only when the user has Pulled from
+		 * the start, and released.
+		 */
+		public void onPullDownToRefresh(final PullToRefreshBase<V> refreshView);
+
+		/**
+		 * onPullUpToRefresh will be called only when the user has Pulled from
+		 * the end, and released.
+		 */
+		public void onPullUpToRefresh(final PullToRefreshBase<V> refreshView);
+
+	}
+
+	public static enum Orientation {
+		VERTICAL, HORIZONTAL;
+	}
+
+	public static enum State {
+
+		/**
+		 * When the UI is in a state which means that user is not interacting
+		 * with the Pull-to-Refresh function.
+		 */
+		RESET(0x0),
+
+		/**
+		 * When the UI is being pulled by the user, but has not been pulled far
+		 * enough so that it refreshes when released.
+		 */
+		PULL_TO_REFRESH(0x1),
+
+		/**
+		 * When the UI is being pulled by the user, and <strong>has</strong>
+		 * been pulled far enough so that it will refresh when released.
+		 */
+		RELEASE_TO_REFRESH(0x2),
+
+		/**
+		 * When the UI is currently refreshing, caused by a pull gesture.
+		 */
+		REFRESHING(0x8),
+
+		/**
+		 * When the UI is currently refreshing, caused by a call to
+		 * {@link PullToRefreshBase#setRefreshing() setRefreshing()}.
+		 */
+		MANUAL_REFRESHING(0x9),
+
+		/**
+		 * When the UI is currently overscrolling, caused by a fling on the
+		 * Refreshable View.
+		 */
+		OVERSCROLLING(0x10);
+
+		/**
+		 * Maps an int to a specific state. This is needed when saving state.
+		 * 
+		 * @param stateInt - int to map a State to
+		 * @return State that stateInt maps to
+		 */
+		static State mapIntToValue(final int stateInt) {
+			for (State value : State.values()) {
+				if (stateInt == value.getIntValue()) {
+					return value;
+				}
+			}
+
+			// If not, return default
+			return RESET;
+		}
+
+		private int mIntValue;
+
+		State(int intValue) {
+			mIntValue = intValue;
+		}
+
+		int getIntValue() {
+			return mIntValue;
+		}
+	}
+
+	final class SmoothScrollRunnable implements Runnable {
+		private final Interpolator mInterpolator;
+		private final int mScrollToY;
+		private final int mScrollFromY;
+		private final long mDuration;
+		private OnSmoothScrollFinishedListener mListener;
+
+		private boolean mContinueRunning = true;
+		private long mStartTime = -1;
+		private int mCurrentY = -1;
+
+		public SmoothScrollRunnable(int fromY, int toY, long duration, OnSmoothScrollFinishedListener listener) {
+			mScrollFromY = fromY;
+			mScrollToY = toY;
+			mInterpolator = mScrollAnimationInterpolator;
+			mDuration = duration;
+			mListener = listener;
+		}
+
+		@Override
+		public void run() {
+
+			/**
+			 * Only set mStartTime if this is the first time we're starting,
+			 * else actually calculate the Y delta
+			 */
+			if (mStartTime == -1) {
+				mStartTime = System.currentTimeMillis();
+			} else {
+
+				/**
+				 * We do do all calculations in long to reduce software float
+				 * calculations. We use 1000 as it gives us good accuracy and
+				 * small rounding errors
+				 */
+				long normalizedTime = (1000 * (System.currentTimeMillis() - mStartTime)) / mDuration;
+				normalizedTime = Math.max(Math.min(normalizedTime, 1000), 0);
+
+				final int deltaY = Math.round((mScrollFromY - mScrollToY)
+						* mInterpolator.getInterpolation(normalizedTime / 1000f));
+				mCurrentY = mScrollFromY - deltaY;
+				setHeaderScroll(mCurrentY);
+			}
+
+			// If we're not at the target Y, keep going...
+			if (mContinueRunning && mScrollToY != mCurrentY) {
+				ViewCompat.postOnAnimation(PullToRefreshBase.this, this);
+			} else {
+				if (null != mListener) {
+					mListener.onSmoothScrollFinished();
+				}
+			}
+		}
+
+		public void stop() {
+			mContinueRunning = false;
+			removeCallbacks(this);
+		}
+	}
+
+	static interface OnSmoothScrollFinishedListener {
+		void onSmoothScrollFinished();
+	}
+
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ro/values-ro.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ro/values-ro.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ro/values-ro.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ro/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Trage pentru a reîmprospăta…</string>
+    <string name="pull_to_refresh_refreshing_label">Încărcare…</string>
+    <string name="pull_to_refresh_release_label">Eliberează pentru a reîmprospăta…</string>
+</resources>
\ No newline at end of file
Index: app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab01.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab01.java	(revision )
@@ -0,0 +1,261 @@
+package zhu.com.sortingdata.fragment;
+
+import android.graphics.Bitmap;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Environment;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.ScrollView;
+
+import com.handmark.pulltorefresh.library.PullToRefreshBase;
+import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
+import com.handmark.pulltorefresh.library.PullToRefreshScrollView;
+import com.nostra13.universalimageloader.core.DisplayImageOptions;
+import com.nostra13.universalimageloader.core.ImageLoader;
+import com.nostra13.universalimageloader.core.assist.FailReason;
+import com.nostra13.universalimageloader.core.assist.ImageScaleType;
+import com.nostra13.universalimageloader.core.display.CircleBitmapDisplayer;
+import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
+import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;
+import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener;
+
+import java.io.File;
+import java.util.ArrayList;
+
+import zhu.com.sortingdata.R;
+import zhu.com.sortingdata.imagecycle.ImageCycleInfo;
+import zhu.com.sortingdata.imagecycle.ImageCycleView;
+
+public class FragmentTab01 extends BaseFragment {
+
+	// view对象
+	private View view;
+	// 下拉加载对象
+	private PullToRefreshScrollView ptr_scroll;
+	// 轮播控件
+	private ImageCycleView mImageCycleView;
+	// 轮播图片对象
+	private ArrayList<ImageCycleInfo> infos;
+	// 轮播图片地址
+	private int[] imageUrls = { R.drawable.icon_star_01,
+			R.drawable.icon_star_02, R.drawable.icon_star_03 };
+	// 网络图片
+	private String urlImg01 = "https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/logo_white_fe6da1ec.png";
+	private String urlImg02 = "https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=10409202,1487877148&fm=23&gp=0.jpg";
+	// 显示图片的view
+	private ImageView iv_net_display, iv_net_display01, iv_net_display02 , iv_net_display03;
+
+	@Override
+	public View onCreateView(LayoutInflater inflater,
+							 @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+
+		view = inflater.inflate(R.layout.fragment_tab01, null);
+		initView();
+		initImageCycleView(view);
+		initImageLoader();
+
+		return view;
+	}
+
+	private void initImageLoader() {
+		ImageLoader imageLoader = ImageLoader.getInstance();
+		DisplayImageOptions options;
+		options = new DisplayImageOptions.Builder()
+				.showImageOnLoading(R.drawable.ic_launcher) // 设置图片在下载期间显示的图片
+				.showImageForEmptyUri(R.drawable.ic_launcher)// 设置图片Uri为空或是错误的时候显示的图片
+				.showImageOnFail(R.drawable.ic_launcher) // 设置图片加载/解码过程中错误时候显示的图片
+				.cacheInMemory(true)// 设置下载的图片是否缓存在内存中
+				.cacheOnDisk(true)// 设置下载的图片是否缓存在SD卡中
+				.considerExifParams(true) // 是否考虑JPEG图像EXIF参数（旋转，翻转）
+				.imageScaleType(ImageScaleType.EXACTLY_STRETCHED)// 设置图片以如何的编码方式显示
+				.bitmapConfig(Bitmap.Config.RGB_565)// 设置图片的解码类型//
+				// .decodingOptions(android.graphics.BitmapFactory.Options
+				// decodingOptions)//设置图片的解码配置
+				// .delayBeforeLoading(int delayInMillis)//
+				// delayInMillis为你设置的下载前的延迟时间
+				// .preProcessor(BitmapProcessor
+				// preProcessor)//设置图片加入缓存前，对bitmap进行设置
+				.resetViewBeforeLoading(true)// 设置图片在下载前是否重置，复位
+				.displayer(new RoundedBitmapDisplayer(100))// 是否设置为圆角，弧度为多少
+				// .displayer(new FadeInBitmapDisplayer(20000))//
+				// 是否图片加载好后渐入的动画时间
+				.build();// 构建完成
+		imageLoader.displayImage(urlImg02, iv_net_display, options);
+
+		DisplayImageOptions.Builder optionsBuilder = new DisplayImageOptions.Builder();
+		optionsBuilder.showImageOnLoading(R.drawable.ic_launcher); // 设置图片在下载期间显示的图片
+		optionsBuilder.showImageForEmptyUri(R.drawable.ic_launcher);// 设置图片Uri为空或是错误的时候显示的图片
+		optionsBuilder.showImageOnFail(R.drawable.ic_launcher); // 设置图片加载/解码过程中错误时候显示的图片
+		optionsBuilder.cacheInMemory(true);// 设置下载的图片是否缓存在内存中
+		optionsBuilder.cacheOnDisk(true);// 设置下载的图片是否缓存在SD卡中
+		optionsBuilder.considerExifParams(true); // 是否考虑JPEG图像EXIF参数（旋转，翻转）
+		optionsBuilder.imageScaleType(ImageScaleType.EXACTLY_STRETCHED);// 设置图片以如何的编码方式显示
+		optionsBuilder.bitmapConfig(Bitmap.Config.RGB_565);// 设置图片的解码类型//
+		optionsBuilder.resetViewBeforeLoading(true);// 设置图片在下载前是否重置，复位
+		optionsBuilder.displayer(new FadeInBitmapDisplayer(10000));// 加载好后渐入的动画时间
+
+		imageLoader.displayImage(urlImg02, iv_net_display01, optionsBuilder.build(),
+				new ImageLoadingListener() {
+
+					@Override
+					public void onLoadingCancelled(String arg0, View arg1) {
+						// 加载取消的时候执行
+						System.out.println("onLoadingCancelled");
+					}
+
+					@Override
+					public void onLoadingComplete(String arg0, View arg1,
+												  Bitmap arg2) {
+						// 加载成功的时候执行
+						System.out.println("onLoadingComplete");
+					}
+
+					@Override
+					public void onLoadingFailed(String arg0, View arg1,
+												FailReason arg2) {
+						// 加载失败的时候执行
+						System.out.println("onLoadingFailed");
+					}
+
+					@Override
+					public void onLoadingStarted(String arg0, View arg1) {
+						// 开始加载的时候执行
+						System.out.println("onLoadingStarted");
+					}
+				}, new ImageLoadingProgressListener() {
+
+					@Override
+					public void onProgressUpdate(String arg0, View arg1,
+												 int arg2, int arg3) {
+						System.out.println("arg0:" + arg0 + "-arg2:" + arg2 + "-arg3:" + arg3);
+					}
+				});
+		if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){
+			File path = Environment.getExternalStorageDirectory();
+			String imageSDCardUri = "file://" +path + File.separator + "news_article" + File.separator + "e5095e549e1f3153ef5edb10936d15cc.jpg"  ;
+			imageLoader.displayImage(imageSDCardUri, iv_net_display02);
+			DisplayImageOptions optionsSDCard = new DisplayImageOptions.Builder()
+//	        	.displayer(new RoundedBitmapDisplayer(100))// 是否设置为圆角，弧度为多少
+					.displayer(new CircleBitmapDisplayer())// 设置为圆
+					.build();// 构建完成
+			imageLoader.displayImage(imageSDCardUri , iv_net_display03 , optionsSDCard ,new ImageLoadingListener() {
+
+				@Override
+				public void onLoadingStarted(String arg0, View arg1) {
+
+				}
+
+				@Override
+				public void onLoadingFailed(String arg0, View arg1, FailReason arg2) {
+
+				}
+
+				@Override
+				public void onLoadingComplete(String arg0, View arg1, Bitmap arg2) {
+//					iv_net_display03.setImageBitmap(arg2);
+				}
+
+				@Override
+				public void onLoadingCancelled(String arg0, View arg1) {
+
+				}
+			});
+		}
+	}
+
+	private void initView() {
+		ptr_scroll = (PullToRefreshScrollView) view.findViewById(R.id.ptr_scroll);
+		mImageCycleView = ( ImageCycleView) view.findViewById(R.id.imageCycle_View);
+		iv_net_display = (ImageView) view.findViewById(R.id.iv_net_display);
+		iv_net_display01 = (ImageView) view.findViewById(R.id.iv_net_display01);
+		iv_net_display02 = (ImageView) view.findViewById(R.id.iv_net_display02);
+		iv_net_display03 = (ImageView) view.findViewById(R.id.iv_net_display03);
+
+		ptr_scroll.setOnRefreshListener(new OnRefreshListener<ScrollView>() {
+
+			@Override
+			public void onRefresh(PullToRefreshBase<ScrollView> refreshView) {
+				new MyAs().execute();
+			}
+		});
+
+	}
+
+	private void initImageCycleView(View mView) {
+
+		infos = new ArrayList<ImageCycleInfo>();
+		for (int i = 0; i < imageUrls.length; i++) {
+			ImageCycleInfo info = new ImageCycleInfo();
+			info.setImg(imageUrls[i]);
+			info.setContent("top-->" + i);
+			infos.add(info);
+		}
+
+		mImageCycleView.setImageResources(infos, new ImageCycleView.ImageCycleViewListener() {
+
+			@Override
+			public void onImageClick(ImageCycleInfo info, int postion,
+									 View imageView) {
+				// TODO Auto-generated method stub
+
+			}
+
+			@Override
+			public ImageView loadImageDisplay(ImageView imageView,
+											  ImageCycleInfo info) {
+				imageView.setImageResource(info.getImg());
+				return imageView;
+			}
+
+		});
+	}
+
+	@Override
+	public void onResume() {
+		super.onResume();
+		mImageCycleView.startImageCycle();
+
+	}
+
+	@Override
+	public void onPause() {
+		super.onPause();
+		mImageCycleView.pushImageCycle();
+	}
+
+	@Override
+	public void onDestroy() {
+		super.onDestroy();
+		mImageCycleView.pushImageCycle();
+
+	}
+
+	class MyAs extends AsyncTask<String, String, String> {
+
+		@Override
+		protected String doInBackground(String... arg0) {
+			try {
+				Thread.sleep(4000);
+			} catch (InterruptedException e) {
+			}
+			return null;
+		}
+
+		@Override
+		protected void onPostExecute(String result) {
+			ptr_scroll.onRefreshComplete();
+			super.onPostExecute(result);
+		}
+
+		@Override
+		protected void onProgressUpdate(String... values) {
+			super.onProgressUpdate(values);
+		}
+
+	}
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/layout/pull_to_refresh_header_horizontal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/layout/pull_to_refresh_header_horizontal.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/layout/pull_to_refresh_header_horizontal.xml	(revision )
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <ImageView
+            android:id="@+id/pull_to_refresh_image"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center" />
+
+        <ProgressBar
+            android:id="@+id/pull_to_refresh_progress"
+            style="?android:attr/progressBarStyleSmall"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:indeterminate="true"
+            android:visibility="gone" />
+    </FrameLayout>
+
+</merge><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_horizontal.xml --><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_horizontal.xml -->
\ No newline at end of file
Index: app/src/main/java/zhu/com/sortingdata/adapter/MyFragmentPagerAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/adapter/MyFragmentPagerAdapter.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/adapter/MyFragmentPagerAdapter.java	(revision )
@@ -0,0 +1,29 @@
+package zhu.com.sortingdata.adapter;
+
+import java.util.ArrayList;
+
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+
+public class MyFragmentPagerAdapter extends FragmentPagerAdapter {
+
+	private ArrayList<Fragment> list;
+
+	public MyFragmentPagerAdapter(FragmentManager fm, ArrayList<Fragment> list) {
+		super(fm);
+		this.list = list;
+	}
+
+	@Override
+	public Fragment getItem(int arg0) {
+		return list.get(arg0);
+	}
+
+	@Override
+	public int getCount() {
+		// TODO Auto-generated method stub
+		return list.size();
+	}
+
+}
Index: PullToRefreshLibrary/src/main/res/drawable/indicator_bg_top.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/res/drawable/indicator_bg_top.xml	(revision )
+++ PullToRefreshLibrary/src/main/res/drawable/indicator_bg_top.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#40000000" />
+
+    <!--
+    I know the android:radius is useless here but it's needed to fix an old bug:
+    http://code.google.com/p/android/issues/detail?id=939
+    -->
+    <corners
+        android:bottomLeftRadius="@dimen/indicator_corner_radius"
+        android:bottomRightRadius="@dimen/indicator_corner_radius"
+        android:radius="1dp"
+        android:topLeftRadius="0dp"
+        android:topRightRadius="0dp" />
+
+</shape>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/res/layout/cube_ptr_classic_default_header.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/res/layout/cube_ptr_classic_default_header.xml	(revision )
+++ ultrapulltorefreshlibrary/src/main/res/layout/cube_ptr_classic_default_header.xml	(revision )
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+
+    <RelativeLayout
+        android:layout_width="fill_parent"
+        android:layout_height="60dp">
+
+        <LinearLayout
+            android:id="@+id/ptr_classic_header_rotate_view_header_text"
+            android:layout_width="150dp"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:gravity="center"
+            android:orientation="vertical">
+
+            <TextView
+                android:id="@+id/ptr_classic_header_rotate_view_header_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#666666"
+                android:textSize="12sp" />
+
+            <TextView
+                android:id="@+id/ptr_classic_header_rotate_view_header_last_update"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="2dp"
+                android:textColor="#999999"
+                android:textSize="10sp" />
+        </LinearLayout>
+
+        <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerVertical="true"
+            android:layout_marginRight="10dp"
+            android:layout_toLeftOf="@+id/ptr_classic_header_rotate_view_header_text">
+
+            <ImageView
+                android:id="@+id/ptr_classic_header_rotate_view"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:src="@drawable/ptr_rotate_arrow" />
+
+            <ProgressBar
+                android:id="@+id/ptr_classic_header_rotate_view_progressbar"
+                style="@android:style/Widget.ProgressBar.Small"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center" />
+        </FrameLayout>
+    </RelativeLayout>
+
+</LinearLayout>
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_horizontal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_horizontal.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/layout/pull_to_refresh_header_horizontal.xml	(revision )
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <FrameLayout
+        android:id="@+id/fl_inner"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:paddingBottom="@dimen/header_footer_top_bottom_padding"
+        android:paddingLeft="@dimen/header_footer_left_right_padding"
+        android:paddingRight="@dimen/header_footer_left_right_padding"
+        android:paddingTop="@dimen/header_footer_top_bottom_padding" >
+
+        <ImageView
+            android:id="@+id/pull_to_refresh_image"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center" />
+
+        <ProgressBar
+            android:id="@+id/pull_to_refresh_progress"
+            style="?android:attr/progressBarStyleSmall"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:indeterminate="true"
+            android:visibility="gone" />
+    </FrameLayout>
+
+</merge><!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/layout/pull_to_refresh_header_horizontal.xml -->
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ja/values-ja.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ja/values-ja.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-ja/values-ja.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ja/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">画面を引っ張って…</string>
+    <string name="pull_to_refresh_refreshing_label">読み込み中…</string>
+    <string name="pull_to_refresh_release_label">指を離して更新…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshExpandableListView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshExpandableListView.java	(revision )
+++ PullToRefreshLibrary/src/main/java/com/handmark/pulltorefresh/library/PullToRefreshExpandableListView.java	(revision )
@@ -0,0 +1,103 @@
+/*******************************************************************************
+ * Copyright 2011, 2012 Chris Banes.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *******************************************************************************/
+package com.handmark.pulltorefresh.library;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ExpandableListView;
+
+import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;
+
+public class PullToRefreshExpandableListView extends PullToRefreshAdapterViewBase<ExpandableListView> {
+
+	public PullToRefreshExpandableListView(Context context) {
+		super(context);
+	}
+
+	public PullToRefreshExpandableListView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public PullToRefreshExpandableListView(Context context, Mode mode) {
+		super(context, mode);
+	}
+
+	public PullToRefreshExpandableListView(Context context, Mode mode, AnimationStyle style) {
+		super(context, mode, style);
+	}
+
+	@Override
+	public final Orientation getPullToRefreshScrollDirection() {
+		return Orientation.VERTICAL;
+	}
+
+	@Override
+	protected ExpandableListView createRefreshableView(Context context, AttributeSet attrs) {
+		final ExpandableListView lv;
+		if (VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD) {
+			lv = new InternalExpandableListViewSDK9(context, attrs);
+		} else {
+			lv = new InternalExpandableListView(context, attrs);
+		}
+
+		// Set it to this so it can be used in ListActivity/ListFragment
+		lv.setId(android.R.id.list);
+		return lv;
+	}
+
+	class InternalExpandableListView extends ExpandableListView implements EmptyViewMethodAccessor {
+
+		public InternalExpandableListView(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		public void setEmptyView(View emptyView) {
+			PullToRefreshExpandableListView.this.setEmptyView(emptyView);
+		}
+
+		@Override
+		public void setEmptyViewInternal(View emptyView) {
+			super.setEmptyView(emptyView);
+		}
+	}
+
+	@TargetApi(9)
+	final class InternalExpandableListViewSDK9 extends InternalExpandableListView {
+
+		public InternalExpandableListViewSDK9(Context context, AttributeSet attrs) {
+			super(context, attrs);
+		}
+
+		@Override
+		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
+				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
+
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
+
+			// Does all of the hard work...
+			OverscrollHelper.overScrollBy(PullToRefreshExpandableListView.this, deltaX, scrollX, deltaY, scrollY,
+					isTouchEvent);
+
+			return returnValue;
+		}
+	}
+}
Index: PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ar/values-ar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ar/values-ar.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/res/androidTest/debug/values-ar/values-ar.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ar/values-ar.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">اسحب للتحديث…</string>
+    <string name="pull_to_refresh_refreshing_label">تحميل…</string>
+    <string name="pull_to_refresh_release_label">اترك للتحديث…</string>
+</resources>
\ No newline at end of file
Index: cropperimagelibrary/src/main/res/values/dimen.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/res/values/dimen.xml	(revision )
+++ cropperimagelibrary/src/main/res/values/dimen.xml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <dimen name="border_thickness">3dp</dimen>
+    <dimen name="corner_thickness">5dp</dimen>
+    <dimen name="guideline_thickness">1px</dimen>
+
+    <dimen name="target_radius">24dp</dimen>
+    <dimen name="snap_radius">3dp</dimen>
+    <dimen name="corner_length">20dp</dimen>
+
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/tmp/packageReleaseJar/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/tmp/packageReleaseJar/MANIFEST.MF	(revision )
+++ PullToRefreshLibrary/build/tmp/packageReleaseJar/MANIFEST.MF	(revision )
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
Index: app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab02.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab02.java	(revision )
+++ app/src/main/java/zhu/com/sortingdata/fragment/FragmentTab02.java	(revision )
@@ -0,0 +1,134 @@
+package zhu.com.sortingdata.fragment;
+
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import in.srain.cube.views.ptr.PtrDefaultHandler;
+import in.srain.cube.views.ptr.PtrFrameLayout;
+import in.srain.cube.views.ptr.PtrHandler;
+import in.srain.cube.views.ptr.header.MaterialHeader;
+import in.srain.cube.views.ptr.header.StoreHouseHeader;
+import in.srain.cube.views.ptr.util.PtrLocalDisplay;
+import zhu.com.sortingdata.R;
+
+public class FragmentTab02 extends BaseFragment {
+    private View view;
+    private PtrFrameLayout mPtrFrame;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater,
+                             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+
+        view = inflater.inflate(R.layout.fragment_tab02, null);
+
+
+        initView();
+        initViewPUsh();
+        return view;
+    }
+
+    private void initView() {
+
+    }
+
+    private void initViewPUsh() {
+
+        mPtrFrame = (PtrFrameLayout) view.findViewById(R.id.ptr);
+        /**
+         * 在 xml 中配置过了，就不要在这里配置了。
+         */
+            /*mPtrFrame.setResistance(1.7f); //阻尼系数 默认: 1.7f，越大，感觉下拉时越吃力。
+            mPtrFrame.setRatioOfHeaderHeightToRefresh(1.2f); //触发刷新时移动的位置比例 默认，1.2f，移动达到头部高度1.2倍时可触发刷新操作。
+	        mPtrFrame.setDurationToClose(200);//回弹延时 默认 200ms，回弹到刷新高度所用时间
+	        mPtrFrame.setDurationToCloseHeader(1000);//头部回弹时间 默认1000ms
+	        mPtrFrame.setPullToRefresh(false);// 刷新是保持头部 默认值 true.
+	        mPtrFrame.setKeepHeaderWhenRefresh(true);//下拉刷新 / 释放刷新 默认为释放刷新*/
+
+        /**
+         * 经典 风格的头部实现
+
+        final PtrClassicDefaultHeader header = new PtrClassicDefaultHeader(getActivity());
+        header.setPadding(0, PtrLocalDisplay.dp2px(15), 0, 0);
+         */
+
+        /**
+         * StoreHouse风格的头部实现
+
+            final StoreHouseHeader header = new StoreHouseHeader(getActivity());
+            header.setPadding(0, PtrLocalDisplay.dp2px(15), 0, 0);
+         */
+        /**
+         * using a string, support: A-Z 0-9 - .
+         * you can add more letters by {@link in.srain.cube.views.ptr.header.StoreHousePath#addChar}
+         */
+        // header.initWithString("Alibaba");
+
+
+        /**
+         * Material Design风格的头部实现
+         */
+         final MaterialHeader header = new MaterialHeader(getActivity());
+        header.setPadding(0, PtrLocalDisplay.dp2px(15), 0, 0);//显示相关工具类，用于获取用户屏幕宽度、高度以及屏幕密度。同时提供了dp和px的转化方法。
+
+
+        /**
+         * Rentals Style风格的头部实现
+         * 这个需要引入这两个类RentalsSunDrawable.java ; RentalsSunHeaderView.java
+         * 在人家git上的daemon中能找到
+         */
+           /* final RentalsSunHeaderView header = new RentalsSunHeaderView(this);
+
+	        header.setLayoutParams(new PtrFrameLayout.LayoutParams(-1, -2));
+	        header.setPadding(0, LocalDisplay.dp2px(15), 0, LocalDisplay.dp2px(10));
+	        header.setUp(mPtrFrame);
+	        mPtrFrame.setLoadingMinTime(1000);
+	        mPtrFrame.setDurationToCloseHeader(1500);*/
+
+
+        // mPtrFrame = (PtrFrameLayout) findViewById(R.id.ptr);
+        mPtrFrame.setHeaderView(header);
+        // mPtrFrame.setPinContent(true);//刷新时，保持内容不动，仅头部下移,默认,false
+        mPtrFrame.addPtrUIHandler(header);
+        //mPtrFrame.setKeepHeaderWhenRefresh(true);//刷新时保持头部的显示，默认为true
+        //mPtrFrame.disableWhenHorizontalMove(true);//如果是ViewPager，设置为true，会解决ViewPager滑动冲突问题。
+        mPtrFrame.setPtrHandler(new PtrHandler() {
+
+            //需要加载数据时触发
+            @Override
+            public void onRefreshBegin(PtrFrameLayout frame) {
+                System.out.println("MainActivity.onRefreshBegin");
+                mPtrFrame.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        mPtrFrame.autoRefresh();//自动刷新
+
+                        mPtrFrame.refreshComplete();
+                    }
+                }, 1800);
+
+            }
+
+            /**
+             * 检查是否可以执行下来刷新，比如列表为空或者列表第一项在最上面时。
+             */
+            @Override
+            public boolean checkCanDoRefresh(PtrFrameLayout frame, View content, View header) {
+                System.out.println("MainActivity.checkCanDoRefresh");
+                // 默认实现，根据实际情况做改动
+                return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header);
+                // return true;
+            }
+        });
+    }
+
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ko/values-ko.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ko/values-ko.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/debug/res/values-ko/values-ko.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-ko/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">당겨서 새로 고침…</string>
+    <string name="pull_to_refresh_refreshing_label">로드 중…</string>
+    <string name="pull_to_refresh_release_label">놓아서 새로 고침…</string>
+</resources>
\ No newline at end of file
Index: SlidingMeunlibrary/build/generated/source/r/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/R.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SlidingMeunlibrary/build/generated/source/r/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/R.java	(revision )
+++ SlidingMeunlibrary/build/generated/source/r/androidTest/debug/com/jeremyfeinstein/slidingmenu/lib/R.java	(revision )
@@ -0,0 +1,55 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+package com.jeremyfeinstein.slidingmenu.lib;
+
+public final class R {
+	public static final class attr {
+		public static final int behindOffset = 0x7f010003;
+		public static final int behindScrollScale = 0x7f010005;
+		public static final int behindWidth = 0x7f010004;
+		public static final int fadeDegree = 0x7f01000b;
+		public static final int fadeEnabled = 0x7f01000a;
+		public static final int mode = 0x7f010000;
+		public static final int selectorDrawable = 0x7f01000d;
+		public static final int selectorEnabled = 0x7f01000c;
+		public static final int shadowDrawable = 0x7f010008;
+		public static final int shadowWidth = 0x7f010009;
+		public static final int touchModeAbove = 0x7f010006;
+		public static final int touchModeBehind = 0x7f010007;
+		public static final int viewAbove = 0x7f010001;
+		public static final int viewBehind = 0x7f010002;
+	}
+	public static final class id {
+		public static final int fullscreen = 0x7f030003;
+		public static final int left = 0x7f030001;
+		public static final int margin = 0x7f030004;
+		public static final int none = 0x7f030005;
+		public static final int right = 0x7f030002;
+		public static final int selected_view = 0x7f030000;
+		public static final int slidingmenumain = 0x7f030006;
+	}
+	public static final class layout {
+		public static final int slidingmenumain = 0x7f020000;
+	}
+	public static final class styleable {
+		public static final int[] SlidingMenu = { 0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c, 0x7f01000d };
+		public static final int SlidingMenu_behindOffset = 3;
+		public static final int SlidingMenu_behindScrollScale = 5;
+		public static final int SlidingMenu_behindWidth = 4;
+		public static final int SlidingMenu_fadeDegree = 11;
+		public static final int SlidingMenu_fadeEnabled = 10;
+		public static final int SlidingMenu_mode = 0;
+		public static final int SlidingMenu_selectorDrawable = 13;
+		public static final int SlidingMenu_selectorEnabled = 12;
+		public static final int SlidingMenu_shadowDrawable = 8;
+		public static final int SlidingMenu_shadowWidth = 9;
+		public static final int SlidingMenu_touchModeAbove = 6;
+		public static final int SlidingMenu_touchModeBehind = 7;
+		public static final int SlidingMenu_viewAbove = 1;
+		public static final int SlidingMenu_viewBehind = 2;
+	}
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/VerticalHandleHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/VerticalHandleHelper.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/VerticalHandleHelper.java	(revision )
@@ -0,0 +1,84 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.cropwindow.handle;
+
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.cropwindow.edge.Edge;
+import com.edmodo.cropper.util.AspectRatioUtil;
+
+/**
+ * HandleHelper class to handle vertical handles (i.e. left and right handles).
+ */
+class VerticalHandleHelper extends HandleHelper {
+
+    // Member Variables ////////////////////////////////////////////////////////////////////////////
+
+    private Edge mEdge;
+
+    // Constructor /////////////////////////////////////////////////////////////////////////////////
+
+    VerticalHandleHelper(Edge edge) {
+        super(null, edge);
+        mEdge = edge;
+    }
+
+    // HandleHelper Methods ////////////////////////////////////////////////////////////////////////
+
+    @Override
+    void updateCropWindow(float x,
+                          float y,
+                          float targetAspectRatio,
+                          @NonNull RectF imageRect,
+                          float snapRadius) {
+
+        // Adjust this Edge accordingly.
+        mEdge.adjustCoordinate(x, y, imageRect, snapRadius, targetAspectRatio);
+
+        float top = Edge.TOP.getCoordinate();
+        float bottom = Edge.BOTTOM.getCoordinate();
+
+        // After this Edge is moved, our crop window is now out of proportion.
+        final float targetHeight = AspectRatioUtil.calculateHeight(Edge.getWidth(), targetAspectRatio);
+
+        // Adjust the crop window so that it maintains the given aspect ratio by
+        // moving the adjacent edges symmetrically in or out.
+        final float difference = targetHeight - Edge.getHeight();
+        final float halfDifference = difference / 2;
+        top -= halfDifference;
+        bottom += halfDifference;
+
+        Edge.TOP.setCoordinate(top);
+        Edge.BOTTOM.setCoordinate(bottom);
+
+        // Check if we have gone out of bounds on the top or bottom, and fix.
+        if (Edge.TOP.isOutsideMargin(imageRect, snapRadius)
+                && !mEdge.isNewRectangleOutOfBounds(Edge.TOP, imageRect, targetAspectRatio)) {
+
+            final float offset = Edge.TOP.snapToRect(imageRect);
+            Edge.BOTTOM.offset(-offset);
+            mEdge.adjustCoordinate(targetAspectRatio);
+        }
+
+        if (Edge.BOTTOM.isOutsideMargin(imageRect, snapRadius)
+                && !mEdge.isNewRectangleOutOfBounds(Edge.BOTTOM, imageRect, targetAspectRatio)) {
+
+            final float offset = Edge.BOTTOM.snapToRect(imageRect);
+            Edge.TOP.offset(-offset);
+            mEdge.adjustCoordinate(targetAspectRatio);
+        }
+    }
+}
Index: cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/HorizontalHandleHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/HorizontalHandleHelper.java	(revision )
+++ cropperimagelibrary/src/main/java/com/edmodo/cropper/cropwindow/handle/HorizontalHandleHelper.java	(revision )
@@ -0,0 +1,84 @@
+/*
+ * Copyright 2013, Edmodo, Inc. 
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in compliance with the License.
+ * You may obtain a copy of the License in the LICENSE file, or at:
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
+ * governing permissions and limitations under the License. 
+ */
+
+package com.edmodo.cropper.cropwindow.handle;
+
+
+import android.graphics.RectF;
+import android.support.annotation.NonNull;
+
+import com.edmodo.cropper.cropwindow.edge.Edge;
+import com.edmodo.cropper.util.AspectRatioUtil;
+
+/**
+ * Handle helper class to handle horizontal handles (i.e. top and bottom handles).
+ */
+class HorizontalHandleHelper extends HandleHelper {
+
+    // Member Variables ////////////////////////////////////////////////////////////////////////////
+
+    private Edge mEdge;
+
+    // Constructor /////////////////////////////////////////////////////////////////////////////////
+
+    HorizontalHandleHelper(Edge edge) {
+        super(edge, null);
+        mEdge = edge;
+    }
+
+    // HandleHelper Methods ////////////////////////////////////////////////////////////////////////
+
+    @Override
+    void updateCropWindow(float x,
+                          float y,
+                          float targetAspectRatio,
+                          @NonNull RectF imageRect,
+                          float snapRadius) {
+
+        // Adjust this Edge accordingly.
+        mEdge.adjustCoordinate(x, y, imageRect, snapRadius, targetAspectRatio);
+
+        float left = Edge.LEFT.getCoordinate();
+        float right = Edge.RIGHT.getCoordinate();
+
+        // After this Edge is moved, our crop window is now out of proportion.
+        final float targetWidth = AspectRatioUtil.calculateWidth(Edge.getHeight(), targetAspectRatio);
+
+        // Adjust the crop window so that it maintains the given aspect ratio by
+        // moving the adjacent edges symmetrically in or out.
+        final float difference = targetWidth - Edge.getWidth();
+        final float halfDifference = difference / 2;
+        left -= halfDifference;
+        right += halfDifference;
+
+        Edge.LEFT.setCoordinate(left);
+        Edge.RIGHT.setCoordinate(right);
+
+        // Check if we have gone out of bounds on the sides, and fix.
+        if (Edge.LEFT.isOutsideMargin(imageRect, snapRadius)
+                && !mEdge.isNewRectangleOutOfBounds(Edge.LEFT, imageRect, targetAspectRatio)) {
+
+            final float offset = Edge.LEFT.snapToRect(imageRect);
+            Edge.RIGHT.offset(-offset);
+            mEdge.adjustCoordinate(targetAspectRatio);
+        }
+
+        if (Edge.RIGHT.isOutsideMargin(imageRect, snapRadius)
+                && !mEdge.isNewRectangleOutOfBounds(Edge.RIGHT, imageRect, targetAspectRatio)) {
+
+            final float offset = Edge.RIGHT.snapToRect(imageRect);
+            Edge.LEFT.offset(-offset);
+            mEdge.adjustCoordinate(targetAspectRatio);
+        }
+    }
+}
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-cs/values-cs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-cs/values-cs.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-cs/values-cs.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-cs/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">Tažením aktualizujete…</string>
+    <string name="pull_to_refresh_refreshing_label">Načítání…</string>
+    <string name="pull_to_refresh_release_label">Uvolněním aktualizujete…</string>
+</resources>
\ No newline at end of file
Index: PullToRefreshLibrary/build/intermediates/bundles/release/res/values-iw/values-iw.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PullToRefreshLibrary/build/intermediates/bundles/release/res/values-iw/values-iw.xml	(revision )
+++ PullToRefreshLibrary/build/intermediates/bundles/release/res/values-iw/values-iw.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- From: file:/F:/ZZTAndroidStuidio2/SortingData/PullToRefreshLibrary/src/main/res/values-iw/pull_refresh_strings.xml -->
+    <eat-comment/>
+    <string name="pull_to_refresh_pull_label">משוך לרענון…</string>
+    <string name="pull_to_refresh_refreshing_label">טוען…</string>
+    <string name="pull_to_refresh_release_label">שחרר לרענון…</string>
+</resources>
\ No newline at end of file
Index: ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandlerHolder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandlerHolder.java	(revision )
+++ ultrapulltorefreshlibrary/src/main/java/in/srain/cube/views/ptr/PtrUIHandlerHolder.java	(revision )
@@ -0,0 +1,159 @@
+package in.srain.cube.views.ptr;
+
+import in.srain.cube.views.ptr.indicator.PtrIndicator;
+
+/**
+ * A single linked list to wrap PtrUIHandler
+ */
+class PtrUIHandlerHolder implements PtrUIHandler {
+
+    private PtrUIHandler mHandler;
+    private PtrUIHandlerHolder mNext;
+
+    private boolean contains(PtrUIHandler handler) {
+        return mHandler != null && mHandler == handler;
+    }
+
+    private PtrUIHandlerHolder() {
+
+    }
+
+    public boolean hasHandler() {
+        return mHandler != null;
+    }
+
+    private PtrUIHandler getHandler() {
+        return mHandler;
+    }
+
+    public static void addHandler(PtrUIHandlerHolder head, PtrUIHandler handler) {
+
+        if (null == handler) {
+            return;
+        }
+        if (head == null) {
+            return;
+        }
+        if (null == head.mHandler) {
+            head.mHandler = handler;
+            return;
+        }
+
+        PtrUIHandlerHolder current = head;
+        for (; ; current = current.mNext) {
+
+            // duplicated
+            if (current.contains(handler)) {
+                return;
+            }
+            if (current.mNext == null) {
+                break;
+            }
+        }
+
+        PtrUIHandlerHolder newHolder = new PtrUIHandlerHolder();
+        newHolder.mHandler = handler;
+        current.mNext = newHolder;
+    }
+
+    public static PtrUIHandlerHolder create() {
+        return new PtrUIHandlerHolder();
+    }
+
+    public static PtrUIHandlerHolder removeHandler(PtrUIHandlerHolder head, PtrUIHandler handler) {
+        if (head == null || handler == null || null == head.mHandler) {
+            return head;
+        }
+
+        PtrUIHandlerHolder current = head;
+        PtrUIHandlerHolder pre = null;
+        do {
+
+            // delete current: link pre to next, unlink next from current;
+            // pre will no change, current move to next element;
+            if (current.contains(handler)) {
+
+                // current is head
+                if (pre == null) {
+
+                    head = current.mNext;
+                    current.mNext = null;
+
+                    current = head;
+                } else {
+
+                    pre.mNext = current.mNext;
+                    current.mNext = null;
+                    current = pre.mNext;
+                }
+            } else {
+                pre = current;
+                current = current.mNext;
+            }
+
+        } while (current != null);
+
+        if (head == null) {
+            head = new PtrUIHandlerHolder();
+        }
+        return head;
+    }
+
+    @Override
+    public void onUIReset(PtrFrameLayout frame) {
+        PtrUIHandlerHolder current = this;
+        do {
+            final PtrUIHandler handler = current.getHandler();
+            if (null != handler) {
+                handler.onUIReset(frame);
+            }
+        } while ((current = current.mNext) != null);
+    }
+
+    @Override
+    public void onUIRefreshPrepare(PtrFrameLayout frame) {
+        if (!hasHandler()) {
+            return;
+        }
+        PtrUIHandlerHolder current = this;
+        do {
+            final PtrUIHandler handler = current.getHandler();
+            if (null != handler) {
+                handler.onUIRefreshPrepare(frame);
+            }
+        } while ((current = current.mNext) != null);
+    }
+
+    @Override
+    public void onUIRefreshBegin(PtrFrameLayout frame) {
+        PtrUIHandlerHolder current = this;
+        do {
+            final PtrUIHandler handler = current.getHandler();
+            if (null != handler) {
+                handler.onUIRefreshBegin(frame);
+            }
+        } while ((current = current.mNext) != null);
+    }
+
+    @Override
+    public void onUIRefreshComplete(PtrFrameLayout frame) {
+        PtrUIHandlerHolder current = this;
+        do {
+            final PtrUIHandler handler = current.getHandler();
+            if (null != handler) {
+                handler.onUIRefreshComplete(frame);
+            }
+        } while ((current = current.mNext) != null);
+    }
+
+    @Override
+    public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator) {
+        PtrUIHandlerHolder current = this;
+        do {
+            final PtrUIHandler handler = current.getHandler();
+            if (null != handler) {
+                handler.onUIPositionChange(frame, isUnderTouch, status, ptrIndicator);
+            }
+        } while ((current = current.mNext) != null);
+    }
+}
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision )
+++ app/src/main/res/values/strings.xml	(revision )
@@ -0,0 +1,9 @@
+<resources>
+    <string name="app_name">SortingData</string>
+    <string name="action_settings">Settings</string>
+
+    <string name="custom_bar_home">主页</string>
+    <string name="custom_bar_body">正文</string>
+    <string name="custom_bar_setting">设置</string>
+
+</resources>
